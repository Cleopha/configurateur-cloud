// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/objectstorage"
	"backend/ent/panier"
	"backend/ent/panierobjectstorage"
	"backend/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PanierObjectStorageUpdate is the builder for updating PanierObjectStorage entities.
type PanierObjectStorageUpdate struct {
	config
	hooks    []Hook
	mutation *PanierObjectStorageMutation
}

// Where appends a list predicates to the PanierObjectStorageUpdate builder.
func (posu *PanierObjectStorageUpdate) Where(ps ...predicate.PanierObjectStorage) *PanierObjectStorageUpdate {
	posu.mutation.Where(ps...)
	return posu
}

// SetQuantity sets the "quantity" field.
func (posu *PanierObjectStorageUpdate) SetQuantity(i int) *PanierObjectStorageUpdate {
	posu.mutation.ResetQuantity()
	posu.mutation.SetQuantity(i)
	return posu
}

// AddQuantity adds i to the "quantity" field.
func (posu *PanierObjectStorageUpdate) AddQuantity(i int) *PanierObjectStorageUpdate {
	posu.mutation.AddQuantity(i)
	return posu
}

// SetPanierID sets the "panier" edge to the Panier entity by ID.
func (posu *PanierObjectStorageUpdate) SetPanierID(id int) *PanierObjectStorageUpdate {
	posu.mutation.SetPanierID(id)
	return posu
}

// SetPanier sets the "panier" edge to the Panier entity.
func (posu *PanierObjectStorageUpdate) SetPanier(p *Panier) *PanierObjectStorageUpdate {
	return posu.SetPanierID(p.ID)
}

// SetObjectStorageID sets the "objectStorage" edge to the ObjectStorage entity by ID.
func (posu *PanierObjectStorageUpdate) SetObjectStorageID(id int) *PanierObjectStorageUpdate {
	posu.mutation.SetObjectStorageID(id)
	return posu
}

// SetObjectStorage sets the "objectStorage" edge to the ObjectStorage entity.
func (posu *PanierObjectStorageUpdate) SetObjectStorage(o *ObjectStorage) *PanierObjectStorageUpdate {
	return posu.SetObjectStorageID(o.ID)
}

// Mutation returns the PanierObjectStorageMutation object of the builder.
func (posu *PanierObjectStorageUpdate) Mutation() *PanierObjectStorageMutation {
	return posu.mutation
}

// ClearPanier clears the "panier" edge to the Panier entity.
func (posu *PanierObjectStorageUpdate) ClearPanier() *PanierObjectStorageUpdate {
	posu.mutation.ClearPanier()
	return posu
}

// ClearObjectStorage clears the "objectStorage" edge to the ObjectStorage entity.
func (posu *PanierObjectStorageUpdate) ClearObjectStorage() *PanierObjectStorageUpdate {
	posu.mutation.ClearObjectStorage()
	return posu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (posu *PanierObjectStorageUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, posu.sqlSave, posu.mutation, posu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (posu *PanierObjectStorageUpdate) SaveX(ctx context.Context) int {
	affected, err := posu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (posu *PanierObjectStorageUpdate) Exec(ctx context.Context) error {
	_, err := posu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (posu *PanierObjectStorageUpdate) ExecX(ctx context.Context) {
	if err := posu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (posu *PanierObjectStorageUpdate) check() error {
	if _, ok := posu.mutation.PanierID(); posu.mutation.PanierCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PanierObjectStorage.panier"`)
	}
	if _, ok := posu.mutation.ObjectStorageID(); posu.mutation.ObjectStorageCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PanierObjectStorage.objectStorage"`)
	}
	return nil
}

func (posu *PanierObjectStorageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := posu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(panierobjectstorage.Table, panierobjectstorage.Columns, sqlgraph.NewFieldSpec(panierobjectstorage.FieldID, field.TypeInt))
	if ps := posu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := posu.mutation.Quantity(); ok {
		_spec.SetField(panierobjectstorage.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := posu.mutation.AddedQuantity(); ok {
		_spec.AddField(panierobjectstorage.FieldQuantity, field.TypeInt, value)
	}
	if posu.mutation.PanierCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   panierobjectstorage.PanierTable,
			Columns: []string{panierobjectstorage.PanierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panier.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := posu.mutation.PanierIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   panierobjectstorage.PanierTable,
			Columns: []string{panierobjectstorage.PanierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panier.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if posu.mutation.ObjectStorageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   panierobjectstorage.ObjectStorageTable,
			Columns: []string{panierobjectstorage.ObjectStorageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(objectstorage.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := posu.mutation.ObjectStorageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   panierobjectstorage.ObjectStorageTable,
			Columns: []string{panierobjectstorage.ObjectStorageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(objectstorage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, posu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{panierobjectstorage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	posu.mutation.done = true
	return n, nil
}

// PanierObjectStorageUpdateOne is the builder for updating a single PanierObjectStorage entity.
type PanierObjectStorageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PanierObjectStorageMutation
}

// SetQuantity sets the "quantity" field.
func (posuo *PanierObjectStorageUpdateOne) SetQuantity(i int) *PanierObjectStorageUpdateOne {
	posuo.mutation.ResetQuantity()
	posuo.mutation.SetQuantity(i)
	return posuo
}

// AddQuantity adds i to the "quantity" field.
func (posuo *PanierObjectStorageUpdateOne) AddQuantity(i int) *PanierObjectStorageUpdateOne {
	posuo.mutation.AddQuantity(i)
	return posuo
}

// SetPanierID sets the "panier" edge to the Panier entity by ID.
func (posuo *PanierObjectStorageUpdateOne) SetPanierID(id int) *PanierObjectStorageUpdateOne {
	posuo.mutation.SetPanierID(id)
	return posuo
}

// SetPanier sets the "panier" edge to the Panier entity.
func (posuo *PanierObjectStorageUpdateOne) SetPanier(p *Panier) *PanierObjectStorageUpdateOne {
	return posuo.SetPanierID(p.ID)
}

// SetObjectStorageID sets the "objectStorage" edge to the ObjectStorage entity by ID.
func (posuo *PanierObjectStorageUpdateOne) SetObjectStorageID(id int) *PanierObjectStorageUpdateOne {
	posuo.mutation.SetObjectStorageID(id)
	return posuo
}

// SetObjectStorage sets the "objectStorage" edge to the ObjectStorage entity.
func (posuo *PanierObjectStorageUpdateOne) SetObjectStorage(o *ObjectStorage) *PanierObjectStorageUpdateOne {
	return posuo.SetObjectStorageID(o.ID)
}

// Mutation returns the PanierObjectStorageMutation object of the builder.
func (posuo *PanierObjectStorageUpdateOne) Mutation() *PanierObjectStorageMutation {
	return posuo.mutation
}

// ClearPanier clears the "panier" edge to the Panier entity.
func (posuo *PanierObjectStorageUpdateOne) ClearPanier() *PanierObjectStorageUpdateOne {
	posuo.mutation.ClearPanier()
	return posuo
}

// ClearObjectStorage clears the "objectStorage" edge to the ObjectStorage entity.
func (posuo *PanierObjectStorageUpdateOne) ClearObjectStorage() *PanierObjectStorageUpdateOne {
	posuo.mutation.ClearObjectStorage()
	return posuo
}

// Where appends a list predicates to the PanierObjectStorageUpdate builder.
func (posuo *PanierObjectStorageUpdateOne) Where(ps ...predicate.PanierObjectStorage) *PanierObjectStorageUpdateOne {
	posuo.mutation.Where(ps...)
	return posuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (posuo *PanierObjectStorageUpdateOne) Select(field string, fields ...string) *PanierObjectStorageUpdateOne {
	posuo.fields = append([]string{field}, fields...)
	return posuo
}

// Save executes the query and returns the updated PanierObjectStorage entity.
func (posuo *PanierObjectStorageUpdateOne) Save(ctx context.Context) (*PanierObjectStorage, error) {
	return withHooks(ctx, posuo.sqlSave, posuo.mutation, posuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (posuo *PanierObjectStorageUpdateOne) SaveX(ctx context.Context) *PanierObjectStorage {
	node, err := posuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (posuo *PanierObjectStorageUpdateOne) Exec(ctx context.Context) error {
	_, err := posuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (posuo *PanierObjectStorageUpdateOne) ExecX(ctx context.Context) {
	if err := posuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (posuo *PanierObjectStorageUpdateOne) check() error {
	if _, ok := posuo.mutation.PanierID(); posuo.mutation.PanierCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PanierObjectStorage.panier"`)
	}
	if _, ok := posuo.mutation.ObjectStorageID(); posuo.mutation.ObjectStorageCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PanierObjectStorage.objectStorage"`)
	}
	return nil
}

func (posuo *PanierObjectStorageUpdateOne) sqlSave(ctx context.Context) (_node *PanierObjectStorage, err error) {
	if err := posuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(panierobjectstorage.Table, panierobjectstorage.Columns, sqlgraph.NewFieldSpec(panierobjectstorage.FieldID, field.TypeInt))
	id, ok := posuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PanierObjectStorage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := posuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, panierobjectstorage.FieldID)
		for _, f := range fields {
			if !panierobjectstorage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != panierobjectstorage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := posuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := posuo.mutation.Quantity(); ok {
		_spec.SetField(panierobjectstorage.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := posuo.mutation.AddedQuantity(); ok {
		_spec.AddField(panierobjectstorage.FieldQuantity, field.TypeInt, value)
	}
	if posuo.mutation.PanierCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   panierobjectstorage.PanierTable,
			Columns: []string{panierobjectstorage.PanierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panier.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := posuo.mutation.PanierIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   panierobjectstorage.PanierTable,
			Columns: []string{panierobjectstorage.PanierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panier.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if posuo.mutation.ObjectStorageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   panierobjectstorage.ObjectStorageTable,
			Columns: []string{panierobjectstorage.ObjectStorageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(objectstorage.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := posuo.mutation.ObjectStorageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   panierobjectstorage.ObjectStorageTable,
			Columns: []string{panierobjectstorage.ObjectStorageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(objectstorage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PanierObjectStorage{config: posuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, posuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{panierobjectstorage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	posuo.mutation.done = true
	return _node, nil
}
