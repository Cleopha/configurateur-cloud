// Code generated by ent, DO NOT EDIT.

package blockstorage

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the blockstorage type in the database.
	Label = "block_storage"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldIOPS holds the string denoting the iops field in the database.
	FieldIOPS = "iops"
	// FieldBandwidth holds the string denoting the bandwidth field in the database.
	FieldBandwidth = "bandwidth"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// EdgePanierBlockStorage holds the string denoting the panierblockstorage edge name in mutations.
	EdgePanierBlockStorage = "panierBlockStorage"
	// Table holds the table name of the blockstorage in the database.
	Table = "block_storages"
	// PanierBlockStorageTable is the table that holds the panierBlockStorage relation/edge.
	PanierBlockStorageTable = "panier_block_storages"
	// PanierBlockStorageInverseTable is the table name for the PanierBlockStorage entity.
	// It exists in this package in order to avoid circular dependency with the "panierblockstorage" package.
	PanierBlockStorageInverseTable = "panier_block_storages"
	// PanierBlockStorageColumn is the table column denoting the panierBlockStorage relation/edge.
	PanierBlockStorageColumn = "block_storage_panier_block_storage"
)

// Columns holds all SQL columns for blockstorage fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldIOPS,
	FieldBandwidth,
	FieldPrice,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the BlockStorage queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the Name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByIOPS orders the results by the IOPS field.
func ByIOPS(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIOPS, opts...).ToFunc()
}

// ByBandwidth orders the results by the Bandwidth field.
func ByBandwidth(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBandwidth, opts...).ToFunc()
}

// ByPrice orders the results by the Price field.
func ByPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrice, opts...).ToFunc()
}

// ByPanierBlockStorageCount orders the results by panierBlockStorage count.
func ByPanierBlockStorageCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPanierBlockStorageStep(), opts...)
	}
}

// ByPanierBlockStorage orders the results by panierBlockStorage terms.
func ByPanierBlockStorage(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPanierBlockStorageStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPanierBlockStorageStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PanierBlockStorageInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PanierBlockStorageTable, PanierBlockStorageColumn),
	)
}
