// Code generated by ent, DO NOT EDIT.

package blockstorage

import (
	"backend/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.BlockStorage {
	return predicate.BlockStorage(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.BlockStorage {
	return predicate.BlockStorage(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.BlockStorage {
	return predicate.BlockStorage(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.BlockStorage {
	return predicate.BlockStorage(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.BlockStorage {
	return predicate.BlockStorage(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.BlockStorage {
	return predicate.BlockStorage(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.BlockStorage {
	return predicate.BlockStorage(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.BlockStorage {
	return predicate.BlockStorage(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.BlockStorage {
	return predicate.BlockStorage(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "Name" field. It's identical to NameEQ.
func Name(v string) predicate.BlockStorage {
	return predicate.BlockStorage(sql.FieldEQ(FieldName, v))
}

// IOPS applies equality check predicate on the "IOPS" field. It's identical to IOPSEQ.
func IOPS(v int) predicate.BlockStorage {
	return predicate.BlockStorage(sql.FieldEQ(FieldIOPS, v))
}

// Bandwidth applies equality check predicate on the "Bandwidth" field. It's identical to BandwidthEQ.
func Bandwidth(v float64) predicate.BlockStorage {
	return predicate.BlockStorage(sql.FieldEQ(FieldBandwidth, v))
}

// Price applies equality check predicate on the "Price" field. It's identical to PriceEQ.
func Price(v float64) predicate.BlockStorage {
	return predicate.BlockStorage(sql.FieldEQ(FieldPrice, v))
}

// NameEQ applies the EQ predicate on the "Name" field.
func NameEQ(v string) predicate.BlockStorage {
	return predicate.BlockStorage(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "Name" field.
func NameNEQ(v string) predicate.BlockStorage {
	return predicate.BlockStorage(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "Name" field.
func NameIn(vs ...string) predicate.BlockStorage {
	return predicate.BlockStorage(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "Name" field.
func NameNotIn(vs ...string) predicate.BlockStorage {
	return predicate.BlockStorage(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "Name" field.
func NameGT(v string) predicate.BlockStorage {
	return predicate.BlockStorage(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "Name" field.
func NameGTE(v string) predicate.BlockStorage {
	return predicate.BlockStorage(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "Name" field.
func NameLT(v string) predicate.BlockStorage {
	return predicate.BlockStorage(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "Name" field.
func NameLTE(v string) predicate.BlockStorage {
	return predicate.BlockStorage(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "Name" field.
func NameContains(v string) predicate.BlockStorage {
	return predicate.BlockStorage(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "Name" field.
func NameHasPrefix(v string) predicate.BlockStorage {
	return predicate.BlockStorage(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "Name" field.
func NameHasSuffix(v string) predicate.BlockStorage {
	return predicate.BlockStorage(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "Name" field.
func NameEqualFold(v string) predicate.BlockStorage {
	return predicate.BlockStorage(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "Name" field.
func NameContainsFold(v string) predicate.BlockStorage {
	return predicate.BlockStorage(sql.FieldContainsFold(FieldName, v))
}

// IOPSEQ applies the EQ predicate on the "IOPS" field.
func IOPSEQ(v int) predicate.BlockStorage {
	return predicate.BlockStorage(sql.FieldEQ(FieldIOPS, v))
}

// IOPSNEQ applies the NEQ predicate on the "IOPS" field.
func IOPSNEQ(v int) predicate.BlockStorage {
	return predicate.BlockStorage(sql.FieldNEQ(FieldIOPS, v))
}

// IOPSIn applies the In predicate on the "IOPS" field.
func IOPSIn(vs ...int) predicate.BlockStorage {
	return predicate.BlockStorage(sql.FieldIn(FieldIOPS, vs...))
}

// IOPSNotIn applies the NotIn predicate on the "IOPS" field.
func IOPSNotIn(vs ...int) predicate.BlockStorage {
	return predicate.BlockStorage(sql.FieldNotIn(FieldIOPS, vs...))
}

// IOPSGT applies the GT predicate on the "IOPS" field.
func IOPSGT(v int) predicate.BlockStorage {
	return predicate.BlockStorage(sql.FieldGT(FieldIOPS, v))
}

// IOPSGTE applies the GTE predicate on the "IOPS" field.
func IOPSGTE(v int) predicate.BlockStorage {
	return predicate.BlockStorage(sql.FieldGTE(FieldIOPS, v))
}

// IOPSLT applies the LT predicate on the "IOPS" field.
func IOPSLT(v int) predicate.BlockStorage {
	return predicate.BlockStorage(sql.FieldLT(FieldIOPS, v))
}

// IOPSLTE applies the LTE predicate on the "IOPS" field.
func IOPSLTE(v int) predicate.BlockStorage {
	return predicate.BlockStorage(sql.FieldLTE(FieldIOPS, v))
}

// BandwidthEQ applies the EQ predicate on the "Bandwidth" field.
func BandwidthEQ(v float64) predicate.BlockStorage {
	return predicate.BlockStorage(sql.FieldEQ(FieldBandwidth, v))
}

// BandwidthNEQ applies the NEQ predicate on the "Bandwidth" field.
func BandwidthNEQ(v float64) predicate.BlockStorage {
	return predicate.BlockStorage(sql.FieldNEQ(FieldBandwidth, v))
}

// BandwidthIn applies the In predicate on the "Bandwidth" field.
func BandwidthIn(vs ...float64) predicate.BlockStorage {
	return predicate.BlockStorage(sql.FieldIn(FieldBandwidth, vs...))
}

// BandwidthNotIn applies the NotIn predicate on the "Bandwidth" field.
func BandwidthNotIn(vs ...float64) predicate.BlockStorage {
	return predicate.BlockStorage(sql.FieldNotIn(FieldBandwidth, vs...))
}

// BandwidthGT applies the GT predicate on the "Bandwidth" field.
func BandwidthGT(v float64) predicate.BlockStorage {
	return predicate.BlockStorage(sql.FieldGT(FieldBandwidth, v))
}

// BandwidthGTE applies the GTE predicate on the "Bandwidth" field.
func BandwidthGTE(v float64) predicate.BlockStorage {
	return predicate.BlockStorage(sql.FieldGTE(FieldBandwidth, v))
}

// BandwidthLT applies the LT predicate on the "Bandwidth" field.
func BandwidthLT(v float64) predicate.BlockStorage {
	return predicate.BlockStorage(sql.FieldLT(FieldBandwidth, v))
}

// BandwidthLTE applies the LTE predicate on the "Bandwidth" field.
func BandwidthLTE(v float64) predicate.BlockStorage {
	return predicate.BlockStorage(sql.FieldLTE(FieldBandwidth, v))
}

// PriceEQ applies the EQ predicate on the "Price" field.
func PriceEQ(v float64) predicate.BlockStorage {
	return predicate.BlockStorage(sql.FieldEQ(FieldPrice, v))
}

// PriceNEQ applies the NEQ predicate on the "Price" field.
func PriceNEQ(v float64) predicate.BlockStorage {
	return predicate.BlockStorage(sql.FieldNEQ(FieldPrice, v))
}

// PriceIn applies the In predicate on the "Price" field.
func PriceIn(vs ...float64) predicate.BlockStorage {
	return predicate.BlockStorage(sql.FieldIn(FieldPrice, vs...))
}

// PriceNotIn applies the NotIn predicate on the "Price" field.
func PriceNotIn(vs ...float64) predicate.BlockStorage {
	return predicate.BlockStorage(sql.FieldNotIn(FieldPrice, vs...))
}

// PriceGT applies the GT predicate on the "Price" field.
func PriceGT(v float64) predicate.BlockStorage {
	return predicate.BlockStorage(sql.FieldGT(FieldPrice, v))
}

// PriceGTE applies the GTE predicate on the "Price" field.
func PriceGTE(v float64) predicate.BlockStorage {
	return predicate.BlockStorage(sql.FieldGTE(FieldPrice, v))
}

// PriceLT applies the LT predicate on the "Price" field.
func PriceLT(v float64) predicate.BlockStorage {
	return predicate.BlockStorage(sql.FieldLT(FieldPrice, v))
}

// PriceLTE applies the LTE predicate on the "Price" field.
func PriceLTE(v float64) predicate.BlockStorage {
	return predicate.BlockStorage(sql.FieldLTE(FieldPrice, v))
}

// HasPanierBlockStorage applies the HasEdge predicate on the "panierBlockStorage" edge.
func HasPanierBlockStorage() predicate.BlockStorage {
	return predicate.BlockStorage(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PanierBlockStorageTable, PanierBlockStorageColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPanierBlockStorageWith applies the HasEdge predicate on the "panierBlockStorage" edge with a given conditions (other predicates).
func HasPanierBlockStorageWith(preds ...predicate.PanierBlockStorage) predicate.BlockStorage {
	return predicate.BlockStorage(func(s *sql.Selector) {
		step := newPanierBlockStorageStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BlockStorage) predicate.BlockStorage {
	return predicate.BlockStorage(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BlockStorage) predicate.BlockStorage {
	return predicate.BlockStorage(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BlockStorage) predicate.BlockStorage {
	return predicate.BlockStorage(func(s *sql.Selector) {
		p(s.Not())
	})
}
