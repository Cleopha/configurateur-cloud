// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/instances"
	"backend/ent/panier"
	"backend/ent/panierinstances"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PanierInstancesCreate is the builder for creating a PanierInstances entity.
type PanierInstancesCreate struct {
	config
	mutation *PanierInstancesMutation
	hooks    []Hook
}

// SetQuantity sets the "quantity" field.
func (pic *PanierInstancesCreate) SetQuantity(i int) *PanierInstancesCreate {
	pic.mutation.SetQuantity(i)
	return pic
}

// SetPanierID sets the "panier" edge to the Panier entity by ID.
func (pic *PanierInstancesCreate) SetPanierID(id int) *PanierInstancesCreate {
	pic.mutation.SetPanierID(id)
	return pic
}

// SetPanier sets the "panier" edge to the Panier entity.
func (pic *PanierInstancesCreate) SetPanier(p *Panier) *PanierInstancesCreate {
	return pic.SetPanierID(p.ID)
}

// SetInstanceID sets the "instance" edge to the Instances entity by ID.
func (pic *PanierInstancesCreate) SetInstanceID(id int) *PanierInstancesCreate {
	pic.mutation.SetInstanceID(id)
	return pic
}

// SetInstance sets the "instance" edge to the Instances entity.
func (pic *PanierInstancesCreate) SetInstance(i *Instances) *PanierInstancesCreate {
	return pic.SetInstanceID(i.ID)
}

// Mutation returns the PanierInstancesMutation object of the builder.
func (pic *PanierInstancesCreate) Mutation() *PanierInstancesMutation {
	return pic.mutation
}

// Save creates the PanierInstances in the database.
func (pic *PanierInstancesCreate) Save(ctx context.Context) (*PanierInstances, error) {
	return withHooks(ctx, pic.sqlSave, pic.mutation, pic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pic *PanierInstancesCreate) SaveX(ctx context.Context) *PanierInstances {
	v, err := pic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pic *PanierInstancesCreate) Exec(ctx context.Context) error {
	_, err := pic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pic *PanierInstancesCreate) ExecX(ctx context.Context) {
	if err := pic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pic *PanierInstancesCreate) check() error {
	if _, ok := pic.mutation.Quantity(); !ok {
		return &ValidationError{Name: "quantity", err: errors.New(`ent: missing required field "PanierInstances.quantity"`)}
	}
	if _, ok := pic.mutation.PanierID(); !ok {
		return &ValidationError{Name: "panier", err: errors.New(`ent: missing required edge "PanierInstances.panier"`)}
	}
	if _, ok := pic.mutation.InstanceID(); !ok {
		return &ValidationError{Name: "instance", err: errors.New(`ent: missing required edge "PanierInstances.instance"`)}
	}
	return nil
}

func (pic *PanierInstancesCreate) sqlSave(ctx context.Context) (*PanierInstances, error) {
	if err := pic.check(); err != nil {
		return nil, err
	}
	_node, _spec := pic.createSpec()
	if err := sqlgraph.CreateNode(ctx, pic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pic.mutation.id = &_node.ID
	pic.mutation.done = true
	return _node, nil
}

func (pic *PanierInstancesCreate) createSpec() (*PanierInstances, *sqlgraph.CreateSpec) {
	var (
		_node = &PanierInstances{config: pic.config}
		_spec = sqlgraph.NewCreateSpec(panierinstances.Table, sqlgraph.NewFieldSpec(panierinstances.FieldID, field.TypeInt))
	)
	if value, ok := pic.mutation.Quantity(); ok {
		_spec.SetField(panierinstances.FieldQuantity, field.TypeInt, value)
		_node.Quantity = value
	}
	if nodes := pic.mutation.PanierIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   panierinstances.PanierTable,
			Columns: []string{panierinstances.PanierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panier.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.panier_panier_instances = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pic.mutation.InstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   panierinstances.InstanceTable,
			Columns: []string{panierinstances.InstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instances.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.instance_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PanierInstancesCreateBulk is the builder for creating many PanierInstances entities in bulk.
type PanierInstancesCreateBulk struct {
	config
	builders []*PanierInstancesCreate
}

// Save creates the PanierInstances entities in the database.
func (picb *PanierInstancesCreateBulk) Save(ctx context.Context) ([]*PanierInstances, error) {
	specs := make([]*sqlgraph.CreateSpec, len(picb.builders))
	nodes := make([]*PanierInstances, len(picb.builders))
	mutators := make([]Mutator, len(picb.builders))
	for i := range picb.builders {
		func(i int, root context.Context) {
			builder := picb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PanierInstancesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, picb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, picb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, picb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (picb *PanierInstancesCreateBulk) SaveX(ctx context.Context) []*PanierInstances {
	v, err := picb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (picb *PanierInstancesCreateBulk) Exec(ctx context.Context) error {
	_, err := picb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (picb *PanierInstancesCreateBulk) ExecX(ctx context.Context) {
	if err := picb.Exec(ctx); err != nil {
		panic(err)
	}
}
