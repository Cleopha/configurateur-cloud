// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/objectstorage"
	"backend/ent/panierobjectstorage"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ObjectStorageCreate is the builder for creating a ObjectStorage entity.
type ObjectStorageCreate struct {
	config
	mutation *ObjectStorageMutation
	hooks    []Hook
}

// SetName sets the "Name" field.
func (osc *ObjectStorageCreate) SetName(s string) *ObjectStorageCreate {
	osc.mutation.SetName(s)
	return osc
}

// SetPrice sets the "Price" field.
func (osc *ObjectStorageCreate) SetPrice(f float64) *ObjectStorageCreate {
	osc.mutation.SetPrice(f)
	return osc
}

// SetID sets the "id" field.
func (osc *ObjectStorageCreate) SetID(i int) *ObjectStorageCreate {
	osc.mutation.SetID(i)
	return osc
}

// AddPanierObjectStorageIDs adds the "panierObjectStorage" edge to the PanierObjectStorage entity by IDs.
func (osc *ObjectStorageCreate) AddPanierObjectStorageIDs(ids ...int) *ObjectStorageCreate {
	osc.mutation.AddPanierObjectStorageIDs(ids...)
	return osc
}

// AddPanierObjectStorage adds the "panierObjectStorage" edges to the PanierObjectStorage entity.
func (osc *ObjectStorageCreate) AddPanierObjectStorage(p ...*PanierObjectStorage) *ObjectStorageCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return osc.AddPanierObjectStorageIDs(ids...)
}

// Mutation returns the ObjectStorageMutation object of the builder.
func (osc *ObjectStorageCreate) Mutation() *ObjectStorageMutation {
	return osc.mutation
}

// Save creates the ObjectStorage in the database.
func (osc *ObjectStorageCreate) Save(ctx context.Context) (*ObjectStorage, error) {
	return withHooks(ctx, osc.sqlSave, osc.mutation, osc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (osc *ObjectStorageCreate) SaveX(ctx context.Context) *ObjectStorage {
	v, err := osc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (osc *ObjectStorageCreate) Exec(ctx context.Context) error {
	_, err := osc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osc *ObjectStorageCreate) ExecX(ctx context.Context) {
	if err := osc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (osc *ObjectStorageCreate) check() error {
	if _, ok := osc.mutation.Name(); !ok {
		return &ValidationError{Name: "Name", err: errors.New(`ent: missing required field "ObjectStorage.Name"`)}
	}
	if _, ok := osc.mutation.Price(); !ok {
		return &ValidationError{Name: "Price", err: errors.New(`ent: missing required field "ObjectStorage.Price"`)}
	}
	return nil
}

func (osc *ObjectStorageCreate) sqlSave(ctx context.Context) (*ObjectStorage, error) {
	if err := osc.check(); err != nil {
		return nil, err
	}
	_node, _spec := osc.createSpec()
	if err := sqlgraph.CreateNode(ctx, osc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	osc.mutation.id = &_node.ID
	osc.mutation.done = true
	return _node, nil
}

func (osc *ObjectStorageCreate) createSpec() (*ObjectStorage, *sqlgraph.CreateSpec) {
	var (
		_node = &ObjectStorage{config: osc.config}
		_spec = sqlgraph.NewCreateSpec(objectstorage.Table, sqlgraph.NewFieldSpec(objectstorage.FieldID, field.TypeInt))
	)
	if id, ok := osc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := osc.mutation.Name(); ok {
		_spec.SetField(objectstorage.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := osc.mutation.Price(); ok {
		_spec.SetField(objectstorage.FieldPrice, field.TypeFloat64, value)
		_node.Price = value
	}
	if nodes := osc.mutation.PanierObjectStorageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   objectstorage.PanierObjectStorageTable,
			Columns: []string{objectstorage.PanierObjectStorageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panierobjectstorage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ObjectStorageCreateBulk is the builder for creating many ObjectStorage entities in bulk.
type ObjectStorageCreateBulk struct {
	config
	builders []*ObjectStorageCreate
}

// Save creates the ObjectStorage entities in the database.
func (oscb *ObjectStorageCreateBulk) Save(ctx context.Context) ([]*ObjectStorage, error) {
	specs := make([]*sqlgraph.CreateSpec, len(oscb.builders))
	nodes := make([]*ObjectStorage, len(oscb.builders))
	mutators := make([]Mutator, len(oscb.builders))
	for i := range oscb.builders {
		func(i int, root context.Context) {
			builder := oscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ObjectStorageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oscb *ObjectStorageCreateBulk) SaveX(ctx context.Context) []*ObjectStorage {
	v, err := oscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oscb *ObjectStorageCreateBulk) Exec(ctx context.Context) error {
	_, err := oscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oscb *ObjectStorageCreateBulk) ExecX(ctx context.Context) {
	if err := oscb.Exec(ctx); err != nil {
		panic(err)
	}
}
