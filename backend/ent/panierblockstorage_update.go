// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/blockstorage"
	"backend/ent/panier"
	"backend/ent/panierblockstorage"
	"backend/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PanierBlockStorageUpdate is the builder for updating PanierBlockStorage entities.
type PanierBlockStorageUpdate struct {
	config
	hooks    []Hook
	mutation *PanierBlockStorageMutation
}

// Where appends a list predicates to the PanierBlockStorageUpdate builder.
func (pbsu *PanierBlockStorageUpdate) Where(ps ...predicate.PanierBlockStorage) *PanierBlockStorageUpdate {
	pbsu.mutation.Where(ps...)
	return pbsu
}

// SetQuantity sets the "quantity" field.
func (pbsu *PanierBlockStorageUpdate) SetQuantity(i int) *PanierBlockStorageUpdate {
	pbsu.mutation.ResetQuantity()
	pbsu.mutation.SetQuantity(i)
	return pbsu
}

// AddQuantity adds i to the "quantity" field.
func (pbsu *PanierBlockStorageUpdate) AddQuantity(i int) *PanierBlockStorageUpdate {
	pbsu.mutation.AddQuantity(i)
	return pbsu
}

// SetPanierID sets the "panier" edge to the Panier entity by ID.
func (pbsu *PanierBlockStorageUpdate) SetPanierID(id int) *PanierBlockStorageUpdate {
	pbsu.mutation.SetPanierID(id)
	return pbsu
}

// SetPanier sets the "panier" edge to the Panier entity.
func (pbsu *PanierBlockStorageUpdate) SetPanier(p *Panier) *PanierBlockStorageUpdate {
	return pbsu.SetPanierID(p.ID)
}

// SetBlockStorageID sets the "blockStorage" edge to the BlockStorage entity by ID.
func (pbsu *PanierBlockStorageUpdate) SetBlockStorageID(id int) *PanierBlockStorageUpdate {
	pbsu.mutation.SetBlockStorageID(id)
	return pbsu
}

// SetBlockStorage sets the "blockStorage" edge to the BlockStorage entity.
func (pbsu *PanierBlockStorageUpdate) SetBlockStorage(b *BlockStorage) *PanierBlockStorageUpdate {
	return pbsu.SetBlockStorageID(b.ID)
}

// Mutation returns the PanierBlockStorageMutation object of the builder.
func (pbsu *PanierBlockStorageUpdate) Mutation() *PanierBlockStorageMutation {
	return pbsu.mutation
}

// ClearPanier clears the "panier" edge to the Panier entity.
func (pbsu *PanierBlockStorageUpdate) ClearPanier() *PanierBlockStorageUpdate {
	pbsu.mutation.ClearPanier()
	return pbsu
}

// ClearBlockStorage clears the "blockStorage" edge to the BlockStorage entity.
func (pbsu *PanierBlockStorageUpdate) ClearBlockStorage() *PanierBlockStorageUpdate {
	pbsu.mutation.ClearBlockStorage()
	return pbsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pbsu *PanierBlockStorageUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pbsu.sqlSave, pbsu.mutation, pbsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pbsu *PanierBlockStorageUpdate) SaveX(ctx context.Context) int {
	affected, err := pbsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pbsu *PanierBlockStorageUpdate) Exec(ctx context.Context) error {
	_, err := pbsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pbsu *PanierBlockStorageUpdate) ExecX(ctx context.Context) {
	if err := pbsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pbsu *PanierBlockStorageUpdate) check() error {
	if _, ok := pbsu.mutation.PanierID(); pbsu.mutation.PanierCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PanierBlockStorage.panier"`)
	}
	if _, ok := pbsu.mutation.BlockStorageID(); pbsu.mutation.BlockStorageCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PanierBlockStorage.blockStorage"`)
	}
	return nil
}

func (pbsu *PanierBlockStorageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pbsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(panierblockstorage.Table, panierblockstorage.Columns, sqlgraph.NewFieldSpec(panierblockstorage.FieldID, field.TypeInt))
	if ps := pbsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pbsu.mutation.Quantity(); ok {
		_spec.SetField(panierblockstorage.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := pbsu.mutation.AddedQuantity(); ok {
		_spec.AddField(panierblockstorage.FieldQuantity, field.TypeInt, value)
	}
	if pbsu.mutation.PanierCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   panierblockstorage.PanierTable,
			Columns: []string{panierblockstorage.PanierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panier.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pbsu.mutation.PanierIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   panierblockstorage.PanierTable,
			Columns: []string{panierblockstorage.PanierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panier.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pbsu.mutation.BlockStorageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   panierblockstorage.BlockStorageTable,
			Columns: []string{panierblockstorage.BlockStorageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockstorage.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pbsu.mutation.BlockStorageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   panierblockstorage.BlockStorageTable,
			Columns: []string{panierblockstorage.BlockStorageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockstorage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pbsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{panierblockstorage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pbsu.mutation.done = true
	return n, nil
}

// PanierBlockStorageUpdateOne is the builder for updating a single PanierBlockStorage entity.
type PanierBlockStorageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PanierBlockStorageMutation
}

// SetQuantity sets the "quantity" field.
func (pbsuo *PanierBlockStorageUpdateOne) SetQuantity(i int) *PanierBlockStorageUpdateOne {
	pbsuo.mutation.ResetQuantity()
	pbsuo.mutation.SetQuantity(i)
	return pbsuo
}

// AddQuantity adds i to the "quantity" field.
func (pbsuo *PanierBlockStorageUpdateOne) AddQuantity(i int) *PanierBlockStorageUpdateOne {
	pbsuo.mutation.AddQuantity(i)
	return pbsuo
}

// SetPanierID sets the "panier" edge to the Panier entity by ID.
func (pbsuo *PanierBlockStorageUpdateOne) SetPanierID(id int) *PanierBlockStorageUpdateOne {
	pbsuo.mutation.SetPanierID(id)
	return pbsuo
}

// SetPanier sets the "panier" edge to the Panier entity.
func (pbsuo *PanierBlockStorageUpdateOne) SetPanier(p *Panier) *PanierBlockStorageUpdateOne {
	return pbsuo.SetPanierID(p.ID)
}

// SetBlockStorageID sets the "blockStorage" edge to the BlockStorage entity by ID.
func (pbsuo *PanierBlockStorageUpdateOne) SetBlockStorageID(id int) *PanierBlockStorageUpdateOne {
	pbsuo.mutation.SetBlockStorageID(id)
	return pbsuo
}

// SetBlockStorage sets the "blockStorage" edge to the BlockStorage entity.
func (pbsuo *PanierBlockStorageUpdateOne) SetBlockStorage(b *BlockStorage) *PanierBlockStorageUpdateOne {
	return pbsuo.SetBlockStorageID(b.ID)
}

// Mutation returns the PanierBlockStorageMutation object of the builder.
func (pbsuo *PanierBlockStorageUpdateOne) Mutation() *PanierBlockStorageMutation {
	return pbsuo.mutation
}

// ClearPanier clears the "panier" edge to the Panier entity.
func (pbsuo *PanierBlockStorageUpdateOne) ClearPanier() *PanierBlockStorageUpdateOne {
	pbsuo.mutation.ClearPanier()
	return pbsuo
}

// ClearBlockStorage clears the "blockStorage" edge to the BlockStorage entity.
func (pbsuo *PanierBlockStorageUpdateOne) ClearBlockStorage() *PanierBlockStorageUpdateOne {
	pbsuo.mutation.ClearBlockStorage()
	return pbsuo
}

// Where appends a list predicates to the PanierBlockStorageUpdate builder.
func (pbsuo *PanierBlockStorageUpdateOne) Where(ps ...predicate.PanierBlockStorage) *PanierBlockStorageUpdateOne {
	pbsuo.mutation.Where(ps...)
	return pbsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pbsuo *PanierBlockStorageUpdateOne) Select(field string, fields ...string) *PanierBlockStorageUpdateOne {
	pbsuo.fields = append([]string{field}, fields...)
	return pbsuo
}

// Save executes the query and returns the updated PanierBlockStorage entity.
func (pbsuo *PanierBlockStorageUpdateOne) Save(ctx context.Context) (*PanierBlockStorage, error) {
	return withHooks(ctx, pbsuo.sqlSave, pbsuo.mutation, pbsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pbsuo *PanierBlockStorageUpdateOne) SaveX(ctx context.Context) *PanierBlockStorage {
	node, err := pbsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pbsuo *PanierBlockStorageUpdateOne) Exec(ctx context.Context) error {
	_, err := pbsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pbsuo *PanierBlockStorageUpdateOne) ExecX(ctx context.Context) {
	if err := pbsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pbsuo *PanierBlockStorageUpdateOne) check() error {
	if _, ok := pbsuo.mutation.PanierID(); pbsuo.mutation.PanierCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PanierBlockStorage.panier"`)
	}
	if _, ok := pbsuo.mutation.BlockStorageID(); pbsuo.mutation.BlockStorageCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PanierBlockStorage.blockStorage"`)
	}
	return nil
}

func (pbsuo *PanierBlockStorageUpdateOne) sqlSave(ctx context.Context) (_node *PanierBlockStorage, err error) {
	if err := pbsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(panierblockstorage.Table, panierblockstorage.Columns, sqlgraph.NewFieldSpec(panierblockstorage.FieldID, field.TypeInt))
	id, ok := pbsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PanierBlockStorage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pbsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, panierblockstorage.FieldID)
		for _, f := range fields {
			if !panierblockstorage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != panierblockstorage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pbsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pbsuo.mutation.Quantity(); ok {
		_spec.SetField(panierblockstorage.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := pbsuo.mutation.AddedQuantity(); ok {
		_spec.AddField(panierblockstorage.FieldQuantity, field.TypeInt, value)
	}
	if pbsuo.mutation.PanierCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   panierblockstorage.PanierTable,
			Columns: []string{panierblockstorage.PanierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panier.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pbsuo.mutation.PanierIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   panierblockstorage.PanierTable,
			Columns: []string{panierblockstorage.PanierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panier.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pbsuo.mutation.BlockStorageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   panierblockstorage.BlockStorageTable,
			Columns: []string{panierblockstorage.BlockStorageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockstorage.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pbsuo.mutation.BlockStorageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   panierblockstorage.BlockStorageTable,
			Columns: []string{panierblockstorage.BlockStorageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blockstorage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PanierBlockStorage{config: pbsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pbsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{panierblockstorage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pbsuo.mutation.done = true
	return _node, nil
}
