// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/panier"
	"backend/ent/panierblockstorage"
	"backend/ent/panierinstances"
	"backend/ent/panieripaddress"
	"backend/ent/panierloadbalancer"
	"backend/ent/panierobjectstorage"
	"backend/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PanierUpdate is the builder for updating Panier entities.
type PanierUpdate struct {
	config
	hooks    []Hook
	mutation *PanierMutation
}

// Where appends a list predicates to the PanierUpdate builder.
func (pu *PanierUpdate) Where(ps ...predicate.Panier) *PanierUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// AddPanierInstanceIDs adds the "panierInstances" edge to the PanierInstances entity by IDs.
func (pu *PanierUpdate) AddPanierInstanceIDs(ids ...int) *PanierUpdate {
	pu.mutation.AddPanierInstanceIDs(ids...)
	return pu
}

// AddPanierInstances adds the "panierInstances" edges to the PanierInstances entity.
func (pu *PanierUpdate) AddPanierInstances(p ...*PanierInstances) *PanierUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddPanierInstanceIDs(ids...)
}

// AddPanierBlockStorageIDs adds the "panierBlockStorage" edge to the PanierBlockStorage entity by IDs.
func (pu *PanierUpdate) AddPanierBlockStorageIDs(ids ...int) *PanierUpdate {
	pu.mutation.AddPanierBlockStorageIDs(ids...)
	return pu
}

// AddPanierBlockStorage adds the "panierBlockStorage" edges to the PanierBlockStorage entity.
func (pu *PanierUpdate) AddPanierBlockStorage(p ...*PanierBlockStorage) *PanierUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddPanierBlockStorageIDs(ids...)
}

// AddPanierIPAddresIDs adds the "panierIPAddress" edge to the PanierIPAddress entity by IDs.
func (pu *PanierUpdate) AddPanierIPAddresIDs(ids ...int) *PanierUpdate {
	pu.mutation.AddPanierIPAddresIDs(ids...)
	return pu
}

// AddPanierIPAddress adds the "panierIPAddress" edges to the PanierIPAddress entity.
func (pu *PanierUpdate) AddPanierIPAddress(p ...*PanierIPAddress) *PanierUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddPanierIPAddresIDs(ids...)
}

// AddPanierLoadBalancerIDs adds the "panierLoadBalancer" edge to the PanierLoadBalancer entity by IDs.
func (pu *PanierUpdate) AddPanierLoadBalancerIDs(ids ...int) *PanierUpdate {
	pu.mutation.AddPanierLoadBalancerIDs(ids...)
	return pu
}

// AddPanierLoadBalancer adds the "panierLoadBalancer" edges to the PanierLoadBalancer entity.
func (pu *PanierUpdate) AddPanierLoadBalancer(p ...*PanierLoadBalancer) *PanierUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddPanierLoadBalancerIDs(ids...)
}

// AddPanierObjectStorageIDs adds the "panierObjectStorage" edge to the PanierObjectStorage entity by IDs.
func (pu *PanierUpdate) AddPanierObjectStorageIDs(ids ...int) *PanierUpdate {
	pu.mutation.AddPanierObjectStorageIDs(ids...)
	return pu
}

// AddPanierObjectStorage adds the "panierObjectStorage" edges to the PanierObjectStorage entity.
func (pu *PanierUpdate) AddPanierObjectStorage(p ...*PanierObjectStorage) *PanierUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddPanierObjectStorageIDs(ids...)
}

// Mutation returns the PanierMutation object of the builder.
func (pu *PanierUpdate) Mutation() *PanierMutation {
	return pu.mutation
}

// ClearPanierInstances clears all "panierInstances" edges to the PanierInstances entity.
func (pu *PanierUpdate) ClearPanierInstances() *PanierUpdate {
	pu.mutation.ClearPanierInstances()
	return pu
}

// RemovePanierInstanceIDs removes the "panierInstances" edge to PanierInstances entities by IDs.
func (pu *PanierUpdate) RemovePanierInstanceIDs(ids ...int) *PanierUpdate {
	pu.mutation.RemovePanierInstanceIDs(ids...)
	return pu
}

// RemovePanierInstances removes "panierInstances" edges to PanierInstances entities.
func (pu *PanierUpdate) RemovePanierInstances(p ...*PanierInstances) *PanierUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemovePanierInstanceIDs(ids...)
}

// ClearPanierBlockStorage clears all "panierBlockStorage" edges to the PanierBlockStorage entity.
func (pu *PanierUpdate) ClearPanierBlockStorage() *PanierUpdate {
	pu.mutation.ClearPanierBlockStorage()
	return pu
}

// RemovePanierBlockStorageIDs removes the "panierBlockStorage" edge to PanierBlockStorage entities by IDs.
func (pu *PanierUpdate) RemovePanierBlockStorageIDs(ids ...int) *PanierUpdate {
	pu.mutation.RemovePanierBlockStorageIDs(ids...)
	return pu
}

// RemovePanierBlockStorage removes "panierBlockStorage" edges to PanierBlockStorage entities.
func (pu *PanierUpdate) RemovePanierBlockStorage(p ...*PanierBlockStorage) *PanierUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemovePanierBlockStorageIDs(ids...)
}

// ClearPanierIPAddress clears all "panierIPAddress" edges to the PanierIPAddress entity.
func (pu *PanierUpdate) ClearPanierIPAddress() *PanierUpdate {
	pu.mutation.ClearPanierIPAddress()
	return pu
}

// RemovePanierIPAddresIDs removes the "panierIPAddress" edge to PanierIPAddress entities by IDs.
func (pu *PanierUpdate) RemovePanierIPAddresIDs(ids ...int) *PanierUpdate {
	pu.mutation.RemovePanierIPAddresIDs(ids...)
	return pu
}

// RemovePanierIPAddress removes "panierIPAddress" edges to PanierIPAddress entities.
func (pu *PanierUpdate) RemovePanierIPAddress(p ...*PanierIPAddress) *PanierUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemovePanierIPAddresIDs(ids...)
}

// ClearPanierLoadBalancer clears all "panierLoadBalancer" edges to the PanierLoadBalancer entity.
func (pu *PanierUpdate) ClearPanierLoadBalancer() *PanierUpdate {
	pu.mutation.ClearPanierLoadBalancer()
	return pu
}

// RemovePanierLoadBalancerIDs removes the "panierLoadBalancer" edge to PanierLoadBalancer entities by IDs.
func (pu *PanierUpdate) RemovePanierLoadBalancerIDs(ids ...int) *PanierUpdate {
	pu.mutation.RemovePanierLoadBalancerIDs(ids...)
	return pu
}

// RemovePanierLoadBalancer removes "panierLoadBalancer" edges to PanierLoadBalancer entities.
func (pu *PanierUpdate) RemovePanierLoadBalancer(p ...*PanierLoadBalancer) *PanierUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemovePanierLoadBalancerIDs(ids...)
}

// ClearPanierObjectStorage clears all "panierObjectStorage" edges to the PanierObjectStorage entity.
func (pu *PanierUpdate) ClearPanierObjectStorage() *PanierUpdate {
	pu.mutation.ClearPanierObjectStorage()
	return pu
}

// RemovePanierObjectStorageIDs removes the "panierObjectStorage" edge to PanierObjectStorage entities by IDs.
func (pu *PanierUpdate) RemovePanierObjectStorageIDs(ids ...int) *PanierUpdate {
	pu.mutation.RemovePanierObjectStorageIDs(ids...)
	return pu
}

// RemovePanierObjectStorage removes "panierObjectStorage" edges to PanierObjectStorage entities.
func (pu *PanierUpdate) RemovePanierObjectStorage(p ...*PanierObjectStorage) *PanierUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemovePanierObjectStorageIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PanierUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PanierUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PanierUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PanierUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PanierUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(panier.Table, panier.Columns, sqlgraph.NewFieldSpec(panier.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if pu.mutation.PanierInstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   panier.PanierInstancesTable,
			Columns: []string{panier.PanierInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panierinstances.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPanierInstancesIDs(); len(nodes) > 0 && !pu.mutation.PanierInstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   panier.PanierInstancesTable,
			Columns: []string{panier.PanierInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panierinstances.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PanierInstancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   panier.PanierInstancesTable,
			Columns: []string{panier.PanierInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panierinstances.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PanierBlockStorageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   panier.PanierBlockStorageTable,
			Columns: []string{panier.PanierBlockStorageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panierblockstorage.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPanierBlockStorageIDs(); len(nodes) > 0 && !pu.mutation.PanierBlockStorageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   panier.PanierBlockStorageTable,
			Columns: []string{panier.PanierBlockStorageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panierblockstorage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PanierBlockStorageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   panier.PanierBlockStorageTable,
			Columns: []string{panier.PanierBlockStorageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panierblockstorage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PanierIPAddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   panier.PanierIPAddressTable,
			Columns: []string{panier.PanierIPAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panieripaddress.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPanierIPAddressIDs(); len(nodes) > 0 && !pu.mutation.PanierIPAddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   panier.PanierIPAddressTable,
			Columns: []string{panier.PanierIPAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panieripaddress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PanierIPAddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   panier.PanierIPAddressTable,
			Columns: []string{panier.PanierIPAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panieripaddress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PanierLoadBalancerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   panier.PanierLoadBalancerTable,
			Columns: []string{panier.PanierLoadBalancerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panierloadbalancer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPanierLoadBalancerIDs(); len(nodes) > 0 && !pu.mutation.PanierLoadBalancerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   panier.PanierLoadBalancerTable,
			Columns: []string{panier.PanierLoadBalancerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panierloadbalancer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PanierLoadBalancerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   panier.PanierLoadBalancerTable,
			Columns: []string{panier.PanierLoadBalancerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panierloadbalancer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PanierObjectStorageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   panier.PanierObjectStorageTable,
			Columns: []string{panier.PanierObjectStorageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panierobjectstorage.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPanierObjectStorageIDs(); len(nodes) > 0 && !pu.mutation.PanierObjectStorageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   panier.PanierObjectStorageTable,
			Columns: []string{panier.PanierObjectStorageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panierobjectstorage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PanierObjectStorageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   panier.PanierObjectStorageTable,
			Columns: []string{panier.PanierObjectStorageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panierobjectstorage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{panier.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PanierUpdateOne is the builder for updating a single Panier entity.
type PanierUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PanierMutation
}

// AddPanierInstanceIDs adds the "panierInstances" edge to the PanierInstances entity by IDs.
func (puo *PanierUpdateOne) AddPanierInstanceIDs(ids ...int) *PanierUpdateOne {
	puo.mutation.AddPanierInstanceIDs(ids...)
	return puo
}

// AddPanierInstances adds the "panierInstances" edges to the PanierInstances entity.
func (puo *PanierUpdateOne) AddPanierInstances(p ...*PanierInstances) *PanierUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddPanierInstanceIDs(ids...)
}

// AddPanierBlockStorageIDs adds the "panierBlockStorage" edge to the PanierBlockStorage entity by IDs.
func (puo *PanierUpdateOne) AddPanierBlockStorageIDs(ids ...int) *PanierUpdateOne {
	puo.mutation.AddPanierBlockStorageIDs(ids...)
	return puo
}

// AddPanierBlockStorage adds the "panierBlockStorage" edges to the PanierBlockStorage entity.
func (puo *PanierUpdateOne) AddPanierBlockStorage(p ...*PanierBlockStorage) *PanierUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddPanierBlockStorageIDs(ids...)
}

// AddPanierIPAddresIDs adds the "panierIPAddress" edge to the PanierIPAddress entity by IDs.
func (puo *PanierUpdateOne) AddPanierIPAddresIDs(ids ...int) *PanierUpdateOne {
	puo.mutation.AddPanierIPAddresIDs(ids...)
	return puo
}

// AddPanierIPAddress adds the "panierIPAddress" edges to the PanierIPAddress entity.
func (puo *PanierUpdateOne) AddPanierIPAddress(p ...*PanierIPAddress) *PanierUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddPanierIPAddresIDs(ids...)
}

// AddPanierLoadBalancerIDs adds the "panierLoadBalancer" edge to the PanierLoadBalancer entity by IDs.
func (puo *PanierUpdateOne) AddPanierLoadBalancerIDs(ids ...int) *PanierUpdateOne {
	puo.mutation.AddPanierLoadBalancerIDs(ids...)
	return puo
}

// AddPanierLoadBalancer adds the "panierLoadBalancer" edges to the PanierLoadBalancer entity.
func (puo *PanierUpdateOne) AddPanierLoadBalancer(p ...*PanierLoadBalancer) *PanierUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddPanierLoadBalancerIDs(ids...)
}

// AddPanierObjectStorageIDs adds the "panierObjectStorage" edge to the PanierObjectStorage entity by IDs.
func (puo *PanierUpdateOne) AddPanierObjectStorageIDs(ids ...int) *PanierUpdateOne {
	puo.mutation.AddPanierObjectStorageIDs(ids...)
	return puo
}

// AddPanierObjectStorage adds the "panierObjectStorage" edges to the PanierObjectStorage entity.
func (puo *PanierUpdateOne) AddPanierObjectStorage(p ...*PanierObjectStorage) *PanierUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddPanierObjectStorageIDs(ids...)
}

// Mutation returns the PanierMutation object of the builder.
func (puo *PanierUpdateOne) Mutation() *PanierMutation {
	return puo.mutation
}

// ClearPanierInstances clears all "panierInstances" edges to the PanierInstances entity.
func (puo *PanierUpdateOne) ClearPanierInstances() *PanierUpdateOne {
	puo.mutation.ClearPanierInstances()
	return puo
}

// RemovePanierInstanceIDs removes the "panierInstances" edge to PanierInstances entities by IDs.
func (puo *PanierUpdateOne) RemovePanierInstanceIDs(ids ...int) *PanierUpdateOne {
	puo.mutation.RemovePanierInstanceIDs(ids...)
	return puo
}

// RemovePanierInstances removes "panierInstances" edges to PanierInstances entities.
func (puo *PanierUpdateOne) RemovePanierInstances(p ...*PanierInstances) *PanierUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemovePanierInstanceIDs(ids...)
}

// ClearPanierBlockStorage clears all "panierBlockStorage" edges to the PanierBlockStorage entity.
func (puo *PanierUpdateOne) ClearPanierBlockStorage() *PanierUpdateOne {
	puo.mutation.ClearPanierBlockStorage()
	return puo
}

// RemovePanierBlockStorageIDs removes the "panierBlockStorage" edge to PanierBlockStorage entities by IDs.
func (puo *PanierUpdateOne) RemovePanierBlockStorageIDs(ids ...int) *PanierUpdateOne {
	puo.mutation.RemovePanierBlockStorageIDs(ids...)
	return puo
}

// RemovePanierBlockStorage removes "panierBlockStorage" edges to PanierBlockStorage entities.
func (puo *PanierUpdateOne) RemovePanierBlockStorage(p ...*PanierBlockStorage) *PanierUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemovePanierBlockStorageIDs(ids...)
}

// ClearPanierIPAddress clears all "panierIPAddress" edges to the PanierIPAddress entity.
func (puo *PanierUpdateOne) ClearPanierIPAddress() *PanierUpdateOne {
	puo.mutation.ClearPanierIPAddress()
	return puo
}

// RemovePanierIPAddresIDs removes the "panierIPAddress" edge to PanierIPAddress entities by IDs.
func (puo *PanierUpdateOne) RemovePanierIPAddresIDs(ids ...int) *PanierUpdateOne {
	puo.mutation.RemovePanierIPAddresIDs(ids...)
	return puo
}

// RemovePanierIPAddress removes "panierIPAddress" edges to PanierIPAddress entities.
func (puo *PanierUpdateOne) RemovePanierIPAddress(p ...*PanierIPAddress) *PanierUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemovePanierIPAddresIDs(ids...)
}

// ClearPanierLoadBalancer clears all "panierLoadBalancer" edges to the PanierLoadBalancer entity.
func (puo *PanierUpdateOne) ClearPanierLoadBalancer() *PanierUpdateOne {
	puo.mutation.ClearPanierLoadBalancer()
	return puo
}

// RemovePanierLoadBalancerIDs removes the "panierLoadBalancer" edge to PanierLoadBalancer entities by IDs.
func (puo *PanierUpdateOne) RemovePanierLoadBalancerIDs(ids ...int) *PanierUpdateOne {
	puo.mutation.RemovePanierLoadBalancerIDs(ids...)
	return puo
}

// RemovePanierLoadBalancer removes "panierLoadBalancer" edges to PanierLoadBalancer entities.
func (puo *PanierUpdateOne) RemovePanierLoadBalancer(p ...*PanierLoadBalancer) *PanierUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemovePanierLoadBalancerIDs(ids...)
}

// ClearPanierObjectStorage clears all "panierObjectStorage" edges to the PanierObjectStorage entity.
func (puo *PanierUpdateOne) ClearPanierObjectStorage() *PanierUpdateOne {
	puo.mutation.ClearPanierObjectStorage()
	return puo
}

// RemovePanierObjectStorageIDs removes the "panierObjectStorage" edge to PanierObjectStorage entities by IDs.
func (puo *PanierUpdateOne) RemovePanierObjectStorageIDs(ids ...int) *PanierUpdateOne {
	puo.mutation.RemovePanierObjectStorageIDs(ids...)
	return puo
}

// RemovePanierObjectStorage removes "panierObjectStorage" edges to PanierObjectStorage entities.
func (puo *PanierUpdateOne) RemovePanierObjectStorage(p ...*PanierObjectStorage) *PanierUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemovePanierObjectStorageIDs(ids...)
}

// Where appends a list predicates to the PanierUpdate builder.
func (puo *PanierUpdateOne) Where(ps ...predicate.Panier) *PanierUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PanierUpdateOne) Select(field string, fields ...string) *PanierUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Panier entity.
func (puo *PanierUpdateOne) Save(ctx context.Context) (*Panier, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PanierUpdateOne) SaveX(ctx context.Context) *Panier {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PanierUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PanierUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PanierUpdateOne) sqlSave(ctx context.Context) (_node *Panier, err error) {
	_spec := sqlgraph.NewUpdateSpec(panier.Table, panier.Columns, sqlgraph.NewFieldSpec(panier.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Panier.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, panier.FieldID)
		for _, f := range fields {
			if !panier.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != panier.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if puo.mutation.PanierInstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   panier.PanierInstancesTable,
			Columns: []string{panier.PanierInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panierinstances.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPanierInstancesIDs(); len(nodes) > 0 && !puo.mutation.PanierInstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   panier.PanierInstancesTable,
			Columns: []string{panier.PanierInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panierinstances.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PanierInstancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   panier.PanierInstancesTable,
			Columns: []string{panier.PanierInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panierinstances.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PanierBlockStorageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   panier.PanierBlockStorageTable,
			Columns: []string{panier.PanierBlockStorageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panierblockstorage.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPanierBlockStorageIDs(); len(nodes) > 0 && !puo.mutation.PanierBlockStorageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   panier.PanierBlockStorageTable,
			Columns: []string{panier.PanierBlockStorageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panierblockstorage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PanierBlockStorageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   panier.PanierBlockStorageTable,
			Columns: []string{panier.PanierBlockStorageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panierblockstorage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PanierIPAddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   panier.PanierIPAddressTable,
			Columns: []string{panier.PanierIPAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panieripaddress.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPanierIPAddressIDs(); len(nodes) > 0 && !puo.mutation.PanierIPAddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   panier.PanierIPAddressTable,
			Columns: []string{panier.PanierIPAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panieripaddress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PanierIPAddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   panier.PanierIPAddressTable,
			Columns: []string{panier.PanierIPAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panieripaddress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PanierLoadBalancerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   panier.PanierLoadBalancerTable,
			Columns: []string{panier.PanierLoadBalancerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panierloadbalancer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPanierLoadBalancerIDs(); len(nodes) > 0 && !puo.mutation.PanierLoadBalancerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   panier.PanierLoadBalancerTable,
			Columns: []string{panier.PanierLoadBalancerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panierloadbalancer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PanierLoadBalancerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   panier.PanierLoadBalancerTable,
			Columns: []string{panier.PanierLoadBalancerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panierloadbalancer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PanierObjectStorageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   panier.PanierObjectStorageTable,
			Columns: []string{panier.PanierObjectStorageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panierobjectstorage.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPanierObjectStorageIDs(); len(nodes) > 0 && !puo.mutation.PanierObjectStorageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   panier.PanierObjectStorageTable,
			Columns: []string{panier.PanierObjectStorageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panierobjectstorage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PanierObjectStorageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   panier.PanierObjectStorageTable,
			Columns: []string{panier.PanierObjectStorageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panierobjectstorage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Panier{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{panier.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
