// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/instances"
	"backend/ent/panierinstances"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// InstancesCreate is the builder for creating a Instances entity.
type InstancesCreate struct {
	config
	mutation *InstancesMutation
	hooks    []Hook
}

// SetName sets the "Name" field.
func (ic *InstancesCreate) SetName(s string) *InstancesCreate {
	ic.mutation.SetName(s)
	return ic
}

// SetCPU sets the "CPU" field.
func (ic *InstancesCreate) SetCPU(i int) *InstancesCreate {
	ic.mutation.SetCPU(i)
	return ic
}

// SetRAMGo sets the "Ram_Go" field.
func (ic *InstancesCreate) SetRAMGo(i int) *InstancesCreate {
	ic.mutation.SetRAMGo(i)
	return ic
}

// SetStockageGo sets the "Stockage_Go" field.
func (ic *InstancesCreate) SetStockageGo(i int) *InstancesCreate {
	ic.mutation.SetStockageGo(i)
	return ic
}

// SetGPU sets the "GPU" field.
func (ic *InstancesCreate) SetGPU(s string) *InstancesCreate {
	ic.mutation.SetGPU(s)
	return ic
}

// SetType sets the "Type" field.
func (ic *InstancesCreate) SetType(s string) *InstancesCreate {
	ic.mutation.SetType(s)
	return ic
}

// SetPrice sets the "Price" field.
func (ic *InstancesCreate) SetPrice(f float64) *InstancesCreate {
	ic.mutation.SetPrice(f)
	return ic
}

// SetID sets the "id" field.
func (ic *InstancesCreate) SetID(i int) *InstancesCreate {
	ic.mutation.SetID(i)
	return ic
}

// AddPanierInstanceIDs adds the "panierInstances" edge to the PanierInstances entity by IDs.
func (ic *InstancesCreate) AddPanierInstanceIDs(ids ...int) *InstancesCreate {
	ic.mutation.AddPanierInstanceIDs(ids...)
	return ic
}

// AddPanierInstances adds the "panierInstances" edges to the PanierInstances entity.
func (ic *InstancesCreate) AddPanierInstances(p ...*PanierInstances) *InstancesCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ic.AddPanierInstanceIDs(ids...)
}

// Mutation returns the InstancesMutation object of the builder.
func (ic *InstancesCreate) Mutation() *InstancesMutation {
	return ic.mutation
}

// Save creates the Instances in the database.
func (ic *InstancesCreate) Save(ctx context.Context) (*Instances, error) {
	return withHooks(ctx, ic.sqlSave, ic.mutation, ic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ic *InstancesCreate) SaveX(ctx context.Context) *Instances {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *InstancesCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *InstancesCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *InstancesCreate) check() error {
	if _, ok := ic.mutation.Name(); !ok {
		return &ValidationError{Name: "Name", err: errors.New(`ent: missing required field "Instances.Name"`)}
	}
	if _, ok := ic.mutation.CPU(); !ok {
		return &ValidationError{Name: "CPU", err: errors.New(`ent: missing required field "Instances.CPU"`)}
	}
	if _, ok := ic.mutation.RAMGo(); !ok {
		return &ValidationError{Name: "Ram_Go", err: errors.New(`ent: missing required field "Instances.Ram_Go"`)}
	}
	if _, ok := ic.mutation.StockageGo(); !ok {
		return &ValidationError{Name: "Stockage_Go", err: errors.New(`ent: missing required field "Instances.Stockage_Go"`)}
	}
	if _, ok := ic.mutation.GPU(); !ok {
		return &ValidationError{Name: "GPU", err: errors.New(`ent: missing required field "Instances.GPU"`)}
	}
	if _, ok := ic.mutation.GetType(); !ok {
		return &ValidationError{Name: "Type", err: errors.New(`ent: missing required field "Instances.Type"`)}
	}
	if _, ok := ic.mutation.Price(); !ok {
		return &ValidationError{Name: "Price", err: errors.New(`ent: missing required field "Instances.Price"`)}
	}
	return nil
}

func (ic *InstancesCreate) sqlSave(ctx context.Context) (*Instances, error) {
	if err := ic.check(); err != nil {
		return nil, err
	}
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	ic.mutation.id = &_node.ID
	ic.mutation.done = true
	return _node, nil
}

func (ic *InstancesCreate) createSpec() (*Instances, *sqlgraph.CreateSpec) {
	var (
		_node = &Instances{config: ic.config}
		_spec = sqlgraph.NewCreateSpec(instances.Table, sqlgraph.NewFieldSpec(instances.FieldID, field.TypeInt))
	)
	if id, ok := ic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ic.mutation.Name(); ok {
		_spec.SetField(instances.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ic.mutation.CPU(); ok {
		_spec.SetField(instances.FieldCPU, field.TypeInt, value)
		_node.CPU = value
	}
	if value, ok := ic.mutation.RAMGo(); ok {
		_spec.SetField(instances.FieldRAMGo, field.TypeInt, value)
		_node.RAMGo = value
	}
	if value, ok := ic.mutation.StockageGo(); ok {
		_spec.SetField(instances.FieldStockageGo, field.TypeInt, value)
		_node.StockageGo = value
	}
	if value, ok := ic.mutation.GPU(); ok {
		_spec.SetField(instances.FieldGPU, field.TypeString, value)
		_node.GPU = value
	}
	if value, ok := ic.mutation.GetType(); ok {
		_spec.SetField(instances.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := ic.mutation.Price(); ok {
		_spec.SetField(instances.FieldPrice, field.TypeFloat64, value)
		_node.Price = value
	}
	if nodes := ic.mutation.PanierInstancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   instances.PanierInstancesTable,
			Columns: []string{instances.PanierInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panierinstances.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// InstancesCreateBulk is the builder for creating many Instances entities in bulk.
type InstancesCreateBulk struct {
	config
	builders []*InstancesCreate
}

// Save creates the Instances entities in the database.
func (icb *InstancesCreateBulk) Save(ctx context.Context) ([]*Instances, error) {
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Instances, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InstancesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *InstancesCreateBulk) SaveX(ctx context.Context) []*Instances {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *InstancesCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *InstancesCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}
