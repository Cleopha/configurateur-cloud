// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/panier"
	"backend/ent/panierblockstorage"
	"backend/ent/panierinstances"
	"backend/ent/panieripaddress"
	"backend/ent/panierloadbalancer"
	"backend/ent/panierobjectstorage"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// PanierCreate is the builder for creating a Panier entity.
type PanierCreate struct {
	config
	mutation *PanierMutation
	hooks    []Hook
}

// SetUID sets the "uid" field.
func (pc *PanierCreate) SetUID(u uuid.UUID) *PanierCreate {
	pc.mutation.SetUID(u)
	return pc
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (pc *PanierCreate) SetNillableUID(u *uuid.UUID) *PanierCreate {
	if u != nil {
		pc.SetUID(*u)
	}
	return pc
}

// AddPanierInstanceIDs adds the "panierInstances" edge to the PanierInstances entity by IDs.
func (pc *PanierCreate) AddPanierInstanceIDs(ids ...int) *PanierCreate {
	pc.mutation.AddPanierInstanceIDs(ids...)
	return pc
}

// AddPanierInstances adds the "panierInstances" edges to the PanierInstances entity.
func (pc *PanierCreate) AddPanierInstances(p ...*PanierInstances) *PanierCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddPanierInstanceIDs(ids...)
}

// AddPanierBlockStorageIDs adds the "panierBlockStorage" edge to the PanierBlockStorage entity by IDs.
func (pc *PanierCreate) AddPanierBlockStorageIDs(ids ...int) *PanierCreate {
	pc.mutation.AddPanierBlockStorageIDs(ids...)
	return pc
}

// AddPanierBlockStorage adds the "panierBlockStorage" edges to the PanierBlockStorage entity.
func (pc *PanierCreate) AddPanierBlockStorage(p ...*PanierBlockStorage) *PanierCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddPanierBlockStorageIDs(ids...)
}

// AddPanierIPAddresIDs adds the "panierIPAddress" edge to the PanierIPAddress entity by IDs.
func (pc *PanierCreate) AddPanierIPAddresIDs(ids ...int) *PanierCreate {
	pc.mutation.AddPanierIPAddresIDs(ids...)
	return pc
}

// AddPanierIPAddress adds the "panierIPAddress" edges to the PanierIPAddress entity.
func (pc *PanierCreate) AddPanierIPAddress(p ...*PanierIPAddress) *PanierCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddPanierIPAddresIDs(ids...)
}

// AddPanierLoadBalancerIDs adds the "panierLoadBalancer" edge to the PanierLoadBalancer entity by IDs.
func (pc *PanierCreate) AddPanierLoadBalancerIDs(ids ...int) *PanierCreate {
	pc.mutation.AddPanierLoadBalancerIDs(ids...)
	return pc
}

// AddPanierLoadBalancer adds the "panierLoadBalancer" edges to the PanierLoadBalancer entity.
func (pc *PanierCreate) AddPanierLoadBalancer(p ...*PanierLoadBalancer) *PanierCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddPanierLoadBalancerIDs(ids...)
}

// AddPanierObjectStorageIDs adds the "panierObjectStorage" edge to the PanierObjectStorage entity by IDs.
func (pc *PanierCreate) AddPanierObjectStorageIDs(ids ...int) *PanierCreate {
	pc.mutation.AddPanierObjectStorageIDs(ids...)
	return pc
}

// AddPanierObjectStorage adds the "panierObjectStorage" edges to the PanierObjectStorage entity.
func (pc *PanierCreate) AddPanierObjectStorage(p ...*PanierObjectStorage) *PanierCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddPanierObjectStorageIDs(ids...)
}

// Mutation returns the PanierMutation object of the builder.
func (pc *PanierCreate) Mutation() *PanierMutation {
	return pc.mutation
}

// Save creates the Panier in the database.
func (pc *PanierCreate) Save(ctx context.Context) (*Panier, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PanierCreate) SaveX(ctx context.Context) *Panier {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PanierCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PanierCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PanierCreate) defaults() {
	if _, ok := pc.mutation.UID(); !ok {
		v := panier.DefaultUID()
		pc.mutation.SetUID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PanierCreate) check() error {
	if _, ok := pc.mutation.UID(); !ok {
		return &ValidationError{Name: "uid", err: errors.New(`ent: missing required field "Panier.uid"`)}
	}
	return nil
}

func (pc *PanierCreate) sqlSave(ctx context.Context) (*Panier, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PanierCreate) createSpec() (*Panier, *sqlgraph.CreateSpec) {
	var (
		_node = &Panier{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(panier.Table, sqlgraph.NewFieldSpec(panier.FieldID, field.TypeInt))
	)
	if value, ok := pc.mutation.UID(); ok {
		_spec.SetField(panier.FieldUID, field.TypeUUID, value)
		_node.UID = value
	}
	if nodes := pc.mutation.PanierInstancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   panier.PanierInstancesTable,
			Columns: []string{panier.PanierInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panierinstances.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.PanierBlockStorageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   panier.PanierBlockStorageTable,
			Columns: []string{panier.PanierBlockStorageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panierblockstorage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.PanierIPAddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   panier.PanierIPAddressTable,
			Columns: []string{panier.PanierIPAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panieripaddress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.PanierLoadBalancerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   panier.PanierLoadBalancerTable,
			Columns: []string{panier.PanierLoadBalancerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panierloadbalancer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.PanierObjectStorageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   panier.PanierObjectStorageTable,
			Columns: []string{panier.PanierObjectStorageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panierobjectstorage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PanierCreateBulk is the builder for creating many Panier entities in bulk.
type PanierCreateBulk struct {
	config
	builders []*PanierCreate
}

// Save creates the Panier entities in the database.
func (pcb *PanierCreateBulk) Save(ctx context.Context) ([]*Panier, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Panier, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PanierMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PanierCreateBulk) SaveX(ctx context.Context) []*Panier {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PanierCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PanierCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
