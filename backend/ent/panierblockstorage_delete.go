// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/panierblockstorage"
	"backend/ent/predicate"
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PanierBlockStorageDelete is the builder for deleting a PanierBlockStorage entity.
type PanierBlockStorageDelete struct {
	config
	hooks    []Hook
	mutation *PanierBlockStorageMutation
}

// Where appends a list predicates to the PanierBlockStorageDelete builder.
func (pbsd *PanierBlockStorageDelete) Where(ps ...predicate.PanierBlockStorage) *PanierBlockStorageDelete {
	pbsd.mutation.Where(ps...)
	return pbsd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (pbsd *PanierBlockStorageDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, pbsd.sqlExec, pbsd.mutation, pbsd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (pbsd *PanierBlockStorageDelete) ExecX(ctx context.Context) int {
	n, err := pbsd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (pbsd *PanierBlockStorageDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(panierblockstorage.Table, sqlgraph.NewFieldSpec(panierblockstorage.FieldID, field.TypeInt))
	if ps := pbsd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, pbsd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	pbsd.mutation.done = true
	return affected, err
}

// PanierBlockStorageDeleteOne is the builder for deleting a single PanierBlockStorage entity.
type PanierBlockStorageDeleteOne struct {
	pbsd *PanierBlockStorageDelete
}

// Where appends a list predicates to the PanierBlockStorageDelete builder.
func (pbsdo *PanierBlockStorageDeleteOne) Where(ps ...predicate.PanierBlockStorage) *PanierBlockStorageDeleteOne {
	pbsdo.pbsd.mutation.Where(ps...)
	return pbsdo
}

// Exec executes the deletion query.
func (pbsdo *PanierBlockStorageDeleteOne) Exec(ctx context.Context) error {
	n, err := pbsdo.pbsd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{panierblockstorage.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (pbsdo *PanierBlockStorageDeleteOne) ExecX(ctx context.Context) {
	if err := pbsdo.Exec(ctx); err != nil {
		panic(err)
	}
}
