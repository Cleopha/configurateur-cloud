// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/ipaddress"
	"backend/ent/panier"
	"backend/ent/panieripaddress"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PanierIPAddressCreate is the builder for creating a PanierIPAddress entity.
type PanierIPAddressCreate struct {
	config
	mutation *PanierIPAddressMutation
	hooks    []Hook
}

// SetQuantity sets the "quantity" field.
func (piac *PanierIPAddressCreate) SetQuantity(i int) *PanierIPAddressCreate {
	piac.mutation.SetQuantity(i)
	return piac
}

// SetPanierID sets the "panier" edge to the Panier entity by ID.
func (piac *PanierIPAddressCreate) SetPanierID(id int) *PanierIPAddressCreate {
	piac.mutation.SetPanierID(id)
	return piac
}

// SetPanier sets the "panier" edge to the Panier entity.
func (piac *PanierIPAddressCreate) SetPanier(p *Panier) *PanierIPAddressCreate {
	return piac.SetPanierID(p.ID)
}

// SetIPAddressID sets the "IPAddress" edge to the IPAddress entity by ID.
func (piac *PanierIPAddressCreate) SetIPAddressID(id int) *PanierIPAddressCreate {
	piac.mutation.SetIPAddressID(id)
	return piac
}

// SetIPAddress sets the "IPAddress" edge to the IPAddress entity.
func (piac *PanierIPAddressCreate) SetIPAddress(i *IPAddress) *PanierIPAddressCreate {
	return piac.SetIPAddressID(i.ID)
}

// Mutation returns the PanierIPAddressMutation object of the builder.
func (piac *PanierIPAddressCreate) Mutation() *PanierIPAddressMutation {
	return piac.mutation
}

// Save creates the PanierIPAddress in the database.
func (piac *PanierIPAddressCreate) Save(ctx context.Context) (*PanierIPAddress, error) {
	return withHooks(ctx, piac.sqlSave, piac.mutation, piac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (piac *PanierIPAddressCreate) SaveX(ctx context.Context) *PanierIPAddress {
	v, err := piac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (piac *PanierIPAddressCreate) Exec(ctx context.Context) error {
	_, err := piac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piac *PanierIPAddressCreate) ExecX(ctx context.Context) {
	if err := piac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (piac *PanierIPAddressCreate) check() error {
	if _, ok := piac.mutation.Quantity(); !ok {
		return &ValidationError{Name: "quantity", err: errors.New(`ent: missing required field "PanierIPAddress.quantity"`)}
	}
	if _, ok := piac.mutation.PanierID(); !ok {
		return &ValidationError{Name: "panier", err: errors.New(`ent: missing required edge "PanierIPAddress.panier"`)}
	}
	if _, ok := piac.mutation.IPAddressID(); !ok {
		return &ValidationError{Name: "IPAddress", err: errors.New(`ent: missing required edge "PanierIPAddress.IPAddress"`)}
	}
	return nil
}

func (piac *PanierIPAddressCreate) sqlSave(ctx context.Context) (*PanierIPAddress, error) {
	if err := piac.check(); err != nil {
		return nil, err
	}
	_node, _spec := piac.createSpec()
	if err := sqlgraph.CreateNode(ctx, piac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	piac.mutation.id = &_node.ID
	piac.mutation.done = true
	return _node, nil
}

func (piac *PanierIPAddressCreate) createSpec() (*PanierIPAddress, *sqlgraph.CreateSpec) {
	var (
		_node = &PanierIPAddress{config: piac.config}
		_spec = sqlgraph.NewCreateSpec(panieripaddress.Table, sqlgraph.NewFieldSpec(panieripaddress.FieldID, field.TypeInt))
	)
	if value, ok := piac.mutation.Quantity(); ok {
		_spec.SetField(panieripaddress.FieldQuantity, field.TypeInt, value)
		_node.Quantity = value
	}
	if nodes := piac.mutation.PanierIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   panieripaddress.PanierTable,
			Columns: []string{panieripaddress.PanierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panier.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.panier_panier_ip_address = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := piac.mutation.IPAddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   panieripaddress.IPAddressTable,
			Columns: []string{panieripaddress.IPAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ipaddress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node._IPAddress_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PanierIPAddressCreateBulk is the builder for creating many PanierIPAddress entities in bulk.
type PanierIPAddressCreateBulk struct {
	config
	builders []*PanierIPAddressCreate
}

// Save creates the PanierIPAddress entities in the database.
func (piacb *PanierIPAddressCreateBulk) Save(ctx context.Context) ([]*PanierIPAddress, error) {
	specs := make([]*sqlgraph.CreateSpec, len(piacb.builders))
	nodes := make([]*PanierIPAddress, len(piacb.builders))
	mutators := make([]Mutator, len(piacb.builders))
	for i := range piacb.builders {
		func(i int, root context.Context) {
			builder := piacb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PanierIPAddressMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, piacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, piacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, piacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (piacb *PanierIPAddressCreateBulk) SaveX(ctx context.Context) []*PanierIPAddress {
	v, err := piacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (piacb *PanierIPAddressCreateBulk) Exec(ctx context.Context) error {
	_, err := piacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piacb *PanierIPAddressCreateBulk) ExecX(ctx context.Context) {
	if err := piacb.Exec(ctx); err != nil {
		panic(err)
	}
}
