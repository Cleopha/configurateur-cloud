// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/instances"
	"backend/ent/panierinstances"
	"backend/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// InstancesUpdate is the builder for updating Instances entities.
type InstancesUpdate struct {
	config
	hooks    []Hook
	mutation *InstancesMutation
}

// Where appends a list predicates to the InstancesUpdate builder.
func (iu *InstancesUpdate) Where(ps ...predicate.Instances) *InstancesUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetName sets the "Name" field.
func (iu *InstancesUpdate) SetName(s string) *InstancesUpdate {
	iu.mutation.SetName(s)
	return iu
}

// SetCPU sets the "CPU" field.
func (iu *InstancesUpdate) SetCPU(i int) *InstancesUpdate {
	iu.mutation.ResetCPU()
	iu.mutation.SetCPU(i)
	return iu
}

// AddCPU adds i to the "CPU" field.
func (iu *InstancesUpdate) AddCPU(i int) *InstancesUpdate {
	iu.mutation.AddCPU(i)
	return iu
}

// SetRAMGo sets the "Ram_Go" field.
func (iu *InstancesUpdate) SetRAMGo(i int) *InstancesUpdate {
	iu.mutation.ResetRAMGo()
	iu.mutation.SetRAMGo(i)
	return iu
}

// AddRAMGo adds i to the "Ram_Go" field.
func (iu *InstancesUpdate) AddRAMGo(i int) *InstancesUpdate {
	iu.mutation.AddRAMGo(i)
	return iu
}

// SetStockageGo sets the "Stockage_Go" field.
func (iu *InstancesUpdate) SetStockageGo(i int) *InstancesUpdate {
	iu.mutation.ResetStockageGo()
	iu.mutation.SetStockageGo(i)
	return iu
}

// AddStockageGo adds i to the "Stockage_Go" field.
func (iu *InstancesUpdate) AddStockageGo(i int) *InstancesUpdate {
	iu.mutation.AddStockageGo(i)
	return iu
}

// SetGPU sets the "GPU" field.
func (iu *InstancesUpdate) SetGPU(s string) *InstancesUpdate {
	iu.mutation.SetGPU(s)
	return iu
}

// SetType sets the "Type" field.
func (iu *InstancesUpdate) SetType(s string) *InstancesUpdate {
	iu.mutation.SetType(s)
	return iu
}

// SetPrice sets the "Price" field.
func (iu *InstancesUpdate) SetPrice(f float64) *InstancesUpdate {
	iu.mutation.ResetPrice()
	iu.mutation.SetPrice(f)
	return iu
}

// AddPrice adds f to the "Price" field.
func (iu *InstancesUpdate) AddPrice(f float64) *InstancesUpdate {
	iu.mutation.AddPrice(f)
	return iu
}

// AddPanierInstanceIDs adds the "panierInstances" edge to the PanierInstances entity by IDs.
func (iu *InstancesUpdate) AddPanierInstanceIDs(ids ...int) *InstancesUpdate {
	iu.mutation.AddPanierInstanceIDs(ids...)
	return iu
}

// AddPanierInstances adds the "panierInstances" edges to the PanierInstances entity.
func (iu *InstancesUpdate) AddPanierInstances(p ...*PanierInstances) *InstancesUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return iu.AddPanierInstanceIDs(ids...)
}

// Mutation returns the InstancesMutation object of the builder.
func (iu *InstancesUpdate) Mutation() *InstancesMutation {
	return iu.mutation
}

// ClearPanierInstances clears all "panierInstances" edges to the PanierInstances entity.
func (iu *InstancesUpdate) ClearPanierInstances() *InstancesUpdate {
	iu.mutation.ClearPanierInstances()
	return iu
}

// RemovePanierInstanceIDs removes the "panierInstances" edge to PanierInstances entities by IDs.
func (iu *InstancesUpdate) RemovePanierInstanceIDs(ids ...int) *InstancesUpdate {
	iu.mutation.RemovePanierInstanceIDs(ids...)
	return iu
}

// RemovePanierInstances removes "panierInstances" edges to PanierInstances entities.
func (iu *InstancesUpdate) RemovePanierInstances(p ...*PanierInstances) *InstancesUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return iu.RemovePanierInstanceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *InstancesUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *InstancesUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *InstancesUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *InstancesUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iu *InstancesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(instances.Table, instances.Columns, sqlgraph.NewFieldSpec(instances.FieldID, field.TypeInt))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.Name(); ok {
		_spec.SetField(instances.FieldName, field.TypeString, value)
	}
	if value, ok := iu.mutation.CPU(); ok {
		_spec.SetField(instances.FieldCPU, field.TypeInt, value)
	}
	if value, ok := iu.mutation.AddedCPU(); ok {
		_spec.AddField(instances.FieldCPU, field.TypeInt, value)
	}
	if value, ok := iu.mutation.RAMGo(); ok {
		_spec.SetField(instances.FieldRAMGo, field.TypeInt, value)
	}
	if value, ok := iu.mutation.AddedRAMGo(); ok {
		_spec.AddField(instances.FieldRAMGo, field.TypeInt, value)
	}
	if value, ok := iu.mutation.StockageGo(); ok {
		_spec.SetField(instances.FieldStockageGo, field.TypeInt, value)
	}
	if value, ok := iu.mutation.AddedStockageGo(); ok {
		_spec.AddField(instances.FieldStockageGo, field.TypeInt, value)
	}
	if value, ok := iu.mutation.GPU(); ok {
		_spec.SetField(instances.FieldGPU, field.TypeString, value)
	}
	if value, ok := iu.mutation.GetType(); ok {
		_spec.SetField(instances.FieldType, field.TypeString, value)
	}
	if value, ok := iu.mutation.Price(); ok {
		_spec.SetField(instances.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := iu.mutation.AddedPrice(); ok {
		_spec.AddField(instances.FieldPrice, field.TypeFloat64, value)
	}
	if iu.mutation.PanierInstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   instances.PanierInstancesTable,
			Columns: []string{instances.PanierInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panierinstances.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedPanierInstancesIDs(); len(nodes) > 0 && !iu.mutation.PanierInstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   instances.PanierInstancesTable,
			Columns: []string{instances.PanierInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panierinstances.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.PanierInstancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   instances.PanierInstancesTable,
			Columns: []string{instances.PanierInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panierinstances.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{instances.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// InstancesUpdateOne is the builder for updating a single Instances entity.
type InstancesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InstancesMutation
}

// SetName sets the "Name" field.
func (iuo *InstancesUpdateOne) SetName(s string) *InstancesUpdateOne {
	iuo.mutation.SetName(s)
	return iuo
}

// SetCPU sets the "CPU" field.
func (iuo *InstancesUpdateOne) SetCPU(i int) *InstancesUpdateOne {
	iuo.mutation.ResetCPU()
	iuo.mutation.SetCPU(i)
	return iuo
}

// AddCPU adds i to the "CPU" field.
func (iuo *InstancesUpdateOne) AddCPU(i int) *InstancesUpdateOne {
	iuo.mutation.AddCPU(i)
	return iuo
}

// SetRAMGo sets the "Ram_Go" field.
func (iuo *InstancesUpdateOne) SetRAMGo(i int) *InstancesUpdateOne {
	iuo.mutation.ResetRAMGo()
	iuo.mutation.SetRAMGo(i)
	return iuo
}

// AddRAMGo adds i to the "Ram_Go" field.
func (iuo *InstancesUpdateOne) AddRAMGo(i int) *InstancesUpdateOne {
	iuo.mutation.AddRAMGo(i)
	return iuo
}

// SetStockageGo sets the "Stockage_Go" field.
func (iuo *InstancesUpdateOne) SetStockageGo(i int) *InstancesUpdateOne {
	iuo.mutation.ResetStockageGo()
	iuo.mutation.SetStockageGo(i)
	return iuo
}

// AddStockageGo adds i to the "Stockage_Go" field.
func (iuo *InstancesUpdateOne) AddStockageGo(i int) *InstancesUpdateOne {
	iuo.mutation.AddStockageGo(i)
	return iuo
}

// SetGPU sets the "GPU" field.
func (iuo *InstancesUpdateOne) SetGPU(s string) *InstancesUpdateOne {
	iuo.mutation.SetGPU(s)
	return iuo
}

// SetType sets the "Type" field.
func (iuo *InstancesUpdateOne) SetType(s string) *InstancesUpdateOne {
	iuo.mutation.SetType(s)
	return iuo
}

// SetPrice sets the "Price" field.
func (iuo *InstancesUpdateOne) SetPrice(f float64) *InstancesUpdateOne {
	iuo.mutation.ResetPrice()
	iuo.mutation.SetPrice(f)
	return iuo
}

// AddPrice adds f to the "Price" field.
func (iuo *InstancesUpdateOne) AddPrice(f float64) *InstancesUpdateOne {
	iuo.mutation.AddPrice(f)
	return iuo
}

// AddPanierInstanceIDs adds the "panierInstances" edge to the PanierInstances entity by IDs.
func (iuo *InstancesUpdateOne) AddPanierInstanceIDs(ids ...int) *InstancesUpdateOne {
	iuo.mutation.AddPanierInstanceIDs(ids...)
	return iuo
}

// AddPanierInstances adds the "panierInstances" edges to the PanierInstances entity.
func (iuo *InstancesUpdateOne) AddPanierInstances(p ...*PanierInstances) *InstancesUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return iuo.AddPanierInstanceIDs(ids...)
}

// Mutation returns the InstancesMutation object of the builder.
func (iuo *InstancesUpdateOne) Mutation() *InstancesMutation {
	return iuo.mutation
}

// ClearPanierInstances clears all "panierInstances" edges to the PanierInstances entity.
func (iuo *InstancesUpdateOne) ClearPanierInstances() *InstancesUpdateOne {
	iuo.mutation.ClearPanierInstances()
	return iuo
}

// RemovePanierInstanceIDs removes the "panierInstances" edge to PanierInstances entities by IDs.
func (iuo *InstancesUpdateOne) RemovePanierInstanceIDs(ids ...int) *InstancesUpdateOne {
	iuo.mutation.RemovePanierInstanceIDs(ids...)
	return iuo
}

// RemovePanierInstances removes "panierInstances" edges to PanierInstances entities.
func (iuo *InstancesUpdateOne) RemovePanierInstances(p ...*PanierInstances) *InstancesUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return iuo.RemovePanierInstanceIDs(ids...)
}

// Where appends a list predicates to the InstancesUpdate builder.
func (iuo *InstancesUpdateOne) Where(ps ...predicate.Instances) *InstancesUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *InstancesUpdateOne) Select(field string, fields ...string) *InstancesUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Instances entity.
func (iuo *InstancesUpdateOne) Save(ctx context.Context) (*Instances, error) {
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *InstancesUpdateOne) SaveX(ctx context.Context) *Instances {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *InstancesUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *InstancesUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iuo *InstancesUpdateOne) sqlSave(ctx context.Context) (_node *Instances, err error) {
	_spec := sqlgraph.NewUpdateSpec(instances.Table, instances.Columns, sqlgraph.NewFieldSpec(instances.FieldID, field.TypeInt))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Instances.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, instances.FieldID)
		for _, f := range fields {
			if !instances.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != instances.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.Name(); ok {
		_spec.SetField(instances.FieldName, field.TypeString, value)
	}
	if value, ok := iuo.mutation.CPU(); ok {
		_spec.SetField(instances.FieldCPU, field.TypeInt, value)
	}
	if value, ok := iuo.mutation.AddedCPU(); ok {
		_spec.AddField(instances.FieldCPU, field.TypeInt, value)
	}
	if value, ok := iuo.mutation.RAMGo(); ok {
		_spec.SetField(instances.FieldRAMGo, field.TypeInt, value)
	}
	if value, ok := iuo.mutation.AddedRAMGo(); ok {
		_spec.AddField(instances.FieldRAMGo, field.TypeInt, value)
	}
	if value, ok := iuo.mutation.StockageGo(); ok {
		_spec.SetField(instances.FieldStockageGo, field.TypeInt, value)
	}
	if value, ok := iuo.mutation.AddedStockageGo(); ok {
		_spec.AddField(instances.FieldStockageGo, field.TypeInt, value)
	}
	if value, ok := iuo.mutation.GPU(); ok {
		_spec.SetField(instances.FieldGPU, field.TypeString, value)
	}
	if value, ok := iuo.mutation.GetType(); ok {
		_spec.SetField(instances.FieldType, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Price(); ok {
		_spec.SetField(instances.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := iuo.mutation.AddedPrice(); ok {
		_spec.AddField(instances.FieldPrice, field.TypeFloat64, value)
	}
	if iuo.mutation.PanierInstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   instances.PanierInstancesTable,
			Columns: []string{instances.PanierInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panierinstances.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedPanierInstancesIDs(); len(nodes) > 0 && !iuo.mutation.PanierInstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   instances.PanierInstancesTable,
			Columns: []string{instances.PanierInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panierinstances.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.PanierInstancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   instances.PanierInstancesTable,
			Columns: []string{instances.PanierInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panierinstances.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Instances{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{instances.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
