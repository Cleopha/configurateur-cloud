// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/loadbalancer"
	"backend/ent/panier"
	"backend/ent/panierloadbalancer"
	"backend/ent/predicate"
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PanierLoadBalancerQuery is the builder for querying PanierLoadBalancer entities.
type PanierLoadBalancerQuery struct {
	config
	ctx              *QueryContext
	order            []panierloadbalancer.OrderOption
	inters           []Interceptor
	predicates       []predicate.PanierLoadBalancer
	withPanier       *PanierQuery
	withLoadBalancer *LoadBalancerQuery
	withFKs          bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PanierLoadBalancerQuery builder.
func (plbq *PanierLoadBalancerQuery) Where(ps ...predicate.PanierLoadBalancer) *PanierLoadBalancerQuery {
	plbq.predicates = append(plbq.predicates, ps...)
	return plbq
}

// Limit the number of records to be returned by this query.
func (plbq *PanierLoadBalancerQuery) Limit(limit int) *PanierLoadBalancerQuery {
	plbq.ctx.Limit = &limit
	return plbq
}

// Offset to start from.
func (plbq *PanierLoadBalancerQuery) Offset(offset int) *PanierLoadBalancerQuery {
	plbq.ctx.Offset = &offset
	return plbq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (plbq *PanierLoadBalancerQuery) Unique(unique bool) *PanierLoadBalancerQuery {
	plbq.ctx.Unique = &unique
	return plbq
}

// Order specifies how the records should be ordered.
func (plbq *PanierLoadBalancerQuery) Order(o ...panierloadbalancer.OrderOption) *PanierLoadBalancerQuery {
	plbq.order = append(plbq.order, o...)
	return plbq
}

// QueryPanier chains the current query on the "panier" edge.
func (plbq *PanierLoadBalancerQuery) QueryPanier() *PanierQuery {
	query := (&PanierClient{config: plbq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := plbq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := plbq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(panierloadbalancer.Table, panierloadbalancer.FieldID, selector),
			sqlgraph.To(panier.Table, panier.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, panierloadbalancer.PanierTable, panierloadbalancer.PanierColumn),
		)
		fromU = sqlgraph.SetNeighbors(plbq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLoadBalancer chains the current query on the "loadBalancer" edge.
func (plbq *PanierLoadBalancerQuery) QueryLoadBalancer() *LoadBalancerQuery {
	query := (&LoadBalancerClient{config: plbq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := plbq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := plbq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(panierloadbalancer.Table, panierloadbalancer.FieldID, selector),
			sqlgraph.To(loadbalancer.Table, loadbalancer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, panierloadbalancer.LoadBalancerTable, panierloadbalancer.LoadBalancerColumn),
		)
		fromU = sqlgraph.SetNeighbors(plbq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first PanierLoadBalancer entity from the query.
// Returns a *NotFoundError when no PanierLoadBalancer was found.
func (plbq *PanierLoadBalancerQuery) First(ctx context.Context) (*PanierLoadBalancer, error) {
	nodes, err := plbq.Limit(1).All(setContextOp(ctx, plbq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{panierloadbalancer.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (plbq *PanierLoadBalancerQuery) FirstX(ctx context.Context) *PanierLoadBalancer {
	node, err := plbq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PanierLoadBalancer ID from the query.
// Returns a *NotFoundError when no PanierLoadBalancer ID was found.
func (plbq *PanierLoadBalancerQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = plbq.Limit(1).IDs(setContextOp(ctx, plbq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{panierloadbalancer.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (plbq *PanierLoadBalancerQuery) FirstIDX(ctx context.Context) int {
	id, err := plbq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PanierLoadBalancer entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one PanierLoadBalancer entity is found.
// Returns a *NotFoundError when no PanierLoadBalancer entities are found.
func (plbq *PanierLoadBalancerQuery) Only(ctx context.Context) (*PanierLoadBalancer, error) {
	nodes, err := plbq.Limit(2).All(setContextOp(ctx, plbq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{panierloadbalancer.Label}
	default:
		return nil, &NotSingularError{panierloadbalancer.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (plbq *PanierLoadBalancerQuery) OnlyX(ctx context.Context) *PanierLoadBalancer {
	node, err := plbq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PanierLoadBalancer ID in the query.
// Returns a *NotSingularError when more than one PanierLoadBalancer ID is found.
// Returns a *NotFoundError when no entities are found.
func (plbq *PanierLoadBalancerQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = plbq.Limit(2).IDs(setContextOp(ctx, plbq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{panierloadbalancer.Label}
	default:
		err = &NotSingularError{panierloadbalancer.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (plbq *PanierLoadBalancerQuery) OnlyIDX(ctx context.Context) int {
	id, err := plbq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PanierLoadBalancers.
func (plbq *PanierLoadBalancerQuery) All(ctx context.Context) ([]*PanierLoadBalancer, error) {
	ctx = setContextOp(ctx, plbq.ctx, "All")
	if err := plbq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*PanierLoadBalancer, *PanierLoadBalancerQuery]()
	return withInterceptors[[]*PanierLoadBalancer](ctx, plbq, qr, plbq.inters)
}

// AllX is like All, but panics if an error occurs.
func (plbq *PanierLoadBalancerQuery) AllX(ctx context.Context) []*PanierLoadBalancer {
	nodes, err := plbq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PanierLoadBalancer IDs.
func (plbq *PanierLoadBalancerQuery) IDs(ctx context.Context) (ids []int, err error) {
	if plbq.ctx.Unique == nil && plbq.path != nil {
		plbq.Unique(true)
	}
	ctx = setContextOp(ctx, plbq.ctx, "IDs")
	if err = plbq.Select(panierloadbalancer.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (plbq *PanierLoadBalancerQuery) IDsX(ctx context.Context) []int {
	ids, err := plbq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (plbq *PanierLoadBalancerQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, plbq.ctx, "Count")
	if err := plbq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, plbq, querierCount[*PanierLoadBalancerQuery](), plbq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (plbq *PanierLoadBalancerQuery) CountX(ctx context.Context) int {
	count, err := plbq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (plbq *PanierLoadBalancerQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, plbq.ctx, "Exist")
	switch _, err := plbq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (plbq *PanierLoadBalancerQuery) ExistX(ctx context.Context) bool {
	exist, err := plbq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PanierLoadBalancerQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (plbq *PanierLoadBalancerQuery) Clone() *PanierLoadBalancerQuery {
	if plbq == nil {
		return nil
	}
	return &PanierLoadBalancerQuery{
		config:           plbq.config,
		ctx:              plbq.ctx.Clone(),
		order:            append([]panierloadbalancer.OrderOption{}, plbq.order...),
		inters:           append([]Interceptor{}, plbq.inters...),
		predicates:       append([]predicate.PanierLoadBalancer{}, plbq.predicates...),
		withPanier:       plbq.withPanier.Clone(),
		withLoadBalancer: plbq.withLoadBalancer.Clone(),
		// clone intermediate query.
		sql:  plbq.sql.Clone(),
		path: plbq.path,
	}
}

// WithPanier tells the query-builder to eager-load the nodes that are connected to
// the "panier" edge. The optional arguments are used to configure the query builder of the edge.
func (plbq *PanierLoadBalancerQuery) WithPanier(opts ...func(*PanierQuery)) *PanierLoadBalancerQuery {
	query := (&PanierClient{config: plbq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	plbq.withPanier = query
	return plbq
}

// WithLoadBalancer tells the query-builder to eager-load the nodes that are connected to
// the "loadBalancer" edge. The optional arguments are used to configure the query builder of the edge.
func (plbq *PanierLoadBalancerQuery) WithLoadBalancer(opts ...func(*LoadBalancerQuery)) *PanierLoadBalancerQuery {
	query := (&LoadBalancerClient{config: plbq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	plbq.withLoadBalancer = query
	return plbq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Quantity int `json:"quantity,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PanierLoadBalancer.Query().
//		GroupBy(panierloadbalancer.FieldQuantity).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (plbq *PanierLoadBalancerQuery) GroupBy(field string, fields ...string) *PanierLoadBalancerGroupBy {
	plbq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PanierLoadBalancerGroupBy{build: plbq}
	grbuild.flds = &plbq.ctx.Fields
	grbuild.label = panierloadbalancer.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Quantity int `json:"quantity,omitempty"`
//	}
//
//	client.PanierLoadBalancer.Query().
//		Select(panierloadbalancer.FieldQuantity).
//		Scan(ctx, &v)
func (plbq *PanierLoadBalancerQuery) Select(fields ...string) *PanierLoadBalancerSelect {
	plbq.ctx.Fields = append(plbq.ctx.Fields, fields...)
	sbuild := &PanierLoadBalancerSelect{PanierLoadBalancerQuery: plbq}
	sbuild.label = panierloadbalancer.Label
	sbuild.flds, sbuild.scan = &plbq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PanierLoadBalancerSelect configured with the given aggregations.
func (plbq *PanierLoadBalancerQuery) Aggregate(fns ...AggregateFunc) *PanierLoadBalancerSelect {
	return plbq.Select().Aggregate(fns...)
}

func (plbq *PanierLoadBalancerQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range plbq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, plbq); err != nil {
				return err
			}
		}
	}
	for _, f := range plbq.ctx.Fields {
		if !panierloadbalancer.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if plbq.path != nil {
		prev, err := plbq.path(ctx)
		if err != nil {
			return err
		}
		plbq.sql = prev
	}
	return nil
}

func (plbq *PanierLoadBalancerQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*PanierLoadBalancer, error) {
	var (
		nodes       = []*PanierLoadBalancer{}
		withFKs     = plbq.withFKs
		_spec       = plbq.querySpec()
		loadedTypes = [2]bool{
			plbq.withPanier != nil,
			plbq.withLoadBalancer != nil,
		}
	)
	if plbq.withPanier != nil || plbq.withLoadBalancer != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, panierloadbalancer.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*PanierLoadBalancer).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &PanierLoadBalancer{config: plbq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, plbq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := plbq.withPanier; query != nil {
		if err := plbq.loadPanier(ctx, query, nodes, nil,
			func(n *PanierLoadBalancer, e *Panier) { n.Edges.Panier = e }); err != nil {
			return nil, err
		}
	}
	if query := plbq.withLoadBalancer; query != nil {
		if err := plbq.loadLoadBalancer(ctx, query, nodes, nil,
			func(n *PanierLoadBalancer, e *LoadBalancer) { n.Edges.LoadBalancer = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (plbq *PanierLoadBalancerQuery) loadPanier(ctx context.Context, query *PanierQuery, nodes []*PanierLoadBalancer, init func(*PanierLoadBalancer), assign func(*PanierLoadBalancer, *Panier)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*PanierLoadBalancer)
	for i := range nodes {
		if nodes[i].panier_panier_load_balancer == nil {
			continue
		}
		fk := *nodes[i].panier_panier_load_balancer
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(panier.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "panier_panier_load_balancer" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (plbq *PanierLoadBalancerQuery) loadLoadBalancer(ctx context.Context, query *LoadBalancerQuery, nodes []*PanierLoadBalancer, init func(*PanierLoadBalancer), assign func(*PanierLoadBalancer, *LoadBalancer)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*PanierLoadBalancer)
	for i := range nodes {
		if nodes[i].loadBalancer_id == nil {
			continue
		}
		fk := *nodes[i].loadBalancer_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(loadbalancer.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "loadBalancer_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (plbq *PanierLoadBalancerQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := plbq.querySpec()
	_spec.Node.Columns = plbq.ctx.Fields
	if len(plbq.ctx.Fields) > 0 {
		_spec.Unique = plbq.ctx.Unique != nil && *plbq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, plbq.driver, _spec)
}

func (plbq *PanierLoadBalancerQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(panierloadbalancer.Table, panierloadbalancer.Columns, sqlgraph.NewFieldSpec(panierloadbalancer.FieldID, field.TypeInt))
	_spec.From = plbq.sql
	if unique := plbq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if plbq.path != nil {
		_spec.Unique = true
	}
	if fields := plbq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, panierloadbalancer.FieldID)
		for i := range fields {
			if fields[i] != panierloadbalancer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := plbq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := plbq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := plbq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := plbq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (plbq *PanierLoadBalancerQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(plbq.driver.Dialect())
	t1 := builder.Table(panierloadbalancer.Table)
	columns := plbq.ctx.Fields
	if len(columns) == 0 {
		columns = panierloadbalancer.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if plbq.sql != nil {
		selector = plbq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if plbq.ctx.Unique != nil && *plbq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range plbq.predicates {
		p(selector)
	}
	for _, p := range plbq.order {
		p(selector)
	}
	if offset := plbq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := plbq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// PanierLoadBalancerGroupBy is the group-by builder for PanierLoadBalancer entities.
type PanierLoadBalancerGroupBy struct {
	selector
	build *PanierLoadBalancerQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (plbgb *PanierLoadBalancerGroupBy) Aggregate(fns ...AggregateFunc) *PanierLoadBalancerGroupBy {
	plbgb.fns = append(plbgb.fns, fns...)
	return plbgb
}

// Scan applies the selector query and scans the result into the given value.
func (plbgb *PanierLoadBalancerGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, plbgb.build.ctx, "GroupBy")
	if err := plbgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PanierLoadBalancerQuery, *PanierLoadBalancerGroupBy](ctx, plbgb.build, plbgb, plbgb.build.inters, v)
}

func (plbgb *PanierLoadBalancerGroupBy) sqlScan(ctx context.Context, root *PanierLoadBalancerQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(plbgb.fns))
	for _, fn := range plbgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*plbgb.flds)+len(plbgb.fns))
		for _, f := range *plbgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*plbgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := plbgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PanierLoadBalancerSelect is the builder for selecting fields of PanierLoadBalancer entities.
type PanierLoadBalancerSelect struct {
	*PanierLoadBalancerQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (plbs *PanierLoadBalancerSelect) Aggregate(fns ...AggregateFunc) *PanierLoadBalancerSelect {
	plbs.fns = append(plbs.fns, fns...)
	return plbs
}

// Scan applies the selector query and scans the result into the given value.
func (plbs *PanierLoadBalancerSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, plbs.ctx, "Select")
	if err := plbs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PanierLoadBalancerQuery, *PanierLoadBalancerSelect](ctx, plbs.PanierLoadBalancerQuery, plbs, plbs.inters, v)
}

func (plbs *PanierLoadBalancerSelect) sqlScan(ctx context.Context, root *PanierLoadBalancerQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(plbs.fns))
	for _, fn := range plbs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*plbs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := plbs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
