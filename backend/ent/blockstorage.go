// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/blockstorage"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// BlockStorage is the model entity for the BlockStorage schema.
type BlockStorage struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "Name" field.
	Name string `json:"Name,omitempty"`
	// IOPS holds the value of the "IOPS" field.
	IOPS int `json:"IOPS,omitempty"`
	// Bandwidth holds the value of the "Bandwidth" field.
	Bandwidth float64 `json:"Bandwidth,omitempty"`
	// Price holds the value of the "Price" field.
	Price float64 `json:"Price,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BlockStorageQuery when eager-loading is set.
	Edges        BlockStorageEdges `json:"edges"`
	selectValues sql.SelectValues
}

// BlockStorageEdges holds the relations/edges for other nodes in the graph.
type BlockStorageEdges struct {
	// PanierBlockStorage holds the value of the panierBlockStorage edge.
	PanierBlockStorage []*PanierBlockStorage `json:"panierBlockStorage,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PanierBlockStorageOrErr returns the PanierBlockStorage value or an error if the edge
// was not loaded in eager-loading.
func (e BlockStorageEdges) PanierBlockStorageOrErr() ([]*PanierBlockStorage, error) {
	if e.loadedTypes[0] {
		return e.PanierBlockStorage, nil
	}
	return nil, &NotLoadedError{edge: "panierBlockStorage"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BlockStorage) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case blockstorage.FieldBandwidth, blockstorage.FieldPrice:
			values[i] = new(sql.NullFloat64)
		case blockstorage.FieldID, blockstorage.FieldIOPS:
			values[i] = new(sql.NullInt64)
		case blockstorage.FieldName:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BlockStorage fields.
func (bs *BlockStorage) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case blockstorage.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			bs.ID = int(value.Int64)
		case blockstorage.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Name", values[i])
			} else if value.Valid {
				bs.Name = value.String
			}
		case blockstorage.FieldIOPS:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field IOPS", values[i])
			} else if value.Valid {
				bs.IOPS = int(value.Int64)
			}
		case blockstorage.FieldBandwidth:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field Bandwidth", values[i])
			} else if value.Valid {
				bs.Bandwidth = value.Float64
			}
		case blockstorage.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field Price", values[i])
			} else if value.Valid {
				bs.Price = value.Float64
			}
		default:
			bs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BlockStorage.
// This includes values selected through modifiers, order, etc.
func (bs *BlockStorage) Value(name string) (ent.Value, error) {
	return bs.selectValues.Get(name)
}

// QueryPanierBlockStorage queries the "panierBlockStorage" edge of the BlockStorage entity.
func (bs *BlockStorage) QueryPanierBlockStorage() *PanierBlockStorageQuery {
	return NewBlockStorageClient(bs.config).QueryPanierBlockStorage(bs)
}

// Update returns a builder for updating this BlockStorage.
// Note that you need to call BlockStorage.Unwrap() before calling this method if this BlockStorage
// was returned from a transaction, and the transaction was committed or rolled back.
func (bs *BlockStorage) Update() *BlockStorageUpdateOne {
	return NewBlockStorageClient(bs.config).UpdateOne(bs)
}

// Unwrap unwraps the BlockStorage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bs *BlockStorage) Unwrap() *BlockStorage {
	_tx, ok := bs.config.driver.(*txDriver)
	if !ok {
		panic("ent: BlockStorage is not a transactional entity")
	}
	bs.config.driver = _tx.drv
	return bs
}

// String implements the fmt.Stringer.
func (bs *BlockStorage) String() string {
	var builder strings.Builder
	builder.WriteString("BlockStorage(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bs.ID))
	builder.WriteString("Name=")
	builder.WriteString(bs.Name)
	builder.WriteString(", ")
	builder.WriteString("IOPS=")
	builder.WriteString(fmt.Sprintf("%v", bs.IOPS))
	builder.WriteString(", ")
	builder.WriteString("Bandwidth=")
	builder.WriteString(fmt.Sprintf("%v", bs.Bandwidth))
	builder.WriteString(", ")
	builder.WriteString("Price=")
	builder.WriteString(fmt.Sprintf("%v", bs.Price))
	builder.WriteByte(')')
	return builder.String()
}

// BlockStorages is a parsable slice of BlockStorage.
type BlockStorages []*BlockStorage
