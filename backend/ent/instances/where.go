// Code generated by ent, DO NOT EDIT.

package instances

import (
	"backend/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Instances {
	return predicate.Instances(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Instances {
	return predicate.Instances(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Instances {
	return predicate.Instances(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Instances {
	return predicate.Instances(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Instances {
	return predicate.Instances(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Instances {
	return predicate.Instances(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Instances {
	return predicate.Instances(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Instances {
	return predicate.Instances(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Instances {
	return predicate.Instances(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "Name" field. It's identical to NameEQ.
func Name(v string) predicate.Instances {
	return predicate.Instances(sql.FieldEQ(FieldName, v))
}

// CPU applies equality check predicate on the "CPU" field. It's identical to CPUEQ.
func CPU(v int) predicate.Instances {
	return predicate.Instances(sql.FieldEQ(FieldCPU, v))
}

// RAMGo applies equality check predicate on the "Ram_Go" field. It's identical to RAMGoEQ.
func RAMGo(v int) predicate.Instances {
	return predicate.Instances(sql.FieldEQ(FieldRAMGo, v))
}

// StockageGo applies equality check predicate on the "Stockage_Go" field. It's identical to StockageGoEQ.
func StockageGo(v int) predicate.Instances {
	return predicate.Instances(sql.FieldEQ(FieldStockageGo, v))
}

// GPU applies equality check predicate on the "GPU" field. It's identical to GPUEQ.
func GPU(v string) predicate.Instances {
	return predicate.Instances(sql.FieldEQ(FieldGPU, v))
}

// Type applies equality check predicate on the "Type" field. It's identical to TypeEQ.
func Type(v string) predicate.Instances {
	return predicate.Instances(sql.FieldEQ(FieldType, v))
}

// Price applies equality check predicate on the "Price" field. It's identical to PriceEQ.
func Price(v float64) predicate.Instances {
	return predicate.Instances(sql.FieldEQ(FieldPrice, v))
}

// NameEQ applies the EQ predicate on the "Name" field.
func NameEQ(v string) predicate.Instances {
	return predicate.Instances(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "Name" field.
func NameNEQ(v string) predicate.Instances {
	return predicate.Instances(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "Name" field.
func NameIn(vs ...string) predicate.Instances {
	return predicate.Instances(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "Name" field.
func NameNotIn(vs ...string) predicate.Instances {
	return predicate.Instances(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "Name" field.
func NameGT(v string) predicate.Instances {
	return predicate.Instances(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "Name" field.
func NameGTE(v string) predicate.Instances {
	return predicate.Instances(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "Name" field.
func NameLT(v string) predicate.Instances {
	return predicate.Instances(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "Name" field.
func NameLTE(v string) predicate.Instances {
	return predicate.Instances(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "Name" field.
func NameContains(v string) predicate.Instances {
	return predicate.Instances(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "Name" field.
func NameHasPrefix(v string) predicate.Instances {
	return predicate.Instances(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "Name" field.
func NameHasSuffix(v string) predicate.Instances {
	return predicate.Instances(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "Name" field.
func NameEqualFold(v string) predicate.Instances {
	return predicate.Instances(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "Name" field.
func NameContainsFold(v string) predicate.Instances {
	return predicate.Instances(sql.FieldContainsFold(FieldName, v))
}

// CPUEQ applies the EQ predicate on the "CPU" field.
func CPUEQ(v int) predicate.Instances {
	return predicate.Instances(sql.FieldEQ(FieldCPU, v))
}

// CPUNEQ applies the NEQ predicate on the "CPU" field.
func CPUNEQ(v int) predicate.Instances {
	return predicate.Instances(sql.FieldNEQ(FieldCPU, v))
}

// CPUIn applies the In predicate on the "CPU" field.
func CPUIn(vs ...int) predicate.Instances {
	return predicate.Instances(sql.FieldIn(FieldCPU, vs...))
}

// CPUNotIn applies the NotIn predicate on the "CPU" field.
func CPUNotIn(vs ...int) predicate.Instances {
	return predicate.Instances(sql.FieldNotIn(FieldCPU, vs...))
}

// CPUGT applies the GT predicate on the "CPU" field.
func CPUGT(v int) predicate.Instances {
	return predicate.Instances(sql.FieldGT(FieldCPU, v))
}

// CPUGTE applies the GTE predicate on the "CPU" field.
func CPUGTE(v int) predicate.Instances {
	return predicate.Instances(sql.FieldGTE(FieldCPU, v))
}

// CPULT applies the LT predicate on the "CPU" field.
func CPULT(v int) predicate.Instances {
	return predicate.Instances(sql.FieldLT(FieldCPU, v))
}

// CPULTE applies the LTE predicate on the "CPU" field.
func CPULTE(v int) predicate.Instances {
	return predicate.Instances(sql.FieldLTE(FieldCPU, v))
}

// RAMGoEQ applies the EQ predicate on the "Ram_Go" field.
func RAMGoEQ(v int) predicate.Instances {
	return predicate.Instances(sql.FieldEQ(FieldRAMGo, v))
}

// RAMGoNEQ applies the NEQ predicate on the "Ram_Go" field.
func RAMGoNEQ(v int) predicate.Instances {
	return predicate.Instances(sql.FieldNEQ(FieldRAMGo, v))
}

// RAMGoIn applies the In predicate on the "Ram_Go" field.
func RAMGoIn(vs ...int) predicate.Instances {
	return predicate.Instances(sql.FieldIn(FieldRAMGo, vs...))
}

// RAMGoNotIn applies the NotIn predicate on the "Ram_Go" field.
func RAMGoNotIn(vs ...int) predicate.Instances {
	return predicate.Instances(sql.FieldNotIn(FieldRAMGo, vs...))
}

// RAMGoGT applies the GT predicate on the "Ram_Go" field.
func RAMGoGT(v int) predicate.Instances {
	return predicate.Instances(sql.FieldGT(FieldRAMGo, v))
}

// RAMGoGTE applies the GTE predicate on the "Ram_Go" field.
func RAMGoGTE(v int) predicate.Instances {
	return predicate.Instances(sql.FieldGTE(FieldRAMGo, v))
}

// RAMGoLT applies the LT predicate on the "Ram_Go" field.
func RAMGoLT(v int) predicate.Instances {
	return predicate.Instances(sql.FieldLT(FieldRAMGo, v))
}

// RAMGoLTE applies the LTE predicate on the "Ram_Go" field.
func RAMGoLTE(v int) predicate.Instances {
	return predicate.Instances(sql.FieldLTE(FieldRAMGo, v))
}

// StockageGoEQ applies the EQ predicate on the "Stockage_Go" field.
func StockageGoEQ(v int) predicate.Instances {
	return predicate.Instances(sql.FieldEQ(FieldStockageGo, v))
}

// StockageGoNEQ applies the NEQ predicate on the "Stockage_Go" field.
func StockageGoNEQ(v int) predicate.Instances {
	return predicate.Instances(sql.FieldNEQ(FieldStockageGo, v))
}

// StockageGoIn applies the In predicate on the "Stockage_Go" field.
func StockageGoIn(vs ...int) predicate.Instances {
	return predicate.Instances(sql.FieldIn(FieldStockageGo, vs...))
}

// StockageGoNotIn applies the NotIn predicate on the "Stockage_Go" field.
func StockageGoNotIn(vs ...int) predicate.Instances {
	return predicate.Instances(sql.FieldNotIn(FieldStockageGo, vs...))
}

// StockageGoGT applies the GT predicate on the "Stockage_Go" field.
func StockageGoGT(v int) predicate.Instances {
	return predicate.Instances(sql.FieldGT(FieldStockageGo, v))
}

// StockageGoGTE applies the GTE predicate on the "Stockage_Go" field.
func StockageGoGTE(v int) predicate.Instances {
	return predicate.Instances(sql.FieldGTE(FieldStockageGo, v))
}

// StockageGoLT applies the LT predicate on the "Stockage_Go" field.
func StockageGoLT(v int) predicate.Instances {
	return predicate.Instances(sql.FieldLT(FieldStockageGo, v))
}

// StockageGoLTE applies the LTE predicate on the "Stockage_Go" field.
func StockageGoLTE(v int) predicate.Instances {
	return predicate.Instances(sql.FieldLTE(FieldStockageGo, v))
}

// GPUEQ applies the EQ predicate on the "GPU" field.
func GPUEQ(v string) predicate.Instances {
	return predicate.Instances(sql.FieldEQ(FieldGPU, v))
}

// GPUNEQ applies the NEQ predicate on the "GPU" field.
func GPUNEQ(v string) predicate.Instances {
	return predicate.Instances(sql.FieldNEQ(FieldGPU, v))
}

// GPUIn applies the In predicate on the "GPU" field.
func GPUIn(vs ...string) predicate.Instances {
	return predicate.Instances(sql.FieldIn(FieldGPU, vs...))
}

// GPUNotIn applies the NotIn predicate on the "GPU" field.
func GPUNotIn(vs ...string) predicate.Instances {
	return predicate.Instances(sql.FieldNotIn(FieldGPU, vs...))
}

// GPUGT applies the GT predicate on the "GPU" field.
func GPUGT(v string) predicate.Instances {
	return predicate.Instances(sql.FieldGT(FieldGPU, v))
}

// GPUGTE applies the GTE predicate on the "GPU" field.
func GPUGTE(v string) predicate.Instances {
	return predicate.Instances(sql.FieldGTE(FieldGPU, v))
}

// GPULT applies the LT predicate on the "GPU" field.
func GPULT(v string) predicate.Instances {
	return predicate.Instances(sql.FieldLT(FieldGPU, v))
}

// GPULTE applies the LTE predicate on the "GPU" field.
func GPULTE(v string) predicate.Instances {
	return predicate.Instances(sql.FieldLTE(FieldGPU, v))
}

// GPUContains applies the Contains predicate on the "GPU" field.
func GPUContains(v string) predicate.Instances {
	return predicate.Instances(sql.FieldContains(FieldGPU, v))
}

// GPUHasPrefix applies the HasPrefix predicate on the "GPU" field.
func GPUHasPrefix(v string) predicate.Instances {
	return predicate.Instances(sql.FieldHasPrefix(FieldGPU, v))
}

// GPUHasSuffix applies the HasSuffix predicate on the "GPU" field.
func GPUHasSuffix(v string) predicate.Instances {
	return predicate.Instances(sql.FieldHasSuffix(FieldGPU, v))
}

// GPUEqualFold applies the EqualFold predicate on the "GPU" field.
func GPUEqualFold(v string) predicate.Instances {
	return predicate.Instances(sql.FieldEqualFold(FieldGPU, v))
}

// GPUContainsFold applies the ContainsFold predicate on the "GPU" field.
func GPUContainsFold(v string) predicate.Instances {
	return predicate.Instances(sql.FieldContainsFold(FieldGPU, v))
}

// TypeEQ applies the EQ predicate on the "Type" field.
func TypeEQ(v string) predicate.Instances {
	return predicate.Instances(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "Type" field.
func TypeNEQ(v string) predicate.Instances {
	return predicate.Instances(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "Type" field.
func TypeIn(vs ...string) predicate.Instances {
	return predicate.Instances(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "Type" field.
func TypeNotIn(vs ...string) predicate.Instances {
	return predicate.Instances(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "Type" field.
func TypeGT(v string) predicate.Instances {
	return predicate.Instances(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "Type" field.
func TypeGTE(v string) predicate.Instances {
	return predicate.Instances(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "Type" field.
func TypeLT(v string) predicate.Instances {
	return predicate.Instances(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "Type" field.
func TypeLTE(v string) predicate.Instances {
	return predicate.Instances(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "Type" field.
func TypeContains(v string) predicate.Instances {
	return predicate.Instances(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "Type" field.
func TypeHasPrefix(v string) predicate.Instances {
	return predicate.Instances(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "Type" field.
func TypeHasSuffix(v string) predicate.Instances {
	return predicate.Instances(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "Type" field.
func TypeEqualFold(v string) predicate.Instances {
	return predicate.Instances(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "Type" field.
func TypeContainsFold(v string) predicate.Instances {
	return predicate.Instances(sql.FieldContainsFold(FieldType, v))
}

// PriceEQ applies the EQ predicate on the "Price" field.
func PriceEQ(v float64) predicate.Instances {
	return predicate.Instances(sql.FieldEQ(FieldPrice, v))
}

// PriceNEQ applies the NEQ predicate on the "Price" field.
func PriceNEQ(v float64) predicate.Instances {
	return predicate.Instances(sql.FieldNEQ(FieldPrice, v))
}

// PriceIn applies the In predicate on the "Price" field.
func PriceIn(vs ...float64) predicate.Instances {
	return predicate.Instances(sql.FieldIn(FieldPrice, vs...))
}

// PriceNotIn applies the NotIn predicate on the "Price" field.
func PriceNotIn(vs ...float64) predicate.Instances {
	return predicate.Instances(sql.FieldNotIn(FieldPrice, vs...))
}

// PriceGT applies the GT predicate on the "Price" field.
func PriceGT(v float64) predicate.Instances {
	return predicate.Instances(sql.FieldGT(FieldPrice, v))
}

// PriceGTE applies the GTE predicate on the "Price" field.
func PriceGTE(v float64) predicate.Instances {
	return predicate.Instances(sql.FieldGTE(FieldPrice, v))
}

// PriceLT applies the LT predicate on the "Price" field.
func PriceLT(v float64) predicate.Instances {
	return predicate.Instances(sql.FieldLT(FieldPrice, v))
}

// PriceLTE applies the LTE predicate on the "Price" field.
func PriceLTE(v float64) predicate.Instances {
	return predicate.Instances(sql.FieldLTE(FieldPrice, v))
}

// HasPanierInstances applies the HasEdge predicate on the "panierInstances" edge.
func HasPanierInstances() predicate.Instances {
	return predicate.Instances(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PanierInstancesTable, PanierInstancesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPanierInstancesWith applies the HasEdge predicate on the "panierInstances" edge with a given conditions (other predicates).
func HasPanierInstancesWith(preds ...predicate.PanierInstances) predicate.Instances {
	return predicate.Instances(func(s *sql.Selector) {
		step := newPanierInstancesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Instances) predicate.Instances {
	return predicate.Instances(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Instances) predicate.Instances {
	return predicate.Instances(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Instances) predicate.Instances {
	return predicate.Instances(func(s *sql.Selector) {
		p(s.Not())
	})
}
