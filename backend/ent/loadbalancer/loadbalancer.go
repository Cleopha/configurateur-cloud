// Code generated by ent, DO NOT EDIT.

package loadbalancer

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the loadbalancer type in the database.
	Label = "load_balancer"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// EdgePanierLoadBalancer holds the string denoting the panierloadbalancer edge name in mutations.
	EdgePanierLoadBalancer = "panierLoadBalancer"
	// Table holds the table name of the loadbalancer in the database.
	Table = "load_balancers"
	// PanierLoadBalancerTable is the table that holds the panierLoadBalancer relation/edge.
	PanierLoadBalancerTable = "panier_load_balancers"
	// PanierLoadBalancerInverseTable is the table name for the PanierLoadBalancer entity.
	// It exists in this package in order to avoid circular dependency with the "panierloadbalancer" package.
	PanierLoadBalancerInverseTable = "panier_load_balancers"
	// PanierLoadBalancerColumn is the table column denoting the panierLoadBalancer relation/edge.
	PanierLoadBalancerColumn = "loadBalancer_id"
)

// Columns holds all SQL columns for loadbalancer fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldPrice,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the LoadBalancer queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the Name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByPrice orders the results by the Price field.
func ByPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrice, opts...).ToFunc()
}

// ByPanierLoadBalancerCount orders the results by panierLoadBalancer count.
func ByPanierLoadBalancerCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPanierLoadBalancerStep(), opts...)
	}
}

// ByPanierLoadBalancer orders the results by panierLoadBalancer terms.
func ByPanierLoadBalancer(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPanierLoadBalancerStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPanierLoadBalancerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PanierLoadBalancerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PanierLoadBalancerTable, PanierLoadBalancerColumn),
	)
}
