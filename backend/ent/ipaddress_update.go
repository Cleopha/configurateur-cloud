// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/ipaddress"
	"backend/ent/panieripaddress"
	"backend/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// IPAddressUpdate is the builder for updating IPAddress entities.
type IPAddressUpdate struct {
	config
	hooks    []Hook
	mutation *IPAddressMutation
}

// Where appends a list predicates to the IPAddressUpdate builder.
func (iau *IPAddressUpdate) Where(ps ...predicate.IPAddress) *IPAddressUpdate {
	iau.mutation.Where(ps...)
	return iau
}

// SetName sets the "Name" field.
func (iau *IPAddressUpdate) SetName(s string) *IPAddressUpdate {
	iau.mutation.SetName(s)
	return iau
}

// SetPrice sets the "Price" field.
func (iau *IPAddressUpdate) SetPrice(f float64) *IPAddressUpdate {
	iau.mutation.ResetPrice()
	iau.mutation.SetPrice(f)
	return iau
}

// AddPrice adds f to the "Price" field.
func (iau *IPAddressUpdate) AddPrice(f float64) *IPAddressUpdate {
	iau.mutation.AddPrice(f)
	return iau
}

// AddPanierIPAddresIDs adds the "panierIPAddress" edge to the PanierIPAddress entity by IDs.
func (iau *IPAddressUpdate) AddPanierIPAddresIDs(ids ...int) *IPAddressUpdate {
	iau.mutation.AddPanierIPAddresIDs(ids...)
	return iau
}

// AddPanierIPAddress adds the "panierIPAddress" edges to the PanierIPAddress entity.
func (iau *IPAddressUpdate) AddPanierIPAddress(p ...*PanierIPAddress) *IPAddressUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return iau.AddPanierIPAddresIDs(ids...)
}

// Mutation returns the IPAddressMutation object of the builder.
func (iau *IPAddressUpdate) Mutation() *IPAddressMutation {
	return iau.mutation
}

// ClearPanierIPAddress clears all "panierIPAddress" edges to the PanierIPAddress entity.
func (iau *IPAddressUpdate) ClearPanierIPAddress() *IPAddressUpdate {
	iau.mutation.ClearPanierIPAddress()
	return iau
}

// RemovePanierIPAddresIDs removes the "panierIPAddress" edge to PanierIPAddress entities by IDs.
func (iau *IPAddressUpdate) RemovePanierIPAddresIDs(ids ...int) *IPAddressUpdate {
	iau.mutation.RemovePanierIPAddresIDs(ids...)
	return iau
}

// RemovePanierIPAddress removes "panierIPAddress" edges to PanierIPAddress entities.
func (iau *IPAddressUpdate) RemovePanierIPAddress(p ...*PanierIPAddress) *IPAddressUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return iau.RemovePanierIPAddresIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iau *IPAddressUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, iau.sqlSave, iau.mutation, iau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iau *IPAddressUpdate) SaveX(ctx context.Context) int {
	affected, err := iau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iau *IPAddressUpdate) Exec(ctx context.Context) error {
	_, err := iau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iau *IPAddressUpdate) ExecX(ctx context.Context) {
	if err := iau.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iau *IPAddressUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(ipaddress.Table, ipaddress.Columns, sqlgraph.NewFieldSpec(ipaddress.FieldID, field.TypeInt))
	if ps := iau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iau.mutation.Name(); ok {
		_spec.SetField(ipaddress.FieldName, field.TypeString, value)
	}
	if value, ok := iau.mutation.Price(); ok {
		_spec.SetField(ipaddress.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := iau.mutation.AddedPrice(); ok {
		_spec.AddField(ipaddress.FieldPrice, field.TypeFloat64, value)
	}
	if iau.mutation.PanierIPAddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ipaddress.PanierIPAddressTable,
			Columns: []string{ipaddress.PanierIPAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panieripaddress.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iau.mutation.RemovedPanierIPAddressIDs(); len(nodes) > 0 && !iau.mutation.PanierIPAddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ipaddress.PanierIPAddressTable,
			Columns: []string{ipaddress.PanierIPAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panieripaddress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iau.mutation.PanierIPAddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ipaddress.PanierIPAddressTable,
			Columns: []string{ipaddress.PanierIPAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panieripaddress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ipaddress.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iau.mutation.done = true
	return n, nil
}

// IPAddressUpdateOne is the builder for updating a single IPAddress entity.
type IPAddressUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IPAddressMutation
}

// SetName sets the "Name" field.
func (iauo *IPAddressUpdateOne) SetName(s string) *IPAddressUpdateOne {
	iauo.mutation.SetName(s)
	return iauo
}

// SetPrice sets the "Price" field.
func (iauo *IPAddressUpdateOne) SetPrice(f float64) *IPAddressUpdateOne {
	iauo.mutation.ResetPrice()
	iauo.mutation.SetPrice(f)
	return iauo
}

// AddPrice adds f to the "Price" field.
func (iauo *IPAddressUpdateOne) AddPrice(f float64) *IPAddressUpdateOne {
	iauo.mutation.AddPrice(f)
	return iauo
}

// AddPanierIPAddresIDs adds the "panierIPAddress" edge to the PanierIPAddress entity by IDs.
func (iauo *IPAddressUpdateOne) AddPanierIPAddresIDs(ids ...int) *IPAddressUpdateOne {
	iauo.mutation.AddPanierIPAddresIDs(ids...)
	return iauo
}

// AddPanierIPAddress adds the "panierIPAddress" edges to the PanierIPAddress entity.
func (iauo *IPAddressUpdateOne) AddPanierIPAddress(p ...*PanierIPAddress) *IPAddressUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return iauo.AddPanierIPAddresIDs(ids...)
}

// Mutation returns the IPAddressMutation object of the builder.
func (iauo *IPAddressUpdateOne) Mutation() *IPAddressMutation {
	return iauo.mutation
}

// ClearPanierIPAddress clears all "panierIPAddress" edges to the PanierIPAddress entity.
func (iauo *IPAddressUpdateOne) ClearPanierIPAddress() *IPAddressUpdateOne {
	iauo.mutation.ClearPanierIPAddress()
	return iauo
}

// RemovePanierIPAddresIDs removes the "panierIPAddress" edge to PanierIPAddress entities by IDs.
func (iauo *IPAddressUpdateOne) RemovePanierIPAddresIDs(ids ...int) *IPAddressUpdateOne {
	iauo.mutation.RemovePanierIPAddresIDs(ids...)
	return iauo
}

// RemovePanierIPAddress removes "panierIPAddress" edges to PanierIPAddress entities.
func (iauo *IPAddressUpdateOne) RemovePanierIPAddress(p ...*PanierIPAddress) *IPAddressUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return iauo.RemovePanierIPAddresIDs(ids...)
}

// Where appends a list predicates to the IPAddressUpdate builder.
func (iauo *IPAddressUpdateOne) Where(ps ...predicate.IPAddress) *IPAddressUpdateOne {
	iauo.mutation.Where(ps...)
	return iauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iauo *IPAddressUpdateOne) Select(field string, fields ...string) *IPAddressUpdateOne {
	iauo.fields = append([]string{field}, fields...)
	return iauo
}

// Save executes the query and returns the updated IPAddress entity.
func (iauo *IPAddressUpdateOne) Save(ctx context.Context) (*IPAddress, error) {
	return withHooks(ctx, iauo.sqlSave, iauo.mutation, iauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iauo *IPAddressUpdateOne) SaveX(ctx context.Context) *IPAddress {
	node, err := iauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iauo *IPAddressUpdateOne) Exec(ctx context.Context) error {
	_, err := iauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iauo *IPAddressUpdateOne) ExecX(ctx context.Context) {
	if err := iauo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iauo *IPAddressUpdateOne) sqlSave(ctx context.Context) (_node *IPAddress, err error) {
	_spec := sqlgraph.NewUpdateSpec(ipaddress.Table, ipaddress.Columns, sqlgraph.NewFieldSpec(ipaddress.FieldID, field.TypeInt))
	id, ok := iauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "IPAddress.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ipaddress.FieldID)
		for _, f := range fields {
			if !ipaddress.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ipaddress.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iauo.mutation.Name(); ok {
		_spec.SetField(ipaddress.FieldName, field.TypeString, value)
	}
	if value, ok := iauo.mutation.Price(); ok {
		_spec.SetField(ipaddress.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := iauo.mutation.AddedPrice(); ok {
		_spec.AddField(ipaddress.FieldPrice, field.TypeFloat64, value)
	}
	if iauo.mutation.PanierIPAddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ipaddress.PanierIPAddressTable,
			Columns: []string{ipaddress.PanierIPAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panieripaddress.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iauo.mutation.RemovedPanierIPAddressIDs(); len(nodes) > 0 && !iauo.mutation.PanierIPAddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ipaddress.PanierIPAddressTable,
			Columns: []string{ipaddress.PanierIPAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panieripaddress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iauo.mutation.PanierIPAddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ipaddress.PanierIPAddressTable,
			Columns: []string{ipaddress.PanierIPAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panieripaddress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &IPAddress{config: iauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ipaddress.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iauo.mutation.done = true
	return _node, nil
}
