// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/panierloadbalancer"
	"backend/ent/predicate"
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PanierLoadBalancerDelete is the builder for deleting a PanierLoadBalancer entity.
type PanierLoadBalancerDelete struct {
	config
	hooks    []Hook
	mutation *PanierLoadBalancerMutation
}

// Where appends a list predicates to the PanierLoadBalancerDelete builder.
func (plbd *PanierLoadBalancerDelete) Where(ps ...predicate.PanierLoadBalancer) *PanierLoadBalancerDelete {
	plbd.mutation.Where(ps...)
	return plbd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (plbd *PanierLoadBalancerDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, plbd.sqlExec, plbd.mutation, plbd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (plbd *PanierLoadBalancerDelete) ExecX(ctx context.Context) int {
	n, err := plbd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (plbd *PanierLoadBalancerDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(panierloadbalancer.Table, sqlgraph.NewFieldSpec(panierloadbalancer.FieldID, field.TypeInt))
	if ps := plbd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, plbd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	plbd.mutation.done = true
	return affected, err
}

// PanierLoadBalancerDeleteOne is the builder for deleting a single PanierLoadBalancer entity.
type PanierLoadBalancerDeleteOne struct {
	plbd *PanierLoadBalancerDelete
}

// Where appends a list predicates to the PanierLoadBalancerDelete builder.
func (plbdo *PanierLoadBalancerDeleteOne) Where(ps ...predicate.PanierLoadBalancer) *PanierLoadBalancerDeleteOne {
	plbdo.plbd.mutation.Where(ps...)
	return plbdo
}

// Exec executes the deletion query.
func (plbdo *PanierLoadBalancerDeleteOne) Exec(ctx context.Context) error {
	n, err := plbdo.plbd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{panierloadbalancer.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (plbdo *PanierLoadBalancerDeleteOne) ExecX(ctx context.Context) {
	if err := plbdo.Exec(ctx); err != nil {
		panic(err)
	}
}
