// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/loadbalancer"
	"backend/ent/panier"
	"backend/ent/panierloadbalancer"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PanierLoadBalancer is the model entity for the PanierLoadBalancer schema.
type PanierLoadBalancer struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Quantity holds the value of the "quantity" field.
	Quantity int `json:"quantity,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PanierLoadBalancerQuery when eager-loading is set.
	Edges                       PanierLoadBalancerEdges `json:"edges"`
	loadBalancer_id             *int
	panier_panier_load_balancer *int
	selectValues                sql.SelectValues
}

// PanierLoadBalancerEdges holds the relations/edges for other nodes in the graph.
type PanierLoadBalancerEdges struct {
	// Panier holds the value of the panier edge.
	Panier *Panier `json:"panier,omitempty"`
	// LoadBalancer holds the value of the loadBalancer edge.
	LoadBalancer *LoadBalancer `json:"loadBalancer,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// PanierOrErr returns the Panier value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PanierLoadBalancerEdges) PanierOrErr() (*Panier, error) {
	if e.loadedTypes[0] {
		if e.Panier == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: panier.Label}
		}
		return e.Panier, nil
	}
	return nil, &NotLoadedError{edge: "panier"}
}

// LoadBalancerOrErr returns the LoadBalancer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PanierLoadBalancerEdges) LoadBalancerOrErr() (*LoadBalancer, error) {
	if e.loadedTypes[1] {
		if e.LoadBalancer == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: loadbalancer.Label}
		}
		return e.LoadBalancer, nil
	}
	return nil, &NotLoadedError{edge: "loadBalancer"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PanierLoadBalancer) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case panierloadbalancer.FieldID, panierloadbalancer.FieldQuantity:
			values[i] = new(sql.NullInt64)
		case panierloadbalancer.ForeignKeys[0]: // loadBalancer_id
			values[i] = new(sql.NullInt64)
		case panierloadbalancer.ForeignKeys[1]: // panier_panier_load_balancer
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PanierLoadBalancer fields.
func (plb *PanierLoadBalancer) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case panierloadbalancer.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			plb.ID = int(value.Int64)
		case panierloadbalancer.FieldQuantity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[i])
			} else if value.Valid {
				plb.Quantity = int(value.Int64)
			}
		case panierloadbalancer.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field loadBalancer_id", value)
			} else if value.Valid {
				plb.loadBalancer_id = new(int)
				*plb.loadBalancer_id = int(value.Int64)
			}
		case panierloadbalancer.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field panier_panier_load_balancer", value)
			} else if value.Valid {
				plb.panier_panier_load_balancer = new(int)
				*plb.panier_panier_load_balancer = int(value.Int64)
			}
		default:
			plb.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PanierLoadBalancer.
// This includes values selected through modifiers, order, etc.
func (plb *PanierLoadBalancer) Value(name string) (ent.Value, error) {
	return plb.selectValues.Get(name)
}

// QueryPanier queries the "panier" edge of the PanierLoadBalancer entity.
func (plb *PanierLoadBalancer) QueryPanier() *PanierQuery {
	return NewPanierLoadBalancerClient(plb.config).QueryPanier(plb)
}

// QueryLoadBalancer queries the "loadBalancer" edge of the PanierLoadBalancer entity.
func (plb *PanierLoadBalancer) QueryLoadBalancer() *LoadBalancerQuery {
	return NewPanierLoadBalancerClient(plb.config).QueryLoadBalancer(plb)
}

// Update returns a builder for updating this PanierLoadBalancer.
// Note that you need to call PanierLoadBalancer.Unwrap() before calling this method if this PanierLoadBalancer
// was returned from a transaction, and the transaction was committed or rolled back.
func (plb *PanierLoadBalancer) Update() *PanierLoadBalancerUpdateOne {
	return NewPanierLoadBalancerClient(plb.config).UpdateOne(plb)
}

// Unwrap unwraps the PanierLoadBalancer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (plb *PanierLoadBalancer) Unwrap() *PanierLoadBalancer {
	_tx, ok := plb.config.driver.(*txDriver)
	if !ok {
		panic("ent: PanierLoadBalancer is not a transactional entity")
	}
	plb.config.driver = _tx.drv
	return plb
}

// String implements the fmt.Stringer.
func (plb *PanierLoadBalancer) String() string {
	var builder strings.Builder
	builder.WriteString("PanierLoadBalancer(")
	builder.WriteString(fmt.Sprintf("id=%v, ", plb.ID))
	builder.WriteString("quantity=")
	builder.WriteString(fmt.Sprintf("%v", plb.Quantity))
	builder.WriteByte(')')
	return builder.String()
}

// PanierLoadBalancers is a parsable slice of PanierLoadBalancer.
type PanierLoadBalancers []*PanierLoadBalancer
