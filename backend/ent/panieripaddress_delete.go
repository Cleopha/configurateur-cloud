// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/panieripaddress"
	"backend/ent/predicate"
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PanierIPAddressDelete is the builder for deleting a PanierIPAddress entity.
type PanierIPAddressDelete struct {
	config
	hooks    []Hook
	mutation *PanierIPAddressMutation
}

// Where appends a list predicates to the PanierIPAddressDelete builder.
func (piad *PanierIPAddressDelete) Where(ps ...predicate.PanierIPAddress) *PanierIPAddressDelete {
	piad.mutation.Where(ps...)
	return piad
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (piad *PanierIPAddressDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, piad.sqlExec, piad.mutation, piad.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (piad *PanierIPAddressDelete) ExecX(ctx context.Context) int {
	n, err := piad.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (piad *PanierIPAddressDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(panieripaddress.Table, sqlgraph.NewFieldSpec(panieripaddress.FieldID, field.TypeInt))
	if ps := piad.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, piad.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	piad.mutation.done = true
	return affected, err
}

// PanierIPAddressDeleteOne is the builder for deleting a single PanierIPAddress entity.
type PanierIPAddressDeleteOne struct {
	piad *PanierIPAddressDelete
}

// Where appends a list predicates to the PanierIPAddressDelete builder.
func (piado *PanierIPAddressDeleteOne) Where(ps ...predicate.PanierIPAddress) *PanierIPAddressDeleteOne {
	piado.piad.mutation.Where(ps...)
	return piado
}

// Exec executes the deletion query.
func (piado *PanierIPAddressDeleteOne) Exec(ctx context.Context) error {
	n, err := piado.piad.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{panieripaddress.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (piado *PanierIPAddressDeleteOne) ExecX(ctx context.Context) {
	if err := piado.Exec(ctx); err != nil {
		panic(err)
	}
}
