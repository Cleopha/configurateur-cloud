// Code generated by ent, DO NOT EDIT.

package panier

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the panier type in the database.
	Label = "panier"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUID holds the string denoting the uid field in the database.
	FieldUID = "uid"
	// EdgePanierInstances holds the string denoting the panierinstances edge name in mutations.
	EdgePanierInstances = "panierInstances"
	// EdgePanierBlockStorage holds the string denoting the panierblockstorage edge name in mutations.
	EdgePanierBlockStorage = "panierBlockStorage"
	// EdgePanierIPAddress holds the string denoting the panieripaddress edge name in mutations.
	EdgePanierIPAddress = "panierIPAddress"
	// EdgePanierLoadBalancer holds the string denoting the panierloadbalancer edge name in mutations.
	EdgePanierLoadBalancer = "panierLoadBalancer"
	// EdgePanierObjectStorage holds the string denoting the panierobjectstorage edge name in mutations.
	EdgePanierObjectStorage = "panierObjectStorage"
	// Table holds the table name of the panier in the database.
	Table = "paniers"
	// PanierInstancesTable is the table that holds the panierInstances relation/edge.
	PanierInstancesTable = "panier_instances"
	// PanierInstancesInverseTable is the table name for the PanierInstances entity.
	// It exists in this package in order to avoid circular dependency with the "panierinstances" package.
	PanierInstancesInverseTable = "panier_instances"
	// PanierInstancesColumn is the table column denoting the panierInstances relation/edge.
	PanierInstancesColumn = "panier_panier_instances"
	// PanierBlockStorageTable is the table that holds the panierBlockStorage relation/edge.
	PanierBlockStorageTable = "panier_block_storages"
	// PanierBlockStorageInverseTable is the table name for the PanierBlockStorage entity.
	// It exists in this package in order to avoid circular dependency with the "panierblockstorage" package.
	PanierBlockStorageInverseTable = "panier_block_storages"
	// PanierBlockStorageColumn is the table column denoting the panierBlockStorage relation/edge.
	PanierBlockStorageColumn = "panier_panier_block_storage"
	// PanierIPAddressTable is the table that holds the panierIPAddress relation/edge.
	PanierIPAddressTable = "panier_ip_addresses"
	// PanierIPAddressInverseTable is the table name for the PanierIPAddress entity.
	// It exists in this package in order to avoid circular dependency with the "panieripaddress" package.
	PanierIPAddressInverseTable = "panier_ip_addresses"
	// PanierIPAddressColumn is the table column denoting the panierIPAddress relation/edge.
	PanierIPAddressColumn = "panier_panier_ip_address"
	// PanierLoadBalancerTable is the table that holds the panierLoadBalancer relation/edge.
	PanierLoadBalancerTable = "panier_load_balancers"
	// PanierLoadBalancerInverseTable is the table name for the PanierLoadBalancer entity.
	// It exists in this package in order to avoid circular dependency with the "panierloadbalancer" package.
	PanierLoadBalancerInverseTable = "panier_load_balancers"
	// PanierLoadBalancerColumn is the table column denoting the panierLoadBalancer relation/edge.
	PanierLoadBalancerColumn = "panier_panier_load_balancer"
	// PanierObjectStorageTable is the table that holds the panierObjectStorage relation/edge.
	PanierObjectStorageTable = "panier_object_storages"
	// PanierObjectStorageInverseTable is the table name for the PanierObjectStorage entity.
	// It exists in this package in order to avoid circular dependency with the "panierobjectstorage" package.
	PanierObjectStorageInverseTable = "panier_object_storages"
	// PanierObjectStorageColumn is the table column denoting the panierObjectStorage relation/edge.
	PanierObjectStorageColumn = "panier_panier_object_storage"
)

// Columns holds all SQL columns for panier fields.
var Columns = []string{
	FieldID,
	FieldUID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUID holds the default value on creation for the "uid" field.
	DefaultUID func() uuid.UUID
)

// OrderOption defines the ordering options for the Panier queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUID orders the results by the uid field.
func ByUID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUID, opts...).ToFunc()
}

// ByPanierInstancesCount orders the results by panierInstances count.
func ByPanierInstancesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPanierInstancesStep(), opts...)
	}
}

// ByPanierInstances orders the results by panierInstances terms.
func ByPanierInstances(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPanierInstancesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPanierBlockStorageCount orders the results by panierBlockStorage count.
func ByPanierBlockStorageCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPanierBlockStorageStep(), opts...)
	}
}

// ByPanierBlockStorage orders the results by panierBlockStorage terms.
func ByPanierBlockStorage(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPanierBlockStorageStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPanierIPAddressCount orders the results by panierIPAddress count.
func ByPanierIPAddressCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPanierIPAddressStep(), opts...)
	}
}

// ByPanierIPAddress orders the results by panierIPAddress terms.
func ByPanierIPAddress(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPanierIPAddressStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPanierLoadBalancerCount orders the results by panierLoadBalancer count.
func ByPanierLoadBalancerCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPanierLoadBalancerStep(), opts...)
	}
}

// ByPanierLoadBalancer orders the results by panierLoadBalancer terms.
func ByPanierLoadBalancer(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPanierLoadBalancerStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPanierObjectStorageCount orders the results by panierObjectStorage count.
func ByPanierObjectStorageCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPanierObjectStorageStep(), opts...)
	}
}

// ByPanierObjectStorage orders the results by panierObjectStorage terms.
func ByPanierObjectStorage(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPanierObjectStorageStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPanierInstancesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PanierInstancesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PanierInstancesTable, PanierInstancesColumn),
	)
}
func newPanierBlockStorageStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PanierBlockStorageInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PanierBlockStorageTable, PanierBlockStorageColumn),
	)
}
func newPanierIPAddressStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PanierIPAddressInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PanierIPAddressTable, PanierIPAddressColumn),
	)
}
func newPanierLoadBalancerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PanierLoadBalancerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PanierLoadBalancerTable, PanierLoadBalancerColumn),
	)
}
func newPanierObjectStorageStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PanierObjectStorageInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PanierObjectStorageTable, PanierObjectStorageColumn),
	)
}
