// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"backend/ent/migrate"

	"backend/ent/blockstorage"
	"backend/ent/instances"
	"backend/ent/ipaddress"
	"backend/ent/loadbalancer"
	"backend/ent/objectstorage"
	"backend/ent/panier"
	"backend/ent/panierblockstorage"
	"backend/ent/panierinstances"
	"backend/ent/panieripaddress"
	"backend/ent/panierloadbalancer"
	"backend/ent/panierobjectstorage"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// BlockStorage is the client for interacting with the BlockStorage builders.
	BlockStorage *BlockStorageClient
	// IPAddress is the client for interacting with the IPAddress builders.
	IPAddress *IPAddressClient
	// Instances is the client for interacting with the Instances builders.
	Instances *InstancesClient
	// LoadBalancer is the client for interacting with the LoadBalancer builders.
	LoadBalancer *LoadBalancerClient
	// ObjectStorage is the client for interacting with the ObjectStorage builders.
	ObjectStorage *ObjectStorageClient
	// Panier is the client for interacting with the Panier builders.
	Panier *PanierClient
	// PanierBlockStorage is the client for interacting with the PanierBlockStorage builders.
	PanierBlockStorage *PanierBlockStorageClient
	// PanierIPAddress is the client for interacting with the PanierIPAddress builders.
	PanierIPAddress *PanierIPAddressClient
	// PanierInstances is the client for interacting with the PanierInstances builders.
	PanierInstances *PanierInstancesClient
	// PanierLoadBalancer is the client for interacting with the PanierLoadBalancer builders.
	PanierLoadBalancer *PanierLoadBalancerClient
	// PanierObjectStorage is the client for interacting with the PanierObjectStorage builders.
	PanierObjectStorage *PanierObjectStorageClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.BlockStorage = NewBlockStorageClient(c.config)
	c.IPAddress = NewIPAddressClient(c.config)
	c.Instances = NewInstancesClient(c.config)
	c.LoadBalancer = NewLoadBalancerClient(c.config)
	c.ObjectStorage = NewObjectStorageClient(c.config)
	c.Panier = NewPanierClient(c.config)
	c.PanierBlockStorage = NewPanierBlockStorageClient(c.config)
	c.PanierIPAddress = NewPanierIPAddressClient(c.config)
	c.PanierInstances = NewPanierInstancesClient(c.config)
	c.PanierLoadBalancer = NewPanierLoadBalancerClient(c.config)
	c.PanierObjectStorage = NewPanierObjectStorageClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                 ctx,
		config:              cfg,
		BlockStorage:        NewBlockStorageClient(cfg),
		IPAddress:           NewIPAddressClient(cfg),
		Instances:           NewInstancesClient(cfg),
		LoadBalancer:        NewLoadBalancerClient(cfg),
		ObjectStorage:       NewObjectStorageClient(cfg),
		Panier:              NewPanierClient(cfg),
		PanierBlockStorage:  NewPanierBlockStorageClient(cfg),
		PanierIPAddress:     NewPanierIPAddressClient(cfg),
		PanierInstances:     NewPanierInstancesClient(cfg),
		PanierLoadBalancer:  NewPanierLoadBalancerClient(cfg),
		PanierObjectStorage: NewPanierObjectStorageClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                 ctx,
		config:              cfg,
		BlockStorage:        NewBlockStorageClient(cfg),
		IPAddress:           NewIPAddressClient(cfg),
		Instances:           NewInstancesClient(cfg),
		LoadBalancer:        NewLoadBalancerClient(cfg),
		ObjectStorage:       NewObjectStorageClient(cfg),
		Panier:              NewPanierClient(cfg),
		PanierBlockStorage:  NewPanierBlockStorageClient(cfg),
		PanierIPAddress:     NewPanierIPAddressClient(cfg),
		PanierInstances:     NewPanierInstancesClient(cfg),
		PanierLoadBalancer:  NewPanierLoadBalancerClient(cfg),
		PanierObjectStorage: NewPanierObjectStorageClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		BlockStorage.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.BlockStorage, c.IPAddress, c.Instances, c.LoadBalancer, c.ObjectStorage,
		c.Panier, c.PanierBlockStorage, c.PanierIPAddress, c.PanierInstances,
		c.PanierLoadBalancer, c.PanierObjectStorage,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.BlockStorage, c.IPAddress, c.Instances, c.LoadBalancer, c.ObjectStorage,
		c.Panier, c.PanierBlockStorage, c.PanierIPAddress, c.PanierInstances,
		c.PanierLoadBalancer, c.PanierObjectStorage,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *BlockStorageMutation:
		return c.BlockStorage.mutate(ctx, m)
	case *IPAddressMutation:
		return c.IPAddress.mutate(ctx, m)
	case *InstancesMutation:
		return c.Instances.mutate(ctx, m)
	case *LoadBalancerMutation:
		return c.LoadBalancer.mutate(ctx, m)
	case *ObjectStorageMutation:
		return c.ObjectStorage.mutate(ctx, m)
	case *PanierMutation:
		return c.Panier.mutate(ctx, m)
	case *PanierBlockStorageMutation:
		return c.PanierBlockStorage.mutate(ctx, m)
	case *PanierIPAddressMutation:
		return c.PanierIPAddress.mutate(ctx, m)
	case *PanierInstancesMutation:
		return c.PanierInstances.mutate(ctx, m)
	case *PanierLoadBalancerMutation:
		return c.PanierLoadBalancer.mutate(ctx, m)
	case *PanierObjectStorageMutation:
		return c.PanierObjectStorage.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// BlockStorageClient is a client for the BlockStorage schema.
type BlockStorageClient struct {
	config
}

// NewBlockStorageClient returns a client for the BlockStorage from the given config.
func NewBlockStorageClient(c config) *BlockStorageClient {
	return &BlockStorageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `blockstorage.Hooks(f(g(h())))`.
func (c *BlockStorageClient) Use(hooks ...Hook) {
	c.hooks.BlockStorage = append(c.hooks.BlockStorage, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `blockstorage.Intercept(f(g(h())))`.
func (c *BlockStorageClient) Intercept(interceptors ...Interceptor) {
	c.inters.BlockStorage = append(c.inters.BlockStorage, interceptors...)
}

// Create returns a builder for creating a BlockStorage entity.
func (c *BlockStorageClient) Create() *BlockStorageCreate {
	mutation := newBlockStorageMutation(c.config, OpCreate)
	return &BlockStorageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BlockStorage entities.
func (c *BlockStorageClient) CreateBulk(builders ...*BlockStorageCreate) *BlockStorageCreateBulk {
	return &BlockStorageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BlockStorage.
func (c *BlockStorageClient) Update() *BlockStorageUpdate {
	mutation := newBlockStorageMutation(c.config, OpUpdate)
	return &BlockStorageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BlockStorageClient) UpdateOne(bs *BlockStorage) *BlockStorageUpdateOne {
	mutation := newBlockStorageMutation(c.config, OpUpdateOne, withBlockStorage(bs))
	return &BlockStorageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BlockStorageClient) UpdateOneID(id int) *BlockStorageUpdateOne {
	mutation := newBlockStorageMutation(c.config, OpUpdateOne, withBlockStorageID(id))
	return &BlockStorageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BlockStorage.
func (c *BlockStorageClient) Delete() *BlockStorageDelete {
	mutation := newBlockStorageMutation(c.config, OpDelete)
	return &BlockStorageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BlockStorageClient) DeleteOne(bs *BlockStorage) *BlockStorageDeleteOne {
	return c.DeleteOneID(bs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BlockStorageClient) DeleteOneID(id int) *BlockStorageDeleteOne {
	builder := c.Delete().Where(blockstorage.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BlockStorageDeleteOne{builder}
}

// Query returns a query builder for BlockStorage.
func (c *BlockStorageClient) Query() *BlockStorageQuery {
	return &BlockStorageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBlockStorage},
		inters: c.Interceptors(),
	}
}

// Get returns a BlockStorage entity by its id.
func (c *BlockStorageClient) Get(ctx context.Context, id int) (*BlockStorage, error) {
	return c.Query().Where(blockstorage.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BlockStorageClient) GetX(ctx context.Context, id int) *BlockStorage {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPanierBlockStorage queries the panierBlockStorage edge of a BlockStorage.
func (c *BlockStorageClient) QueryPanierBlockStorage(bs *BlockStorage) *PanierBlockStorageQuery {
	query := (&PanierBlockStorageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(blockstorage.Table, blockstorage.FieldID, id),
			sqlgraph.To(panierblockstorage.Table, panierblockstorage.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, blockstorage.PanierBlockStorageTable, blockstorage.PanierBlockStorageColumn),
		)
		fromV = sqlgraph.Neighbors(bs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BlockStorageClient) Hooks() []Hook {
	return c.hooks.BlockStorage
}

// Interceptors returns the client interceptors.
func (c *BlockStorageClient) Interceptors() []Interceptor {
	return c.inters.BlockStorage
}

func (c *BlockStorageClient) mutate(ctx context.Context, m *BlockStorageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BlockStorageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BlockStorageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BlockStorageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BlockStorageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown BlockStorage mutation op: %q", m.Op())
	}
}

// IPAddressClient is a client for the IPAddress schema.
type IPAddressClient struct {
	config
}

// NewIPAddressClient returns a client for the IPAddress from the given config.
func NewIPAddressClient(c config) *IPAddressClient {
	return &IPAddressClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ipaddress.Hooks(f(g(h())))`.
func (c *IPAddressClient) Use(hooks ...Hook) {
	c.hooks.IPAddress = append(c.hooks.IPAddress, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `ipaddress.Intercept(f(g(h())))`.
func (c *IPAddressClient) Intercept(interceptors ...Interceptor) {
	c.inters.IPAddress = append(c.inters.IPAddress, interceptors...)
}

// Create returns a builder for creating a IPAddress entity.
func (c *IPAddressClient) Create() *IPAddressCreate {
	mutation := newIPAddressMutation(c.config, OpCreate)
	return &IPAddressCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of IPAddress entities.
func (c *IPAddressClient) CreateBulk(builders ...*IPAddressCreate) *IPAddressCreateBulk {
	return &IPAddressCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for IPAddress.
func (c *IPAddressClient) Update() *IPAddressUpdate {
	mutation := newIPAddressMutation(c.config, OpUpdate)
	return &IPAddressUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *IPAddressClient) UpdateOne(ia *IPAddress) *IPAddressUpdateOne {
	mutation := newIPAddressMutation(c.config, OpUpdateOne, withIPAddress(ia))
	return &IPAddressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *IPAddressClient) UpdateOneID(id int) *IPAddressUpdateOne {
	mutation := newIPAddressMutation(c.config, OpUpdateOne, withIPAddressID(id))
	return &IPAddressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for IPAddress.
func (c *IPAddressClient) Delete() *IPAddressDelete {
	mutation := newIPAddressMutation(c.config, OpDelete)
	return &IPAddressDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *IPAddressClient) DeleteOne(ia *IPAddress) *IPAddressDeleteOne {
	return c.DeleteOneID(ia.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *IPAddressClient) DeleteOneID(id int) *IPAddressDeleteOne {
	builder := c.Delete().Where(ipaddress.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &IPAddressDeleteOne{builder}
}

// Query returns a query builder for IPAddress.
func (c *IPAddressClient) Query() *IPAddressQuery {
	return &IPAddressQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeIPAddress},
		inters: c.Interceptors(),
	}
}

// Get returns a IPAddress entity by its id.
func (c *IPAddressClient) Get(ctx context.Context, id int) (*IPAddress, error) {
	return c.Query().Where(ipaddress.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *IPAddressClient) GetX(ctx context.Context, id int) *IPAddress {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPanierIPAddress queries the panierIPAddress edge of a IPAddress.
func (c *IPAddressClient) QueryPanierIPAddress(ia *IPAddress) *PanierIPAddressQuery {
	query := (&PanierIPAddressClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ia.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ipaddress.Table, ipaddress.FieldID, id),
			sqlgraph.To(panieripaddress.Table, panieripaddress.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ipaddress.PanierIPAddressTable, ipaddress.PanierIPAddressColumn),
		)
		fromV = sqlgraph.Neighbors(ia.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *IPAddressClient) Hooks() []Hook {
	return c.hooks.IPAddress
}

// Interceptors returns the client interceptors.
func (c *IPAddressClient) Interceptors() []Interceptor {
	return c.inters.IPAddress
}

func (c *IPAddressClient) mutate(ctx context.Context, m *IPAddressMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&IPAddressCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&IPAddressUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&IPAddressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&IPAddressDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown IPAddress mutation op: %q", m.Op())
	}
}

// InstancesClient is a client for the Instances schema.
type InstancesClient struct {
	config
}

// NewInstancesClient returns a client for the Instances from the given config.
func NewInstancesClient(c config) *InstancesClient {
	return &InstancesClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `instances.Hooks(f(g(h())))`.
func (c *InstancesClient) Use(hooks ...Hook) {
	c.hooks.Instances = append(c.hooks.Instances, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `instances.Intercept(f(g(h())))`.
func (c *InstancesClient) Intercept(interceptors ...Interceptor) {
	c.inters.Instances = append(c.inters.Instances, interceptors...)
}

// Create returns a builder for creating a Instances entity.
func (c *InstancesClient) Create() *InstancesCreate {
	mutation := newInstancesMutation(c.config, OpCreate)
	return &InstancesCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Instances entities.
func (c *InstancesClient) CreateBulk(builders ...*InstancesCreate) *InstancesCreateBulk {
	return &InstancesCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Instances.
func (c *InstancesClient) Update() *InstancesUpdate {
	mutation := newInstancesMutation(c.config, OpUpdate)
	return &InstancesUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InstancesClient) UpdateOne(i *Instances) *InstancesUpdateOne {
	mutation := newInstancesMutation(c.config, OpUpdateOne, withInstances(i))
	return &InstancesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InstancesClient) UpdateOneID(id int) *InstancesUpdateOne {
	mutation := newInstancesMutation(c.config, OpUpdateOne, withInstancesID(id))
	return &InstancesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Instances.
func (c *InstancesClient) Delete() *InstancesDelete {
	mutation := newInstancesMutation(c.config, OpDelete)
	return &InstancesDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *InstancesClient) DeleteOne(i *Instances) *InstancesDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *InstancesClient) DeleteOneID(id int) *InstancesDeleteOne {
	builder := c.Delete().Where(instances.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InstancesDeleteOne{builder}
}

// Query returns a query builder for Instances.
func (c *InstancesClient) Query() *InstancesQuery {
	return &InstancesQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeInstances},
		inters: c.Interceptors(),
	}
}

// Get returns a Instances entity by its id.
func (c *InstancesClient) Get(ctx context.Context, id int) (*Instances, error) {
	return c.Query().Where(instances.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InstancesClient) GetX(ctx context.Context, id int) *Instances {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPanierInstances queries the panierInstances edge of a Instances.
func (c *InstancesClient) QueryPanierInstances(i *Instances) *PanierInstancesQuery {
	query := (&PanierInstancesClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(instances.Table, instances.FieldID, id),
			sqlgraph.To(panierinstances.Table, panierinstances.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, instances.PanierInstancesTable, instances.PanierInstancesColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InstancesClient) Hooks() []Hook {
	return c.hooks.Instances
}

// Interceptors returns the client interceptors.
func (c *InstancesClient) Interceptors() []Interceptor {
	return c.inters.Instances
}

func (c *InstancesClient) mutate(ctx context.Context, m *InstancesMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&InstancesCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&InstancesUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&InstancesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&InstancesDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Instances mutation op: %q", m.Op())
	}
}

// LoadBalancerClient is a client for the LoadBalancer schema.
type LoadBalancerClient struct {
	config
}

// NewLoadBalancerClient returns a client for the LoadBalancer from the given config.
func NewLoadBalancerClient(c config) *LoadBalancerClient {
	return &LoadBalancerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `loadbalancer.Hooks(f(g(h())))`.
func (c *LoadBalancerClient) Use(hooks ...Hook) {
	c.hooks.LoadBalancer = append(c.hooks.LoadBalancer, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `loadbalancer.Intercept(f(g(h())))`.
func (c *LoadBalancerClient) Intercept(interceptors ...Interceptor) {
	c.inters.LoadBalancer = append(c.inters.LoadBalancer, interceptors...)
}

// Create returns a builder for creating a LoadBalancer entity.
func (c *LoadBalancerClient) Create() *LoadBalancerCreate {
	mutation := newLoadBalancerMutation(c.config, OpCreate)
	return &LoadBalancerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of LoadBalancer entities.
func (c *LoadBalancerClient) CreateBulk(builders ...*LoadBalancerCreate) *LoadBalancerCreateBulk {
	return &LoadBalancerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for LoadBalancer.
func (c *LoadBalancerClient) Update() *LoadBalancerUpdate {
	mutation := newLoadBalancerMutation(c.config, OpUpdate)
	return &LoadBalancerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LoadBalancerClient) UpdateOne(lb *LoadBalancer) *LoadBalancerUpdateOne {
	mutation := newLoadBalancerMutation(c.config, OpUpdateOne, withLoadBalancer(lb))
	return &LoadBalancerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LoadBalancerClient) UpdateOneID(id int) *LoadBalancerUpdateOne {
	mutation := newLoadBalancerMutation(c.config, OpUpdateOne, withLoadBalancerID(id))
	return &LoadBalancerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for LoadBalancer.
func (c *LoadBalancerClient) Delete() *LoadBalancerDelete {
	mutation := newLoadBalancerMutation(c.config, OpDelete)
	return &LoadBalancerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LoadBalancerClient) DeleteOne(lb *LoadBalancer) *LoadBalancerDeleteOne {
	return c.DeleteOneID(lb.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LoadBalancerClient) DeleteOneID(id int) *LoadBalancerDeleteOne {
	builder := c.Delete().Where(loadbalancer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LoadBalancerDeleteOne{builder}
}

// Query returns a query builder for LoadBalancer.
func (c *LoadBalancerClient) Query() *LoadBalancerQuery {
	return &LoadBalancerQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLoadBalancer},
		inters: c.Interceptors(),
	}
}

// Get returns a LoadBalancer entity by its id.
func (c *LoadBalancerClient) Get(ctx context.Context, id int) (*LoadBalancer, error) {
	return c.Query().Where(loadbalancer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LoadBalancerClient) GetX(ctx context.Context, id int) *LoadBalancer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPanierLoadBalancer queries the panierLoadBalancer edge of a LoadBalancer.
func (c *LoadBalancerClient) QueryPanierLoadBalancer(lb *LoadBalancer) *PanierLoadBalancerQuery {
	query := (&PanierLoadBalancerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := lb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(loadbalancer.Table, loadbalancer.FieldID, id),
			sqlgraph.To(panierloadbalancer.Table, panierloadbalancer.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, loadbalancer.PanierLoadBalancerTable, loadbalancer.PanierLoadBalancerColumn),
		)
		fromV = sqlgraph.Neighbors(lb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LoadBalancerClient) Hooks() []Hook {
	return c.hooks.LoadBalancer
}

// Interceptors returns the client interceptors.
func (c *LoadBalancerClient) Interceptors() []Interceptor {
	return c.inters.LoadBalancer
}

func (c *LoadBalancerClient) mutate(ctx context.Context, m *LoadBalancerMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LoadBalancerCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LoadBalancerUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LoadBalancerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LoadBalancerDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown LoadBalancer mutation op: %q", m.Op())
	}
}

// ObjectStorageClient is a client for the ObjectStorage schema.
type ObjectStorageClient struct {
	config
}

// NewObjectStorageClient returns a client for the ObjectStorage from the given config.
func NewObjectStorageClient(c config) *ObjectStorageClient {
	return &ObjectStorageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `objectstorage.Hooks(f(g(h())))`.
func (c *ObjectStorageClient) Use(hooks ...Hook) {
	c.hooks.ObjectStorage = append(c.hooks.ObjectStorage, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `objectstorage.Intercept(f(g(h())))`.
func (c *ObjectStorageClient) Intercept(interceptors ...Interceptor) {
	c.inters.ObjectStorage = append(c.inters.ObjectStorage, interceptors...)
}

// Create returns a builder for creating a ObjectStorage entity.
func (c *ObjectStorageClient) Create() *ObjectStorageCreate {
	mutation := newObjectStorageMutation(c.config, OpCreate)
	return &ObjectStorageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ObjectStorage entities.
func (c *ObjectStorageClient) CreateBulk(builders ...*ObjectStorageCreate) *ObjectStorageCreateBulk {
	return &ObjectStorageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ObjectStorage.
func (c *ObjectStorageClient) Update() *ObjectStorageUpdate {
	mutation := newObjectStorageMutation(c.config, OpUpdate)
	return &ObjectStorageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ObjectStorageClient) UpdateOne(os *ObjectStorage) *ObjectStorageUpdateOne {
	mutation := newObjectStorageMutation(c.config, OpUpdateOne, withObjectStorage(os))
	return &ObjectStorageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ObjectStorageClient) UpdateOneID(id int) *ObjectStorageUpdateOne {
	mutation := newObjectStorageMutation(c.config, OpUpdateOne, withObjectStorageID(id))
	return &ObjectStorageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ObjectStorage.
func (c *ObjectStorageClient) Delete() *ObjectStorageDelete {
	mutation := newObjectStorageMutation(c.config, OpDelete)
	return &ObjectStorageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ObjectStorageClient) DeleteOne(os *ObjectStorage) *ObjectStorageDeleteOne {
	return c.DeleteOneID(os.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ObjectStorageClient) DeleteOneID(id int) *ObjectStorageDeleteOne {
	builder := c.Delete().Where(objectstorage.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ObjectStorageDeleteOne{builder}
}

// Query returns a query builder for ObjectStorage.
func (c *ObjectStorageClient) Query() *ObjectStorageQuery {
	return &ObjectStorageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeObjectStorage},
		inters: c.Interceptors(),
	}
}

// Get returns a ObjectStorage entity by its id.
func (c *ObjectStorageClient) Get(ctx context.Context, id int) (*ObjectStorage, error) {
	return c.Query().Where(objectstorage.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ObjectStorageClient) GetX(ctx context.Context, id int) *ObjectStorage {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPanierObjectStorage queries the panierObjectStorage edge of a ObjectStorage.
func (c *ObjectStorageClient) QueryPanierObjectStorage(os *ObjectStorage) *PanierObjectStorageQuery {
	query := (&PanierObjectStorageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := os.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(objectstorage.Table, objectstorage.FieldID, id),
			sqlgraph.To(panierobjectstorage.Table, panierobjectstorage.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, objectstorage.PanierObjectStorageTable, objectstorage.PanierObjectStorageColumn),
		)
		fromV = sqlgraph.Neighbors(os.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ObjectStorageClient) Hooks() []Hook {
	return c.hooks.ObjectStorage
}

// Interceptors returns the client interceptors.
func (c *ObjectStorageClient) Interceptors() []Interceptor {
	return c.inters.ObjectStorage
}

func (c *ObjectStorageClient) mutate(ctx context.Context, m *ObjectStorageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ObjectStorageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ObjectStorageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ObjectStorageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ObjectStorageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ObjectStorage mutation op: %q", m.Op())
	}
}

// PanierClient is a client for the Panier schema.
type PanierClient struct {
	config
}

// NewPanierClient returns a client for the Panier from the given config.
func NewPanierClient(c config) *PanierClient {
	return &PanierClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `panier.Hooks(f(g(h())))`.
func (c *PanierClient) Use(hooks ...Hook) {
	c.hooks.Panier = append(c.hooks.Panier, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `panier.Intercept(f(g(h())))`.
func (c *PanierClient) Intercept(interceptors ...Interceptor) {
	c.inters.Panier = append(c.inters.Panier, interceptors...)
}

// Create returns a builder for creating a Panier entity.
func (c *PanierClient) Create() *PanierCreate {
	mutation := newPanierMutation(c.config, OpCreate)
	return &PanierCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Panier entities.
func (c *PanierClient) CreateBulk(builders ...*PanierCreate) *PanierCreateBulk {
	return &PanierCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Panier.
func (c *PanierClient) Update() *PanierUpdate {
	mutation := newPanierMutation(c.config, OpUpdate)
	return &PanierUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PanierClient) UpdateOne(pa *Panier) *PanierUpdateOne {
	mutation := newPanierMutation(c.config, OpUpdateOne, withPanier(pa))
	return &PanierUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PanierClient) UpdateOneID(id int) *PanierUpdateOne {
	mutation := newPanierMutation(c.config, OpUpdateOne, withPanierID(id))
	return &PanierUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Panier.
func (c *PanierClient) Delete() *PanierDelete {
	mutation := newPanierMutation(c.config, OpDelete)
	return &PanierDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PanierClient) DeleteOne(pa *Panier) *PanierDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PanierClient) DeleteOneID(id int) *PanierDeleteOne {
	builder := c.Delete().Where(panier.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PanierDeleteOne{builder}
}

// Query returns a query builder for Panier.
func (c *PanierClient) Query() *PanierQuery {
	return &PanierQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePanier},
		inters: c.Interceptors(),
	}
}

// Get returns a Panier entity by its id.
func (c *PanierClient) Get(ctx context.Context, id int) (*Panier, error) {
	return c.Query().Where(panier.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PanierClient) GetX(ctx context.Context, id int) *Panier {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPanierInstances queries the panierInstances edge of a Panier.
func (c *PanierClient) QueryPanierInstances(pa *Panier) *PanierInstancesQuery {
	query := (&PanierInstancesClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(panier.Table, panier.FieldID, id),
			sqlgraph.To(panierinstances.Table, panierinstances.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, panier.PanierInstancesTable, panier.PanierInstancesColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPanierBlockStorage queries the panierBlockStorage edge of a Panier.
func (c *PanierClient) QueryPanierBlockStorage(pa *Panier) *PanierBlockStorageQuery {
	query := (&PanierBlockStorageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(panier.Table, panier.FieldID, id),
			sqlgraph.To(panierblockstorage.Table, panierblockstorage.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, panier.PanierBlockStorageTable, panier.PanierBlockStorageColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPanierIPAddress queries the panierIPAddress edge of a Panier.
func (c *PanierClient) QueryPanierIPAddress(pa *Panier) *PanierIPAddressQuery {
	query := (&PanierIPAddressClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(panier.Table, panier.FieldID, id),
			sqlgraph.To(panieripaddress.Table, panieripaddress.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, panier.PanierIPAddressTable, panier.PanierIPAddressColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPanierLoadBalancer queries the panierLoadBalancer edge of a Panier.
func (c *PanierClient) QueryPanierLoadBalancer(pa *Panier) *PanierLoadBalancerQuery {
	query := (&PanierLoadBalancerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(panier.Table, panier.FieldID, id),
			sqlgraph.To(panierloadbalancer.Table, panierloadbalancer.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, panier.PanierLoadBalancerTable, panier.PanierLoadBalancerColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPanierObjectStorage queries the panierObjectStorage edge of a Panier.
func (c *PanierClient) QueryPanierObjectStorage(pa *Panier) *PanierObjectStorageQuery {
	query := (&PanierObjectStorageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(panier.Table, panier.FieldID, id),
			sqlgraph.To(panierobjectstorage.Table, panierobjectstorage.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, panier.PanierObjectStorageTable, panier.PanierObjectStorageColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PanierClient) Hooks() []Hook {
	return c.hooks.Panier
}

// Interceptors returns the client interceptors.
func (c *PanierClient) Interceptors() []Interceptor {
	return c.inters.Panier
}

func (c *PanierClient) mutate(ctx context.Context, m *PanierMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PanierCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PanierUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PanierUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PanierDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Panier mutation op: %q", m.Op())
	}
}

// PanierBlockStorageClient is a client for the PanierBlockStorage schema.
type PanierBlockStorageClient struct {
	config
}

// NewPanierBlockStorageClient returns a client for the PanierBlockStorage from the given config.
func NewPanierBlockStorageClient(c config) *PanierBlockStorageClient {
	return &PanierBlockStorageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `panierblockstorage.Hooks(f(g(h())))`.
func (c *PanierBlockStorageClient) Use(hooks ...Hook) {
	c.hooks.PanierBlockStorage = append(c.hooks.PanierBlockStorage, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `panierblockstorage.Intercept(f(g(h())))`.
func (c *PanierBlockStorageClient) Intercept(interceptors ...Interceptor) {
	c.inters.PanierBlockStorage = append(c.inters.PanierBlockStorage, interceptors...)
}

// Create returns a builder for creating a PanierBlockStorage entity.
func (c *PanierBlockStorageClient) Create() *PanierBlockStorageCreate {
	mutation := newPanierBlockStorageMutation(c.config, OpCreate)
	return &PanierBlockStorageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PanierBlockStorage entities.
func (c *PanierBlockStorageClient) CreateBulk(builders ...*PanierBlockStorageCreate) *PanierBlockStorageCreateBulk {
	return &PanierBlockStorageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PanierBlockStorage.
func (c *PanierBlockStorageClient) Update() *PanierBlockStorageUpdate {
	mutation := newPanierBlockStorageMutation(c.config, OpUpdate)
	return &PanierBlockStorageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PanierBlockStorageClient) UpdateOne(pbs *PanierBlockStorage) *PanierBlockStorageUpdateOne {
	mutation := newPanierBlockStorageMutation(c.config, OpUpdateOne, withPanierBlockStorage(pbs))
	return &PanierBlockStorageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PanierBlockStorageClient) UpdateOneID(id int) *PanierBlockStorageUpdateOne {
	mutation := newPanierBlockStorageMutation(c.config, OpUpdateOne, withPanierBlockStorageID(id))
	return &PanierBlockStorageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PanierBlockStorage.
func (c *PanierBlockStorageClient) Delete() *PanierBlockStorageDelete {
	mutation := newPanierBlockStorageMutation(c.config, OpDelete)
	return &PanierBlockStorageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PanierBlockStorageClient) DeleteOne(pbs *PanierBlockStorage) *PanierBlockStorageDeleteOne {
	return c.DeleteOneID(pbs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PanierBlockStorageClient) DeleteOneID(id int) *PanierBlockStorageDeleteOne {
	builder := c.Delete().Where(panierblockstorage.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PanierBlockStorageDeleteOne{builder}
}

// Query returns a query builder for PanierBlockStorage.
func (c *PanierBlockStorageClient) Query() *PanierBlockStorageQuery {
	return &PanierBlockStorageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePanierBlockStorage},
		inters: c.Interceptors(),
	}
}

// Get returns a PanierBlockStorage entity by its id.
func (c *PanierBlockStorageClient) Get(ctx context.Context, id int) (*PanierBlockStorage, error) {
	return c.Query().Where(panierblockstorage.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PanierBlockStorageClient) GetX(ctx context.Context, id int) *PanierBlockStorage {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPanier queries the panier edge of a PanierBlockStorage.
func (c *PanierBlockStorageClient) QueryPanier(pbs *PanierBlockStorage) *PanierQuery {
	query := (&PanierClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pbs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(panierblockstorage.Table, panierblockstorage.FieldID, id),
			sqlgraph.To(panier.Table, panier.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, panierblockstorage.PanierTable, panierblockstorage.PanierColumn),
		)
		fromV = sqlgraph.Neighbors(pbs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBlockStorage queries the blockStorage edge of a PanierBlockStorage.
func (c *PanierBlockStorageClient) QueryBlockStorage(pbs *PanierBlockStorage) *BlockStorageQuery {
	query := (&BlockStorageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pbs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(panierblockstorage.Table, panierblockstorage.FieldID, id),
			sqlgraph.To(blockstorage.Table, blockstorage.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, panierblockstorage.BlockStorageTable, panierblockstorage.BlockStorageColumn),
		)
		fromV = sqlgraph.Neighbors(pbs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PanierBlockStorageClient) Hooks() []Hook {
	return c.hooks.PanierBlockStorage
}

// Interceptors returns the client interceptors.
func (c *PanierBlockStorageClient) Interceptors() []Interceptor {
	return c.inters.PanierBlockStorage
}

func (c *PanierBlockStorageClient) mutate(ctx context.Context, m *PanierBlockStorageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PanierBlockStorageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PanierBlockStorageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PanierBlockStorageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PanierBlockStorageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PanierBlockStorage mutation op: %q", m.Op())
	}
}

// PanierIPAddressClient is a client for the PanierIPAddress schema.
type PanierIPAddressClient struct {
	config
}

// NewPanierIPAddressClient returns a client for the PanierIPAddress from the given config.
func NewPanierIPAddressClient(c config) *PanierIPAddressClient {
	return &PanierIPAddressClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `panieripaddress.Hooks(f(g(h())))`.
func (c *PanierIPAddressClient) Use(hooks ...Hook) {
	c.hooks.PanierIPAddress = append(c.hooks.PanierIPAddress, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `panieripaddress.Intercept(f(g(h())))`.
func (c *PanierIPAddressClient) Intercept(interceptors ...Interceptor) {
	c.inters.PanierIPAddress = append(c.inters.PanierIPAddress, interceptors...)
}

// Create returns a builder for creating a PanierIPAddress entity.
func (c *PanierIPAddressClient) Create() *PanierIPAddressCreate {
	mutation := newPanierIPAddressMutation(c.config, OpCreate)
	return &PanierIPAddressCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PanierIPAddress entities.
func (c *PanierIPAddressClient) CreateBulk(builders ...*PanierIPAddressCreate) *PanierIPAddressCreateBulk {
	return &PanierIPAddressCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PanierIPAddress.
func (c *PanierIPAddressClient) Update() *PanierIPAddressUpdate {
	mutation := newPanierIPAddressMutation(c.config, OpUpdate)
	return &PanierIPAddressUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PanierIPAddressClient) UpdateOne(pia *PanierIPAddress) *PanierIPAddressUpdateOne {
	mutation := newPanierIPAddressMutation(c.config, OpUpdateOne, withPanierIPAddress(pia))
	return &PanierIPAddressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PanierIPAddressClient) UpdateOneID(id int) *PanierIPAddressUpdateOne {
	mutation := newPanierIPAddressMutation(c.config, OpUpdateOne, withPanierIPAddressID(id))
	return &PanierIPAddressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PanierIPAddress.
func (c *PanierIPAddressClient) Delete() *PanierIPAddressDelete {
	mutation := newPanierIPAddressMutation(c.config, OpDelete)
	return &PanierIPAddressDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PanierIPAddressClient) DeleteOne(pia *PanierIPAddress) *PanierIPAddressDeleteOne {
	return c.DeleteOneID(pia.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PanierIPAddressClient) DeleteOneID(id int) *PanierIPAddressDeleteOne {
	builder := c.Delete().Where(panieripaddress.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PanierIPAddressDeleteOne{builder}
}

// Query returns a query builder for PanierIPAddress.
func (c *PanierIPAddressClient) Query() *PanierIPAddressQuery {
	return &PanierIPAddressQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePanierIPAddress},
		inters: c.Interceptors(),
	}
}

// Get returns a PanierIPAddress entity by its id.
func (c *PanierIPAddressClient) Get(ctx context.Context, id int) (*PanierIPAddress, error) {
	return c.Query().Where(panieripaddress.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PanierIPAddressClient) GetX(ctx context.Context, id int) *PanierIPAddress {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPanier queries the panier edge of a PanierIPAddress.
func (c *PanierIPAddressClient) QueryPanier(pia *PanierIPAddress) *PanierQuery {
	query := (&PanierClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pia.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(panieripaddress.Table, panieripaddress.FieldID, id),
			sqlgraph.To(panier.Table, panier.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, panieripaddress.PanierTable, panieripaddress.PanierColumn),
		)
		fromV = sqlgraph.Neighbors(pia.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryIPAddress queries the IPAddress edge of a PanierIPAddress.
func (c *PanierIPAddressClient) QueryIPAddress(pia *PanierIPAddress) *IPAddressQuery {
	query := (&IPAddressClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pia.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(panieripaddress.Table, panieripaddress.FieldID, id),
			sqlgraph.To(ipaddress.Table, ipaddress.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, panieripaddress.IPAddressTable, panieripaddress.IPAddressColumn),
		)
		fromV = sqlgraph.Neighbors(pia.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PanierIPAddressClient) Hooks() []Hook {
	return c.hooks.PanierIPAddress
}

// Interceptors returns the client interceptors.
func (c *PanierIPAddressClient) Interceptors() []Interceptor {
	return c.inters.PanierIPAddress
}

func (c *PanierIPAddressClient) mutate(ctx context.Context, m *PanierIPAddressMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PanierIPAddressCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PanierIPAddressUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PanierIPAddressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PanierIPAddressDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PanierIPAddress mutation op: %q", m.Op())
	}
}

// PanierInstancesClient is a client for the PanierInstances schema.
type PanierInstancesClient struct {
	config
}

// NewPanierInstancesClient returns a client for the PanierInstances from the given config.
func NewPanierInstancesClient(c config) *PanierInstancesClient {
	return &PanierInstancesClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `panierinstances.Hooks(f(g(h())))`.
func (c *PanierInstancesClient) Use(hooks ...Hook) {
	c.hooks.PanierInstances = append(c.hooks.PanierInstances, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `panierinstances.Intercept(f(g(h())))`.
func (c *PanierInstancesClient) Intercept(interceptors ...Interceptor) {
	c.inters.PanierInstances = append(c.inters.PanierInstances, interceptors...)
}

// Create returns a builder for creating a PanierInstances entity.
func (c *PanierInstancesClient) Create() *PanierInstancesCreate {
	mutation := newPanierInstancesMutation(c.config, OpCreate)
	return &PanierInstancesCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PanierInstances entities.
func (c *PanierInstancesClient) CreateBulk(builders ...*PanierInstancesCreate) *PanierInstancesCreateBulk {
	return &PanierInstancesCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PanierInstances.
func (c *PanierInstancesClient) Update() *PanierInstancesUpdate {
	mutation := newPanierInstancesMutation(c.config, OpUpdate)
	return &PanierInstancesUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PanierInstancesClient) UpdateOne(pi *PanierInstances) *PanierInstancesUpdateOne {
	mutation := newPanierInstancesMutation(c.config, OpUpdateOne, withPanierInstances(pi))
	return &PanierInstancesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PanierInstancesClient) UpdateOneID(id int) *PanierInstancesUpdateOne {
	mutation := newPanierInstancesMutation(c.config, OpUpdateOne, withPanierInstancesID(id))
	return &PanierInstancesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PanierInstances.
func (c *PanierInstancesClient) Delete() *PanierInstancesDelete {
	mutation := newPanierInstancesMutation(c.config, OpDelete)
	return &PanierInstancesDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PanierInstancesClient) DeleteOne(pi *PanierInstances) *PanierInstancesDeleteOne {
	return c.DeleteOneID(pi.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PanierInstancesClient) DeleteOneID(id int) *PanierInstancesDeleteOne {
	builder := c.Delete().Where(panierinstances.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PanierInstancesDeleteOne{builder}
}

// Query returns a query builder for PanierInstances.
func (c *PanierInstancesClient) Query() *PanierInstancesQuery {
	return &PanierInstancesQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePanierInstances},
		inters: c.Interceptors(),
	}
}

// Get returns a PanierInstances entity by its id.
func (c *PanierInstancesClient) Get(ctx context.Context, id int) (*PanierInstances, error) {
	return c.Query().Where(panierinstances.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PanierInstancesClient) GetX(ctx context.Context, id int) *PanierInstances {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPanier queries the panier edge of a PanierInstances.
func (c *PanierInstancesClient) QueryPanier(pi *PanierInstances) *PanierQuery {
	query := (&PanierClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(panierinstances.Table, panierinstances.FieldID, id),
			sqlgraph.To(panier.Table, panier.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, panierinstances.PanierTable, panierinstances.PanierColumn),
		)
		fromV = sqlgraph.Neighbors(pi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInstance queries the instance edge of a PanierInstances.
func (c *PanierInstancesClient) QueryInstance(pi *PanierInstances) *InstancesQuery {
	query := (&InstancesClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(panierinstances.Table, panierinstances.FieldID, id),
			sqlgraph.To(instances.Table, instances.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, panierinstances.InstanceTable, panierinstances.InstanceColumn),
		)
		fromV = sqlgraph.Neighbors(pi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PanierInstancesClient) Hooks() []Hook {
	return c.hooks.PanierInstances
}

// Interceptors returns the client interceptors.
func (c *PanierInstancesClient) Interceptors() []Interceptor {
	return c.inters.PanierInstances
}

func (c *PanierInstancesClient) mutate(ctx context.Context, m *PanierInstancesMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PanierInstancesCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PanierInstancesUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PanierInstancesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PanierInstancesDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PanierInstances mutation op: %q", m.Op())
	}
}

// PanierLoadBalancerClient is a client for the PanierLoadBalancer schema.
type PanierLoadBalancerClient struct {
	config
}

// NewPanierLoadBalancerClient returns a client for the PanierLoadBalancer from the given config.
func NewPanierLoadBalancerClient(c config) *PanierLoadBalancerClient {
	return &PanierLoadBalancerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `panierloadbalancer.Hooks(f(g(h())))`.
func (c *PanierLoadBalancerClient) Use(hooks ...Hook) {
	c.hooks.PanierLoadBalancer = append(c.hooks.PanierLoadBalancer, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `panierloadbalancer.Intercept(f(g(h())))`.
func (c *PanierLoadBalancerClient) Intercept(interceptors ...Interceptor) {
	c.inters.PanierLoadBalancer = append(c.inters.PanierLoadBalancer, interceptors...)
}

// Create returns a builder for creating a PanierLoadBalancer entity.
func (c *PanierLoadBalancerClient) Create() *PanierLoadBalancerCreate {
	mutation := newPanierLoadBalancerMutation(c.config, OpCreate)
	return &PanierLoadBalancerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PanierLoadBalancer entities.
func (c *PanierLoadBalancerClient) CreateBulk(builders ...*PanierLoadBalancerCreate) *PanierLoadBalancerCreateBulk {
	return &PanierLoadBalancerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PanierLoadBalancer.
func (c *PanierLoadBalancerClient) Update() *PanierLoadBalancerUpdate {
	mutation := newPanierLoadBalancerMutation(c.config, OpUpdate)
	return &PanierLoadBalancerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PanierLoadBalancerClient) UpdateOne(plb *PanierLoadBalancer) *PanierLoadBalancerUpdateOne {
	mutation := newPanierLoadBalancerMutation(c.config, OpUpdateOne, withPanierLoadBalancer(plb))
	return &PanierLoadBalancerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PanierLoadBalancerClient) UpdateOneID(id int) *PanierLoadBalancerUpdateOne {
	mutation := newPanierLoadBalancerMutation(c.config, OpUpdateOne, withPanierLoadBalancerID(id))
	return &PanierLoadBalancerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PanierLoadBalancer.
func (c *PanierLoadBalancerClient) Delete() *PanierLoadBalancerDelete {
	mutation := newPanierLoadBalancerMutation(c.config, OpDelete)
	return &PanierLoadBalancerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PanierLoadBalancerClient) DeleteOne(plb *PanierLoadBalancer) *PanierLoadBalancerDeleteOne {
	return c.DeleteOneID(plb.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PanierLoadBalancerClient) DeleteOneID(id int) *PanierLoadBalancerDeleteOne {
	builder := c.Delete().Where(panierloadbalancer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PanierLoadBalancerDeleteOne{builder}
}

// Query returns a query builder for PanierLoadBalancer.
func (c *PanierLoadBalancerClient) Query() *PanierLoadBalancerQuery {
	return &PanierLoadBalancerQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePanierLoadBalancer},
		inters: c.Interceptors(),
	}
}

// Get returns a PanierLoadBalancer entity by its id.
func (c *PanierLoadBalancerClient) Get(ctx context.Context, id int) (*PanierLoadBalancer, error) {
	return c.Query().Where(panierloadbalancer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PanierLoadBalancerClient) GetX(ctx context.Context, id int) *PanierLoadBalancer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPanier queries the panier edge of a PanierLoadBalancer.
func (c *PanierLoadBalancerClient) QueryPanier(plb *PanierLoadBalancer) *PanierQuery {
	query := (&PanierClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := plb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(panierloadbalancer.Table, panierloadbalancer.FieldID, id),
			sqlgraph.To(panier.Table, panier.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, panierloadbalancer.PanierTable, panierloadbalancer.PanierColumn),
		)
		fromV = sqlgraph.Neighbors(plb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLoadBalancer queries the loadBalancer edge of a PanierLoadBalancer.
func (c *PanierLoadBalancerClient) QueryLoadBalancer(plb *PanierLoadBalancer) *LoadBalancerQuery {
	query := (&LoadBalancerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := plb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(panierloadbalancer.Table, panierloadbalancer.FieldID, id),
			sqlgraph.To(loadbalancer.Table, loadbalancer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, panierloadbalancer.LoadBalancerTable, panierloadbalancer.LoadBalancerColumn),
		)
		fromV = sqlgraph.Neighbors(plb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PanierLoadBalancerClient) Hooks() []Hook {
	return c.hooks.PanierLoadBalancer
}

// Interceptors returns the client interceptors.
func (c *PanierLoadBalancerClient) Interceptors() []Interceptor {
	return c.inters.PanierLoadBalancer
}

func (c *PanierLoadBalancerClient) mutate(ctx context.Context, m *PanierLoadBalancerMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PanierLoadBalancerCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PanierLoadBalancerUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PanierLoadBalancerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PanierLoadBalancerDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PanierLoadBalancer mutation op: %q", m.Op())
	}
}

// PanierObjectStorageClient is a client for the PanierObjectStorage schema.
type PanierObjectStorageClient struct {
	config
}

// NewPanierObjectStorageClient returns a client for the PanierObjectStorage from the given config.
func NewPanierObjectStorageClient(c config) *PanierObjectStorageClient {
	return &PanierObjectStorageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `panierobjectstorage.Hooks(f(g(h())))`.
func (c *PanierObjectStorageClient) Use(hooks ...Hook) {
	c.hooks.PanierObjectStorage = append(c.hooks.PanierObjectStorage, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `panierobjectstorage.Intercept(f(g(h())))`.
func (c *PanierObjectStorageClient) Intercept(interceptors ...Interceptor) {
	c.inters.PanierObjectStorage = append(c.inters.PanierObjectStorage, interceptors...)
}

// Create returns a builder for creating a PanierObjectStorage entity.
func (c *PanierObjectStorageClient) Create() *PanierObjectStorageCreate {
	mutation := newPanierObjectStorageMutation(c.config, OpCreate)
	return &PanierObjectStorageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PanierObjectStorage entities.
func (c *PanierObjectStorageClient) CreateBulk(builders ...*PanierObjectStorageCreate) *PanierObjectStorageCreateBulk {
	return &PanierObjectStorageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PanierObjectStorage.
func (c *PanierObjectStorageClient) Update() *PanierObjectStorageUpdate {
	mutation := newPanierObjectStorageMutation(c.config, OpUpdate)
	return &PanierObjectStorageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PanierObjectStorageClient) UpdateOne(pos *PanierObjectStorage) *PanierObjectStorageUpdateOne {
	mutation := newPanierObjectStorageMutation(c.config, OpUpdateOne, withPanierObjectStorage(pos))
	return &PanierObjectStorageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PanierObjectStorageClient) UpdateOneID(id int) *PanierObjectStorageUpdateOne {
	mutation := newPanierObjectStorageMutation(c.config, OpUpdateOne, withPanierObjectStorageID(id))
	return &PanierObjectStorageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PanierObjectStorage.
func (c *PanierObjectStorageClient) Delete() *PanierObjectStorageDelete {
	mutation := newPanierObjectStorageMutation(c.config, OpDelete)
	return &PanierObjectStorageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PanierObjectStorageClient) DeleteOne(pos *PanierObjectStorage) *PanierObjectStorageDeleteOne {
	return c.DeleteOneID(pos.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PanierObjectStorageClient) DeleteOneID(id int) *PanierObjectStorageDeleteOne {
	builder := c.Delete().Where(panierobjectstorage.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PanierObjectStorageDeleteOne{builder}
}

// Query returns a query builder for PanierObjectStorage.
func (c *PanierObjectStorageClient) Query() *PanierObjectStorageQuery {
	return &PanierObjectStorageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePanierObjectStorage},
		inters: c.Interceptors(),
	}
}

// Get returns a PanierObjectStorage entity by its id.
func (c *PanierObjectStorageClient) Get(ctx context.Context, id int) (*PanierObjectStorage, error) {
	return c.Query().Where(panierobjectstorage.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PanierObjectStorageClient) GetX(ctx context.Context, id int) *PanierObjectStorage {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPanier queries the panier edge of a PanierObjectStorage.
func (c *PanierObjectStorageClient) QueryPanier(pos *PanierObjectStorage) *PanierQuery {
	query := (&PanierClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pos.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(panierobjectstorage.Table, panierobjectstorage.FieldID, id),
			sqlgraph.To(panier.Table, panier.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, panierobjectstorage.PanierTable, panierobjectstorage.PanierColumn),
		)
		fromV = sqlgraph.Neighbors(pos.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryObjectStorage queries the objectStorage edge of a PanierObjectStorage.
func (c *PanierObjectStorageClient) QueryObjectStorage(pos *PanierObjectStorage) *ObjectStorageQuery {
	query := (&ObjectStorageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pos.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(panierobjectstorage.Table, panierobjectstorage.FieldID, id),
			sqlgraph.To(objectstorage.Table, objectstorage.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, panierobjectstorage.ObjectStorageTable, panierobjectstorage.ObjectStorageColumn),
		)
		fromV = sqlgraph.Neighbors(pos.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PanierObjectStorageClient) Hooks() []Hook {
	return c.hooks.PanierObjectStorage
}

// Interceptors returns the client interceptors.
func (c *PanierObjectStorageClient) Interceptors() []Interceptor {
	return c.inters.PanierObjectStorage
}

func (c *PanierObjectStorageClient) mutate(ctx context.Context, m *PanierObjectStorageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PanierObjectStorageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PanierObjectStorageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PanierObjectStorageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PanierObjectStorageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PanierObjectStorage mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		BlockStorage, IPAddress, Instances, LoadBalancer, ObjectStorage, Panier,
		PanierBlockStorage, PanierIPAddress, PanierInstances, PanierLoadBalancer,
		PanierObjectStorage []ent.Hook
	}
	inters struct {
		BlockStorage, IPAddress, Instances, LoadBalancer, ObjectStorage, Panier,
		PanierBlockStorage, PanierIPAddress, PanierInstances, PanierLoadBalancer,
		PanierObjectStorage []ent.Interceptor
	}
)
