// Code generated by ent, DO NOT EDIT.

package ipaddress

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the ipaddress type in the database.
	Label = "ip_address"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// EdgePanierIPAddress holds the string denoting the panieripaddress edge name in mutations.
	EdgePanierIPAddress = "panierIPAddress"
	// Table holds the table name of the ipaddress in the database.
	Table = "ip_addresses"
	// PanierIPAddressTable is the table that holds the panierIPAddress relation/edge.
	PanierIPAddressTable = "panier_ip_addresses"
	// PanierIPAddressInverseTable is the table name for the PanierIPAddress entity.
	// It exists in this package in order to avoid circular dependency with the "panieripaddress" package.
	PanierIPAddressInverseTable = "panier_ip_addresses"
	// PanierIPAddressColumn is the table column denoting the panierIPAddress relation/edge.
	PanierIPAddressColumn = "IPAddress_id"
)

// Columns holds all SQL columns for ipaddress fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldPrice,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the IPAddress queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the Name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByPrice orders the results by the Price field.
func ByPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrice, opts...).ToFunc()
}

// ByPanierIPAddressCount orders the results by panierIPAddress count.
func ByPanierIPAddressCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPanierIPAddressStep(), opts...)
	}
}

// ByPanierIPAddress orders the results by panierIPAddress terms.
func ByPanierIPAddress(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPanierIPAddressStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPanierIPAddressStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PanierIPAddressInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PanierIPAddressTable, PanierIPAddressColumn),
	)
}
