// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/loadbalancer"
	"backend/ent/panier"
	"backend/ent/panierloadbalancer"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PanierLoadBalancerCreate is the builder for creating a PanierLoadBalancer entity.
type PanierLoadBalancerCreate struct {
	config
	mutation *PanierLoadBalancerMutation
	hooks    []Hook
}

// SetQuantity sets the "quantity" field.
func (plbc *PanierLoadBalancerCreate) SetQuantity(i int) *PanierLoadBalancerCreate {
	plbc.mutation.SetQuantity(i)
	return plbc
}

// SetPanierID sets the "panier" edge to the Panier entity by ID.
func (plbc *PanierLoadBalancerCreate) SetPanierID(id int) *PanierLoadBalancerCreate {
	plbc.mutation.SetPanierID(id)
	return plbc
}

// SetPanier sets the "panier" edge to the Panier entity.
func (plbc *PanierLoadBalancerCreate) SetPanier(p *Panier) *PanierLoadBalancerCreate {
	return plbc.SetPanierID(p.ID)
}

// SetLoadBalancerID sets the "loadBalancer" edge to the LoadBalancer entity by ID.
func (plbc *PanierLoadBalancerCreate) SetLoadBalancerID(id int) *PanierLoadBalancerCreate {
	plbc.mutation.SetLoadBalancerID(id)
	return plbc
}

// SetLoadBalancer sets the "loadBalancer" edge to the LoadBalancer entity.
func (plbc *PanierLoadBalancerCreate) SetLoadBalancer(l *LoadBalancer) *PanierLoadBalancerCreate {
	return plbc.SetLoadBalancerID(l.ID)
}

// Mutation returns the PanierLoadBalancerMutation object of the builder.
func (plbc *PanierLoadBalancerCreate) Mutation() *PanierLoadBalancerMutation {
	return plbc.mutation
}

// Save creates the PanierLoadBalancer in the database.
func (plbc *PanierLoadBalancerCreate) Save(ctx context.Context) (*PanierLoadBalancer, error) {
	return withHooks(ctx, plbc.sqlSave, plbc.mutation, plbc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (plbc *PanierLoadBalancerCreate) SaveX(ctx context.Context) *PanierLoadBalancer {
	v, err := plbc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (plbc *PanierLoadBalancerCreate) Exec(ctx context.Context) error {
	_, err := plbc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (plbc *PanierLoadBalancerCreate) ExecX(ctx context.Context) {
	if err := plbc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (plbc *PanierLoadBalancerCreate) check() error {
	if _, ok := plbc.mutation.Quantity(); !ok {
		return &ValidationError{Name: "quantity", err: errors.New(`ent: missing required field "PanierLoadBalancer.quantity"`)}
	}
	if _, ok := plbc.mutation.PanierID(); !ok {
		return &ValidationError{Name: "panier", err: errors.New(`ent: missing required edge "PanierLoadBalancer.panier"`)}
	}
	if _, ok := plbc.mutation.LoadBalancerID(); !ok {
		return &ValidationError{Name: "loadBalancer", err: errors.New(`ent: missing required edge "PanierLoadBalancer.loadBalancer"`)}
	}
	return nil
}

func (plbc *PanierLoadBalancerCreate) sqlSave(ctx context.Context) (*PanierLoadBalancer, error) {
	if err := plbc.check(); err != nil {
		return nil, err
	}
	_node, _spec := plbc.createSpec()
	if err := sqlgraph.CreateNode(ctx, plbc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	plbc.mutation.id = &_node.ID
	plbc.mutation.done = true
	return _node, nil
}

func (plbc *PanierLoadBalancerCreate) createSpec() (*PanierLoadBalancer, *sqlgraph.CreateSpec) {
	var (
		_node = &PanierLoadBalancer{config: plbc.config}
		_spec = sqlgraph.NewCreateSpec(panierloadbalancer.Table, sqlgraph.NewFieldSpec(panierloadbalancer.FieldID, field.TypeInt))
	)
	if value, ok := plbc.mutation.Quantity(); ok {
		_spec.SetField(panierloadbalancer.FieldQuantity, field.TypeInt, value)
		_node.Quantity = value
	}
	if nodes := plbc.mutation.PanierIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   panierloadbalancer.PanierTable,
			Columns: []string{panierloadbalancer.PanierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panier.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.panier_panier_load_balancer = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := plbc.mutation.LoadBalancerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   panierloadbalancer.LoadBalancerTable,
			Columns: []string{panierloadbalancer.LoadBalancerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(loadbalancer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.loadBalancer_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PanierLoadBalancerCreateBulk is the builder for creating many PanierLoadBalancer entities in bulk.
type PanierLoadBalancerCreateBulk struct {
	config
	builders []*PanierLoadBalancerCreate
}

// Save creates the PanierLoadBalancer entities in the database.
func (plbcb *PanierLoadBalancerCreateBulk) Save(ctx context.Context) ([]*PanierLoadBalancer, error) {
	specs := make([]*sqlgraph.CreateSpec, len(plbcb.builders))
	nodes := make([]*PanierLoadBalancer, len(plbcb.builders))
	mutators := make([]Mutator, len(plbcb.builders))
	for i := range plbcb.builders {
		func(i int, root context.Context) {
			builder := plbcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PanierLoadBalancerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, plbcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, plbcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, plbcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (plbcb *PanierLoadBalancerCreateBulk) SaveX(ctx context.Context) []*PanierLoadBalancer {
	v, err := plbcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (plbcb *PanierLoadBalancerCreateBulk) Exec(ctx context.Context) error {
	_, err := plbcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (plbcb *PanierLoadBalancerCreateBulk) ExecX(ctx context.Context) {
	if err := plbcb.Exec(ctx); err != nil {
		panic(err)
	}
}
