// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/objectstorage"
	"backend/ent/panier"
	"backend/ent/panierobjectstorage"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PanierObjectStorageCreate is the builder for creating a PanierObjectStorage entity.
type PanierObjectStorageCreate struct {
	config
	mutation *PanierObjectStorageMutation
	hooks    []Hook
}

// SetQuantity sets the "quantity" field.
func (posc *PanierObjectStorageCreate) SetQuantity(i int) *PanierObjectStorageCreate {
	posc.mutation.SetQuantity(i)
	return posc
}

// SetPanierID sets the "panier" edge to the Panier entity by ID.
func (posc *PanierObjectStorageCreate) SetPanierID(id int) *PanierObjectStorageCreate {
	posc.mutation.SetPanierID(id)
	return posc
}

// SetPanier sets the "panier" edge to the Panier entity.
func (posc *PanierObjectStorageCreate) SetPanier(p *Panier) *PanierObjectStorageCreate {
	return posc.SetPanierID(p.ID)
}

// SetObjectStorageID sets the "objectStorage" edge to the ObjectStorage entity by ID.
func (posc *PanierObjectStorageCreate) SetObjectStorageID(id int) *PanierObjectStorageCreate {
	posc.mutation.SetObjectStorageID(id)
	return posc
}

// SetObjectStorage sets the "objectStorage" edge to the ObjectStorage entity.
func (posc *PanierObjectStorageCreate) SetObjectStorage(o *ObjectStorage) *PanierObjectStorageCreate {
	return posc.SetObjectStorageID(o.ID)
}

// Mutation returns the PanierObjectStorageMutation object of the builder.
func (posc *PanierObjectStorageCreate) Mutation() *PanierObjectStorageMutation {
	return posc.mutation
}

// Save creates the PanierObjectStorage in the database.
func (posc *PanierObjectStorageCreate) Save(ctx context.Context) (*PanierObjectStorage, error) {
	return withHooks(ctx, posc.sqlSave, posc.mutation, posc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (posc *PanierObjectStorageCreate) SaveX(ctx context.Context) *PanierObjectStorage {
	v, err := posc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (posc *PanierObjectStorageCreate) Exec(ctx context.Context) error {
	_, err := posc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (posc *PanierObjectStorageCreate) ExecX(ctx context.Context) {
	if err := posc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (posc *PanierObjectStorageCreate) check() error {
	if _, ok := posc.mutation.Quantity(); !ok {
		return &ValidationError{Name: "quantity", err: errors.New(`ent: missing required field "PanierObjectStorage.quantity"`)}
	}
	if _, ok := posc.mutation.PanierID(); !ok {
		return &ValidationError{Name: "panier", err: errors.New(`ent: missing required edge "PanierObjectStorage.panier"`)}
	}
	if _, ok := posc.mutation.ObjectStorageID(); !ok {
		return &ValidationError{Name: "objectStorage", err: errors.New(`ent: missing required edge "PanierObjectStorage.objectStorage"`)}
	}
	return nil
}

func (posc *PanierObjectStorageCreate) sqlSave(ctx context.Context) (*PanierObjectStorage, error) {
	if err := posc.check(); err != nil {
		return nil, err
	}
	_node, _spec := posc.createSpec()
	if err := sqlgraph.CreateNode(ctx, posc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	posc.mutation.id = &_node.ID
	posc.mutation.done = true
	return _node, nil
}

func (posc *PanierObjectStorageCreate) createSpec() (*PanierObjectStorage, *sqlgraph.CreateSpec) {
	var (
		_node = &PanierObjectStorage{config: posc.config}
		_spec = sqlgraph.NewCreateSpec(panierobjectstorage.Table, sqlgraph.NewFieldSpec(panierobjectstorage.FieldID, field.TypeInt))
	)
	if value, ok := posc.mutation.Quantity(); ok {
		_spec.SetField(panierobjectstorage.FieldQuantity, field.TypeInt, value)
		_node.Quantity = value
	}
	if nodes := posc.mutation.PanierIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   panierobjectstorage.PanierTable,
			Columns: []string{panierobjectstorage.PanierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panier.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.panier_panier_object_storage = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := posc.mutation.ObjectStorageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   panierobjectstorage.ObjectStorageTable,
			Columns: []string{panierobjectstorage.ObjectStorageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(objectstorage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.objectStorage_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PanierObjectStorageCreateBulk is the builder for creating many PanierObjectStorage entities in bulk.
type PanierObjectStorageCreateBulk struct {
	config
	builders []*PanierObjectStorageCreate
}

// Save creates the PanierObjectStorage entities in the database.
func (poscb *PanierObjectStorageCreateBulk) Save(ctx context.Context) ([]*PanierObjectStorage, error) {
	specs := make([]*sqlgraph.CreateSpec, len(poscb.builders))
	nodes := make([]*PanierObjectStorage, len(poscb.builders))
	mutators := make([]Mutator, len(poscb.builders))
	for i := range poscb.builders {
		func(i int, root context.Context) {
			builder := poscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PanierObjectStorageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, poscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, poscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, poscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (poscb *PanierObjectStorageCreateBulk) SaveX(ctx context.Context) []*PanierObjectStorage {
	v, err := poscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (poscb *PanierObjectStorageCreateBulk) Exec(ctx context.Context) error {
	_, err := poscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (poscb *PanierObjectStorageCreateBulk) ExecX(ctx context.Context) {
	if err := poscb.Exec(ctx); err != nil {
		panic(err)
	}
}
