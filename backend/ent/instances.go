// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/instances"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Instances is the model entity for the Instances schema.
type Instances struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "Name" field.
	Name string `json:"Name,omitempty"`
	// CPU holds the value of the "CPU" field.
	CPU int `json:"CPU,omitempty"`
	// RAMGo holds the value of the "Ram_Go" field.
	RAMGo int `json:"Ram_Go,omitempty"`
	// StockageGo holds the value of the "Stockage_Go" field.
	StockageGo int `json:"Stockage_Go,omitempty"`
	// GPU holds the value of the "GPU" field.
	GPU string `json:"GPU,omitempty"`
	// Type holds the value of the "Type" field.
	Type string `json:"Type,omitempty"`
	// Price holds the value of the "Price" field.
	Price float64 `json:"Price,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InstancesQuery when eager-loading is set.
	Edges        InstancesEdges `json:"edges"`
	selectValues sql.SelectValues
}

// InstancesEdges holds the relations/edges for other nodes in the graph.
type InstancesEdges struct {
	// PanierInstances holds the value of the panierInstances edge.
	PanierInstances []*PanierInstances `json:"panierInstances,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PanierInstancesOrErr returns the PanierInstances value or an error if the edge
// was not loaded in eager-loading.
func (e InstancesEdges) PanierInstancesOrErr() ([]*PanierInstances, error) {
	if e.loadedTypes[0] {
		return e.PanierInstances, nil
	}
	return nil, &NotLoadedError{edge: "panierInstances"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Instances) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case instances.FieldPrice:
			values[i] = new(sql.NullFloat64)
		case instances.FieldID, instances.FieldCPU, instances.FieldRAMGo, instances.FieldStockageGo:
			values[i] = new(sql.NullInt64)
		case instances.FieldName, instances.FieldGPU, instances.FieldType:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Instances fields.
func (i *Instances) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case instances.FieldID:
			value, ok := values[j].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			i.ID = int(value.Int64)
		case instances.FieldName:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Name", values[j])
			} else if value.Valid {
				i.Name = value.String
			}
		case instances.FieldCPU:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field CPU", values[j])
			} else if value.Valid {
				i.CPU = int(value.Int64)
			}
		case instances.FieldRAMGo:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Ram_Go", values[j])
			} else if value.Valid {
				i.RAMGo = int(value.Int64)
			}
		case instances.FieldStockageGo:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Stockage_Go", values[j])
			} else if value.Valid {
				i.StockageGo = int(value.Int64)
			}
		case instances.FieldGPU:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field GPU", values[j])
			} else if value.Valid {
				i.GPU = value.String
			}
		case instances.FieldType:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Type", values[j])
			} else if value.Valid {
				i.Type = value.String
			}
		case instances.FieldPrice:
			if value, ok := values[j].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field Price", values[j])
			} else if value.Valid {
				i.Price = value.Float64
			}
		default:
			i.selectValues.Set(columns[j], values[j])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Instances.
// This includes values selected through modifiers, order, etc.
func (i *Instances) Value(name string) (ent.Value, error) {
	return i.selectValues.Get(name)
}

// QueryPanierInstances queries the "panierInstances" edge of the Instances entity.
func (i *Instances) QueryPanierInstances() *PanierInstancesQuery {
	return NewInstancesClient(i.config).QueryPanierInstances(i)
}

// Update returns a builder for updating this Instances.
// Note that you need to call Instances.Unwrap() before calling this method if this Instances
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Instances) Update() *InstancesUpdateOne {
	return NewInstancesClient(i.config).UpdateOne(i)
}

// Unwrap unwraps the Instances entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Instances) Unwrap() *Instances {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Instances is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Instances) String() string {
	var builder strings.Builder
	builder.WriteString("Instances(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("Name=")
	builder.WriteString(i.Name)
	builder.WriteString(", ")
	builder.WriteString("CPU=")
	builder.WriteString(fmt.Sprintf("%v", i.CPU))
	builder.WriteString(", ")
	builder.WriteString("Ram_Go=")
	builder.WriteString(fmt.Sprintf("%v", i.RAMGo))
	builder.WriteString(", ")
	builder.WriteString("Stockage_Go=")
	builder.WriteString(fmt.Sprintf("%v", i.StockageGo))
	builder.WriteString(", ")
	builder.WriteString("GPU=")
	builder.WriteString(i.GPU)
	builder.WriteString(", ")
	builder.WriteString("Type=")
	builder.WriteString(i.Type)
	builder.WriteString(", ")
	builder.WriteString("Price=")
	builder.WriteString(fmt.Sprintf("%v", i.Price))
	builder.WriteByte(')')
	return builder.String()
}

// InstancesSlice is a parsable slice of Instances.
type InstancesSlice []*Instances
