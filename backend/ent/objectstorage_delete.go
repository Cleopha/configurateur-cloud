// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/objectstorage"
	"backend/ent/predicate"
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ObjectStorageDelete is the builder for deleting a ObjectStorage entity.
type ObjectStorageDelete struct {
	config
	hooks    []Hook
	mutation *ObjectStorageMutation
}

// Where appends a list predicates to the ObjectStorageDelete builder.
func (osd *ObjectStorageDelete) Where(ps ...predicate.ObjectStorage) *ObjectStorageDelete {
	osd.mutation.Where(ps...)
	return osd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (osd *ObjectStorageDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, osd.sqlExec, osd.mutation, osd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (osd *ObjectStorageDelete) ExecX(ctx context.Context) int {
	n, err := osd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (osd *ObjectStorageDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(objectstorage.Table, sqlgraph.NewFieldSpec(objectstorage.FieldID, field.TypeInt))
	if ps := osd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, osd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	osd.mutation.done = true
	return affected, err
}

// ObjectStorageDeleteOne is the builder for deleting a single ObjectStorage entity.
type ObjectStorageDeleteOne struct {
	osd *ObjectStorageDelete
}

// Where appends a list predicates to the ObjectStorageDelete builder.
func (osdo *ObjectStorageDeleteOne) Where(ps ...predicate.ObjectStorage) *ObjectStorageDeleteOne {
	osdo.osd.mutation.Where(ps...)
	return osdo
}

// Exec executes the deletion query.
func (osdo *ObjectStorageDeleteOne) Exec(ctx context.Context) error {
	n, err := osdo.osd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{objectstorage.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (osdo *ObjectStorageDeleteOne) ExecX(ctx context.Context) {
	if err := osdo.Exec(ctx); err != nil {
		panic(err)
	}
}
