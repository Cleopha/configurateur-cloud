// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/instances"
	"backend/ent/panier"
	"backend/ent/panierinstances"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PanierInstances is the model entity for the PanierInstances schema.
type PanierInstances struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Quantity holds the value of the "quantity" field.
	Quantity int `json:"quantity,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PanierInstancesQuery when eager-loading is set.
	Edges                   PanierInstancesEdges `json:"edges"`
	instance_id             *int
	panier_panier_instances *int
	selectValues            sql.SelectValues
}

// PanierInstancesEdges holds the relations/edges for other nodes in the graph.
type PanierInstancesEdges struct {
	// Panier holds the value of the panier edge.
	Panier *Panier `json:"panier,omitempty"`
	// Instance holds the value of the instance edge.
	Instance *Instances `json:"instance,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// PanierOrErr returns the Panier value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PanierInstancesEdges) PanierOrErr() (*Panier, error) {
	if e.loadedTypes[0] {
		if e.Panier == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: panier.Label}
		}
		return e.Panier, nil
	}
	return nil, &NotLoadedError{edge: "panier"}
}

// InstanceOrErr returns the Instance value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PanierInstancesEdges) InstanceOrErr() (*Instances, error) {
	if e.loadedTypes[1] {
		if e.Instance == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: instances.Label}
		}
		return e.Instance, nil
	}
	return nil, &NotLoadedError{edge: "instance"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PanierInstances) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case panierinstances.FieldID, panierinstances.FieldQuantity:
			values[i] = new(sql.NullInt64)
		case panierinstances.ForeignKeys[0]: // instance_id
			values[i] = new(sql.NullInt64)
		case panierinstances.ForeignKeys[1]: // panier_panier_instances
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PanierInstances fields.
func (pi *PanierInstances) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case panierinstances.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pi.ID = int(value.Int64)
		case panierinstances.FieldQuantity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[i])
			} else if value.Valid {
				pi.Quantity = int(value.Int64)
			}
		case panierinstances.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field instance_id", value)
			} else if value.Valid {
				pi.instance_id = new(int)
				*pi.instance_id = int(value.Int64)
			}
		case panierinstances.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field panier_panier_instances", value)
			} else if value.Valid {
				pi.panier_panier_instances = new(int)
				*pi.panier_panier_instances = int(value.Int64)
			}
		default:
			pi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PanierInstances.
// This includes values selected through modifiers, order, etc.
func (pi *PanierInstances) Value(name string) (ent.Value, error) {
	return pi.selectValues.Get(name)
}

// QueryPanier queries the "panier" edge of the PanierInstances entity.
func (pi *PanierInstances) QueryPanier() *PanierQuery {
	return NewPanierInstancesClient(pi.config).QueryPanier(pi)
}

// QueryInstance queries the "instance" edge of the PanierInstances entity.
func (pi *PanierInstances) QueryInstance() *InstancesQuery {
	return NewPanierInstancesClient(pi.config).QueryInstance(pi)
}

// Update returns a builder for updating this PanierInstances.
// Note that you need to call PanierInstances.Unwrap() before calling this method if this PanierInstances
// was returned from a transaction, and the transaction was committed or rolled back.
func (pi *PanierInstances) Update() *PanierInstancesUpdateOne {
	return NewPanierInstancesClient(pi.config).UpdateOne(pi)
}

// Unwrap unwraps the PanierInstances entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pi *PanierInstances) Unwrap() *PanierInstances {
	_tx, ok := pi.config.driver.(*txDriver)
	if !ok {
		panic("ent: PanierInstances is not a transactional entity")
	}
	pi.config.driver = _tx.drv
	return pi
}

// String implements the fmt.Stringer.
func (pi *PanierInstances) String() string {
	var builder strings.Builder
	builder.WriteString("PanierInstances(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pi.ID))
	builder.WriteString("quantity=")
	builder.WriteString(fmt.Sprintf("%v", pi.Quantity))
	builder.WriteByte(')')
	return builder.String()
}

// PanierInstancesSlice is a parsable slice of PanierInstances.
type PanierInstancesSlice []*PanierInstances
