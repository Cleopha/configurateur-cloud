// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/ipaddress"
	"backend/ent/panier"
	"backend/ent/panieripaddress"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PanierIPAddress is the model entity for the PanierIPAddress schema.
type PanierIPAddress struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Quantity holds the value of the "quantity" field.
	Quantity int `json:"quantity,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PanierIPAddressQuery when eager-loading is set.
	Edges                    PanierIPAddressEdges `json:"edges"`
	_IPAddress_id            *int
	panier_panier_ip_address *int
	selectValues             sql.SelectValues
}

// PanierIPAddressEdges holds the relations/edges for other nodes in the graph.
type PanierIPAddressEdges struct {
	// Panier holds the value of the panier edge.
	Panier *Panier `json:"panier,omitempty"`
	// IPAddress holds the value of the IPAddress edge.
	IPAddress *IPAddress `json:"IPAddress,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// PanierOrErr returns the Panier value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PanierIPAddressEdges) PanierOrErr() (*Panier, error) {
	if e.loadedTypes[0] {
		if e.Panier == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: panier.Label}
		}
		return e.Panier, nil
	}
	return nil, &NotLoadedError{edge: "panier"}
}

// IPAddressOrErr returns the IPAddress value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PanierIPAddressEdges) IPAddressOrErr() (*IPAddress, error) {
	if e.loadedTypes[1] {
		if e.IPAddress == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: ipaddress.Label}
		}
		return e.IPAddress, nil
	}
	return nil, &NotLoadedError{edge: "IPAddress"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PanierIPAddress) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case panieripaddress.FieldID, panieripaddress.FieldQuantity:
			values[i] = new(sql.NullInt64)
		case panieripaddress.ForeignKeys[0]: // _IPAddress_id
			values[i] = new(sql.NullInt64)
		case panieripaddress.ForeignKeys[1]: // panier_panier_ip_address
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PanierIPAddress fields.
func (pia *PanierIPAddress) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case panieripaddress.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pia.ID = int(value.Int64)
		case panieripaddress.FieldQuantity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[i])
			} else if value.Valid {
				pia.Quantity = int(value.Int64)
			}
		case panieripaddress.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field _IPAddress_id", value)
			} else if value.Valid {
				pia._IPAddress_id = new(int)
				*pia._IPAddress_id = int(value.Int64)
			}
		case panieripaddress.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field panier_panier_ip_address", value)
			} else if value.Valid {
				pia.panier_panier_ip_address = new(int)
				*pia.panier_panier_ip_address = int(value.Int64)
			}
		default:
			pia.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PanierIPAddress.
// This includes values selected through modifiers, order, etc.
func (pia *PanierIPAddress) Value(name string) (ent.Value, error) {
	return pia.selectValues.Get(name)
}

// QueryPanier queries the "panier" edge of the PanierIPAddress entity.
func (pia *PanierIPAddress) QueryPanier() *PanierQuery {
	return NewPanierIPAddressClient(pia.config).QueryPanier(pia)
}

// QueryIPAddress queries the "IPAddress" edge of the PanierIPAddress entity.
func (pia *PanierIPAddress) QueryIPAddress() *IPAddressQuery {
	return NewPanierIPAddressClient(pia.config).QueryIPAddress(pia)
}

// Update returns a builder for updating this PanierIPAddress.
// Note that you need to call PanierIPAddress.Unwrap() before calling this method if this PanierIPAddress
// was returned from a transaction, and the transaction was committed or rolled back.
func (pia *PanierIPAddress) Update() *PanierIPAddressUpdateOne {
	return NewPanierIPAddressClient(pia.config).UpdateOne(pia)
}

// Unwrap unwraps the PanierIPAddress entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pia *PanierIPAddress) Unwrap() *PanierIPAddress {
	_tx, ok := pia.config.driver.(*txDriver)
	if !ok {
		panic("ent: PanierIPAddress is not a transactional entity")
	}
	pia.config.driver = _tx.drv
	return pia
}

// String implements the fmt.Stringer.
func (pia *PanierIPAddress) String() string {
	var builder strings.Builder
	builder.WriteString("PanierIPAddress(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pia.ID))
	builder.WriteString("quantity=")
	builder.WriteString(fmt.Sprintf("%v", pia.Quantity))
	builder.WriteByte(')')
	return builder.String()
}

// PanierIPAddresses is a parsable slice of PanierIPAddress.
type PanierIPAddresses []*PanierIPAddress
