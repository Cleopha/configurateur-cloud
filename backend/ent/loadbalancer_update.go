// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/loadbalancer"
	"backend/ent/panierloadbalancer"
	"backend/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LoadBalancerUpdate is the builder for updating LoadBalancer entities.
type LoadBalancerUpdate struct {
	config
	hooks    []Hook
	mutation *LoadBalancerMutation
}

// Where appends a list predicates to the LoadBalancerUpdate builder.
func (lbu *LoadBalancerUpdate) Where(ps ...predicate.LoadBalancer) *LoadBalancerUpdate {
	lbu.mutation.Where(ps...)
	return lbu
}

// SetName sets the "Name" field.
func (lbu *LoadBalancerUpdate) SetName(s string) *LoadBalancerUpdate {
	lbu.mutation.SetName(s)
	return lbu
}

// SetPrice sets the "Price" field.
func (lbu *LoadBalancerUpdate) SetPrice(f float64) *LoadBalancerUpdate {
	lbu.mutation.ResetPrice()
	lbu.mutation.SetPrice(f)
	return lbu
}

// AddPrice adds f to the "Price" field.
func (lbu *LoadBalancerUpdate) AddPrice(f float64) *LoadBalancerUpdate {
	lbu.mutation.AddPrice(f)
	return lbu
}

// AddPanierLoadBalancerIDs adds the "panierLoadBalancer" edge to the PanierLoadBalancer entity by IDs.
func (lbu *LoadBalancerUpdate) AddPanierLoadBalancerIDs(ids ...int) *LoadBalancerUpdate {
	lbu.mutation.AddPanierLoadBalancerIDs(ids...)
	return lbu
}

// AddPanierLoadBalancer adds the "panierLoadBalancer" edges to the PanierLoadBalancer entity.
func (lbu *LoadBalancerUpdate) AddPanierLoadBalancer(p ...*PanierLoadBalancer) *LoadBalancerUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return lbu.AddPanierLoadBalancerIDs(ids...)
}

// Mutation returns the LoadBalancerMutation object of the builder.
func (lbu *LoadBalancerUpdate) Mutation() *LoadBalancerMutation {
	return lbu.mutation
}

// ClearPanierLoadBalancer clears all "panierLoadBalancer" edges to the PanierLoadBalancer entity.
func (lbu *LoadBalancerUpdate) ClearPanierLoadBalancer() *LoadBalancerUpdate {
	lbu.mutation.ClearPanierLoadBalancer()
	return lbu
}

// RemovePanierLoadBalancerIDs removes the "panierLoadBalancer" edge to PanierLoadBalancer entities by IDs.
func (lbu *LoadBalancerUpdate) RemovePanierLoadBalancerIDs(ids ...int) *LoadBalancerUpdate {
	lbu.mutation.RemovePanierLoadBalancerIDs(ids...)
	return lbu
}

// RemovePanierLoadBalancer removes "panierLoadBalancer" edges to PanierLoadBalancer entities.
func (lbu *LoadBalancerUpdate) RemovePanierLoadBalancer(p ...*PanierLoadBalancer) *LoadBalancerUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return lbu.RemovePanierLoadBalancerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lbu *LoadBalancerUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, lbu.sqlSave, lbu.mutation, lbu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lbu *LoadBalancerUpdate) SaveX(ctx context.Context) int {
	affected, err := lbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lbu *LoadBalancerUpdate) Exec(ctx context.Context) error {
	_, err := lbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lbu *LoadBalancerUpdate) ExecX(ctx context.Context) {
	if err := lbu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (lbu *LoadBalancerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(loadbalancer.Table, loadbalancer.Columns, sqlgraph.NewFieldSpec(loadbalancer.FieldID, field.TypeInt))
	if ps := lbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lbu.mutation.Name(); ok {
		_spec.SetField(loadbalancer.FieldName, field.TypeString, value)
	}
	if value, ok := lbu.mutation.Price(); ok {
		_spec.SetField(loadbalancer.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := lbu.mutation.AddedPrice(); ok {
		_spec.AddField(loadbalancer.FieldPrice, field.TypeFloat64, value)
	}
	if lbu.mutation.PanierLoadBalancerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   loadbalancer.PanierLoadBalancerTable,
			Columns: []string{loadbalancer.PanierLoadBalancerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panierloadbalancer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lbu.mutation.RemovedPanierLoadBalancerIDs(); len(nodes) > 0 && !lbu.mutation.PanierLoadBalancerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   loadbalancer.PanierLoadBalancerTable,
			Columns: []string{loadbalancer.PanierLoadBalancerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panierloadbalancer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lbu.mutation.PanierLoadBalancerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   loadbalancer.PanierLoadBalancerTable,
			Columns: []string{loadbalancer.PanierLoadBalancerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panierloadbalancer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{loadbalancer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lbu.mutation.done = true
	return n, nil
}

// LoadBalancerUpdateOne is the builder for updating a single LoadBalancer entity.
type LoadBalancerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LoadBalancerMutation
}

// SetName sets the "Name" field.
func (lbuo *LoadBalancerUpdateOne) SetName(s string) *LoadBalancerUpdateOne {
	lbuo.mutation.SetName(s)
	return lbuo
}

// SetPrice sets the "Price" field.
func (lbuo *LoadBalancerUpdateOne) SetPrice(f float64) *LoadBalancerUpdateOne {
	lbuo.mutation.ResetPrice()
	lbuo.mutation.SetPrice(f)
	return lbuo
}

// AddPrice adds f to the "Price" field.
func (lbuo *LoadBalancerUpdateOne) AddPrice(f float64) *LoadBalancerUpdateOne {
	lbuo.mutation.AddPrice(f)
	return lbuo
}

// AddPanierLoadBalancerIDs adds the "panierLoadBalancer" edge to the PanierLoadBalancer entity by IDs.
func (lbuo *LoadBalancerUpdateOne) AddPanierLoadBalancerIDs(ids ...int) *LoadBalancerUpdateOne {
	lbuo.mutation.AddPanierLoadBalancerIDs(ids...)
	return lbuo
}

// AddPanierLoadBalancer adds the "panierLoadBalancer" edges to the PanierLoadBalancer entity.
func (lbuo *LoadBalancerUpdateOne) AddPanierLoadBalancer(p ...*PanierLoadBalancer) *LoadBalancerUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return lbuo.AddPanierLoadBalancerIDs(ids...)
}

// Mutation returns the LoadBalancerMutation object of the builder.
func (lbuo *LoadBalancerUpdateOne) Mutation() *LoadBalancerMutation {
	return lbuo.mutation
}

// ClearPanierLoadBalancer clears all "panierLoadBalancer" edges to the PanierLoadBalancer entity.
func (lbuo *LoadBalancerUpdateOne) ClearPanierLoadBalancer() *LoadBalancerUpdateOne {
	lbuo.mutation.ClearPanierLoadBalancer()
	return lbuo
}

// RemovePanierLoadBalancerIDs removes the "panierLoadBalancer" edge to PanierLoadBalancer entities by IDs.
func (lbuo *LoadBalancerUpdateOne) RemovePanierLoadBalancerIDs(ids ...int) *LoadBalancerUpdateOne {
	lbuo.mutation.RemovePanierLoadBalancerIDs(ids...)
	return lbuo
}

// RemovePanierLoadBalancer removes "panierLoadBalancer" edges to PanierLoadBalancer entities.
func (lbuo *LoadBalancerUpdateOne) RemovePanierLoadBalancer(p ...*PanierLoadBalancer) *LoadBalancerUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return lbuo.RemovePanierLoadBalancerIDs(ids...)
}

// Where appends a list predicates to the LoadBalancerUpdate builder.
func (lbuo *LoadBalancerUpdateOne) Where(ps ...predicate.LoadBalancer) *LoadBalancerUpdateOne {
	lbuo.mutation.Where(ps...)
	return lbuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lbuo *LoadBalancerUpdateOne) Select(field string, fields ...string) *LoadBalancerUpdateOne {
	lbuo.fields = append([]string{field}, fields...)
	return lbuo
}

// Save executes the query and returns the updated LoadBalancer entity.
func (lbuo *LoadBalancerUpdateOne) Save(ctx context.Context) (*LoadBalancer, error) {
	return withHooks(ctx, lbuo.sqlSave, lbuo.mutation, lbuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lbuo *LoadBalancerUpdateOne) SaveX(ctx context.Context) *LoadBalancer {
	node, err := lbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lbuo *LoadBalancerUpdateOne) Exec(ctx context.Context) error {
	_, err := lbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lbuo *LoadBalancerUpdateOne) ExecX(ctx context.Context) {
	if err := lbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (lbuo *LoadBalancerUpdateOne) sqlSave(ctx context.Context) (_node *LoadBalancer, err error) {
	_spec := sqlgraph.NewUpdateSpec(loadbalancer.Table, loadbalancer.Columns, sqlgraph.NewFieldSpec(loadbalancer.FieldID, field.TypeInt))
	id, ok := lbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LoadBalancer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := lbuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, loadbalancer.FieldID)
		for _, f := range fields {
			if !loadbalancer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != loadbalancer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lbuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lbuo.mutation.Name(); ok {
		_spec.SetField(loadbalancer.FieldName, field.TypeString, value)
	}
	if value, ok := lbuo.mutation.Price(); ok {
		_spec.SetField(loadbalancer.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := lbuo.mutation.AddedPrice(); ok {
		_spec.AddField(loadbalancer.FieldPrice, field.TypeFloat64, value)
	}
	if lbuo.mutation.PanierLoadBalancerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   loadbalancer.PanierLoadBalancerTable,
			Columns: []string{loadbalancer.PanierLoadBalancerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panierloadbalancer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lbuo.mutation.RemovedPanierLoadBalancerIDs(); len(nodes) > 0 && !lbuo.mutation.PanierLoadBalancerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   loadbalancer.PanierLoadBalancerTable,
			Columns: []string{loadbalancer.PanierLoadBalancerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panierloadbalancer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lbuo.mutation.PanierLoadBalancerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   loadbalancer.PanierLoadBalancerTable,
			Columns: []string{loadbalancer.PanierLoadBalancerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panierloadbalancer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &LoadBalancer{config: lbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{loadbalancer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	lbuo.mutation.done = true
	return _node, nil
}
