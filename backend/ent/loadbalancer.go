// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/loadbalancer"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// LoadBalancer is the model entity for the LoadBalancer schema.
type LoadBalancer struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "Name" field.
	Name string `json:"Name,omitempty"`
	// Price holds the value of the "Price" field.
	Price float64 `json:"Price,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LoadBalancerQuery when eager-loading is set.
	Edges        LoadBalancerEdges `json:"edges"`
	selectValues sql.SelectValues
}

// LoadBalancerEdges holds the relations/edges for other nodes in the graph.
type LoadBalancerEdges struct {
	// PanierLoadBalancer holds the value of the panierLoadBalancer edge.
	PanierLoadBalancer []*PanierLoadBalancer `json:"panierLoadBalancer,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PanierLoadBalancerOrErr returns the PanierLoadBalancer value or an error if the edge
// was not loaded in eager-loading.
func (e LoadBalancerEdges) PanierLoadBalancerOrErr() ([]*PanierLoadBalancer, error) {
	if e.loadedTypes[0] {
		return e.PanierLoadBalancer, nil
	}
	return nil, &NotLoadedError{edge: "panierLoadBalancer"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LoadBalancer) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case loadbalancer.FieldPrice:
			values[i] = new(sql.NullFloat64)
		case loadbalancer.FieldID:
			values[i] = new(sql.NullInt64)
		case loadbalancer.FieldName:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LoadBalancer fields.
func (lb *LoadBalancer) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case loadbalancer.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			lb.ID = int(value.Int64)
		case loadbalancer.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Name", values[i])
			} else if value.Valid {
				lb.Name = value.String
			}
		case loadbalancer.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field Price", values[i])
			} else if value.Valid {
				lb.Price = value.Float64
			}
		default:
			lb.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the LoadBalancer.
// This includes values selected through modifiers, order, etc.
func (lb *LoadBalancer) Value(name string) (ent.Value, error) {
	return lb.selectValues.Get(name)
}

// QueryPanierLoadBalancer queries the "panierLoadBalancer" edge of the LoadBalancer entity.
func (lb *LoadBalancer) QueryPanierLoadBalancer() *PanierLoadBalancerQuery {
	return NewLoadBalancerClient(lb.config).QueryPanierLoadBalancer(lb)
}

// Update returns a builder for updating this LoadBalancer.
// Note that you need to call LoadBalancer.Unwrap() before calling this method if this LoadBalancer
// was returned from a transaction, and the transaction was committed or rolled back.
func (lb *LoadBalancer) Update() *LoadBalancerUpdateOne {
	return NewLoadBalancerClient(lb.config).UpdateOne(lb)
}

// Unwrap unwraps the LoadBalancer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (lb *LoadBalancer) Unwrap() *LoadBalancer {
	_tx, ok := lb.config.driver.(*txDriver)
	if !ok {
		panic("ent: LoadBalancer is not a transactional entity")
	}
	lb.config.driver = _tx.drv
	return lb
}

// String implements the fmt.Stringer.
func (lb *LoadBalancer) String() string {
	var builder strings.Builder
	builder.WriteString("LoadBalancer(")
	builder.WriteString(fmt.Sprintf("id=%v, ", lb.ID))
	builder.WriteString("Name=")
	builder.WriteString(lb.Name)
	builder.WriteString(", ")
	builder.WriteString("Price=")
	builder.WriteString(fmt.Sprintf("%v", lb.Price))
	builder.WriteByte(')')
	return builder.String()
}

// LoadBalancers is a parsable slice of LoadBalancer.
type LoadBalancers []*LoadBalancer
