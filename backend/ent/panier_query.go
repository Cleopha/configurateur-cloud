// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/panier"
	"backend/ent/panierblockstorage"
	"backend/ent/panierinstances"
	"backend/ent/panieripaddress"
	"backend/ent/panierloadbalancer"
	"backend/ent/panierobjectstorage"
	"backend/ent/predicate"
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PanierQuery is the builder for querying Panier entities.
type PanierQuery struct {
	config
	ctx                     *QueryContext
	order                   []panier.OrderOption
	inters                  []Interceptor
	predicates              []predicate.Panier
	withPanierInstances     *PanierInstancesQuery
	withPanierBlockStorage  *PanierBlockStorageQuery
	withPanierIPAddress     *PanierIPAddressQuery
	withPanierLoadBalancer  *PanierLoadBalancerQuery
	withPanierObjectStorage *PanierObjectStorageQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PanierQuery builder.
func (pq *PanierQuery) Where(ps ...predicate.Panier) *PanierQuery {
	pq.predicates = append(pq.predicates, ps...)
	return pq
}

// Limit the number of records to be returned by this query.
func (pq *PanierQuery) Limit(limit int) *PanierQuery {
	pq.ctx.Limit = &limit
	return pq
}

// Offset to start from.
func (pq *PanierQuery) Offset(offset int) *PanierQuery {
	pq.ctx.Offset = &offset
	return pq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pq *PanierQuery) Unique(unique bool) *PanierQuery {
	pq.ctx.Unique = &unique
	return pq
}

// Order specifies how the records should be ordered.
func (pq *PanierQuery) Order(o ...panier.OrderOption) *PanierQuery {
	pq.order = append(pq.order, o...)
	return pq
}

// QueryPanierInstances chains the current query on the "panierInstances" edge.
func (pq *PanierQuery) QueryPanierInstances() *PanierInstancesQuery {
	query := (&PanierInstancesClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(panier.Table, panier.FieldID, selector),
			sqlgraph.To(panierinstances.Table, panierinstances.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, panier.PanierInstancesTable, panier.PanierInstancesColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPanierBlockStorage chains the current query on the "panierBlockStorage" edge.
func (pq *PanierQuery) QueryPanierBlockStorage() *PanierBlockStorageQuery {
	query := (&PanierBlockStorageClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(panier.Table, panier.FieldID, selector),
			sqlgraph.To(panierblockstorage.Table, panierblockstorage.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, panier.PanierBlockStorageTable, panier.PanierBlockStorageColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPanierIPAddress chains the current query on the "panierIPAddress" edge.
func (pq *PanierQuery) QueryPanierIPAddress() *PanierIPAddressQuery {
	query := (&PanierIPAddressClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(panier.Table, panier.FieldID, selector),
			sqlgraph.To(panieripaddress.Table, panieripaddress.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, panier.PanierIPAddressTable, panier.PanierIPAddressColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPanierLoadBalancer chains the current query on the "panierLoadBalancer" edge.
func (pq *PanierQuery) QueryPanierLoadBalancer() *PanierLoadBalancerQuery {
	query := (&PanierLoadBalancerClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(panier.Table, panier.FieldID, selector),
			sqlgraph.To(panierloadbalancer.Table, panierloadbalancer.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, panier.PanierLoadBalancerTable, panier.PanierLoadBalancerColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPanierObjectStorage chains the current query on the "panierObjectStorage" edge.
func (pq *PanierQuery) QueryPanierObjectStorage() *PanierObjectStorageQuery {
	query := (&PanierObjectStorageClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(panier.Table, panier.FieldID, selector),
			sqlgraph.To(panierobjectstorage.Table, panierobjectstorage.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, panier.PanierObjectStorageTable, panier.PanierObjectStorageColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Panier entity from the query.
// Returns a *NotFoundError when no Panier was found.
func (pq *PanierQuery) First(ctx context.Context) (*Panier, error) {
	nodes, err := pq.Limit(1).All(setContextOp(ctx, pq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{panier.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pq *PanierQuery) FirstX(ctx context.Context) *Panier {
	node, err := pq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Panier ID from the query.
// Returns a *NotFoundError when no Panier ID was found.
func (pq *PanierQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = pq.Limit(1).IDs(setContextOp(ctx, pq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{panier.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pq *PanierQuery) FirstIDX(ctx context.Context) int {
	id, err := pq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Panier entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Panier entity is found.
// Returns a *NotFoundError when no Panier entities are found.
func (pq *PanierQuery) Only(ctx context.Context) (*Panier, error) {
	nodes, err := pq.Limit(2).All(setContextOp(ctx, pq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{panier.Label}
	default:
		return nil, &NotSingularError{panier.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pq *PanierQuery) OnlyX(ctx context.Context) *Panier {
	node, err := pq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Panier ID in the query.
// Returns a *NotSingularError when more than one Panier ID is found.
// Returns a *NotFoundError when no entities are found.
func (pq *PanierQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = pq.Limit(2).IDs(setContextOp(ctx, pq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{panier.Label}
	default:
		err = &NotSingularError{panier.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pq *PanierQuery) OnlyIDX(ctx context.Context) int {
	id, err := pq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Paniers.
func (pq *PanierQuery) All(ctx context.Context) ([]*Panier, error) {
	ctx = setContextOp(ctx, pq.ctx, "All")
	if err := pq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Panier, *PanierQuery]()
	return withInterceptors[[]*Panier](ctx, pq, qr, pq.inters)
}

// AllX is like All, but panics if an error occurs.
func (pq *PanierQuery) AllX(ctx context.Context) []*Panier {
	nodes, err := pq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Panier IDs.
func (pq *PanierQuery) IDs(ctx context.Context) (ids []int, err error) {
	if pq.ctx.Unique == nil && pq.path != nil {
		pq.Unique(true)
	}
	ctx = setContextOp(ctx, pq.ctx, "IDs")
	if err = pq.Select(panier.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pq *PanierQuery) IDsX(ctx context.Context) []int {
	ids, err := pq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pq *PanierQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, pq.ctx, "Count")
	if err := pq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, pq, querierCount[*PanierQuery](), pq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (pq *PanierQuery) CountX(ctx context.Context) int {
	count, err := pq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pq *PanierQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, pq.ctx, "Exist")
	switch _, err := pq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (pq *PanierQuery) ExistX(ctx context.Context) bool {
	exist, err := pq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PanierQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pq *PanierQuery) Clone() *PanierQuery {
	if pq == nil {
		return nil
	}
	return &PanierQuery{
		config:                  pq.config,
		ctx:                     pq.ctx.Clone(),
		order:                   append([]panier.OrderOption{}, pq.order...),
		inters:                  append([]Interceptor{}, pq.inters...),
		predicates:              append([]predicate.Panier{}, pq.predicates...),
		withPanierInstances:     pq.withPanierInstances.Clone(),
		withPanierBlockStorage:  pq.withPanierBlockStorage.Clone(),
		withPanierIPAddress:     pq.withPanierIPAddress.Clone(),
		withPanierLoadBalancer:  pq.withPanierLoadBalancer.Clone(),
		withPanierObjectStorage: pq.withPanierObjectStorage.Clone(),
		// clone intermediate query.
		sql:  pq.sql.Clone(),
		path: pq.path,
	}
}

// WithPanierInstances tells the query-builder to eager-load the nodes that are connected to
// the "panierInstances" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PanierQuery) WithPanierInstances(opts ...func(*PanierInstancesQuery)) *PanierQuery {
	query := (&PanierInstancesClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withPanierInstances = query
	return pq
}

// WithPanierBlockStorage tells the query-builder to eager-load the nodes that are connected to
// the "panierBlockStorage" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PanierQuery) WithPanierBlockStorage(opts ...func(*PanierBlockStorageQuery)) *PanierQuery {
	query := (&PanierBlockStorageClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withPanierBlockStorage = query
	return pq
}

// WithPanierIPAddress tells the query-builder to eager-load the nodes that are connected to
// the "panierIPAddress" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PanierQuery) WithPanierIPAddress(opts ...func(*PanierIPAddressQuery)) *PanierQuery {
	query := (&PanierIPAddressClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withPanierIPAddress = query
	return pq
}

// WithPanierLoadBalancer tells the query-builder to eager-load the nodes that are connected to
// the "panierLoadBalancer" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PanierQuery) WithPanierLoadBalancer(opts ...func(*PanierLoadBalancerQuery)) *PanierQuery {
	query := (&PanierLoadBalancerClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withPanierLoadBalancer = query
	return pq
}

// WithPanierObjectStorage tells the query-builder to eager-load the nodes that are connected to
// the "panierObjectStorage" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PanierQuery) WithPanierObjectStorage(opts ...func(*PanierObjectStorageQuery)) *PanierQuery {
	query := (&PanierObjectStorageClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withPanierObjectStorage = query
	return pq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UID uuid.UUID `json:"uid,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Panier.Query().
//		GroupBy(panier.FieldUID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (pq *PanierQuery) GroupBy(field string, fields ...string) *PanierGroupBy {
	pq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PanierGroupBy{build: pq}
	grbuild.flds = &pq.ctx.Fields
	grbuild.label = panier.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UID uuid.UUID `json:"uid,omitempty"`
//	}
//
//	client.Panier.Query().
//		Select(panier.FieldUID).
//		Scan(ctx, &v)
func (pq *PanierQuery) Select(fields ...string) *PanierSelect {
	pq.ctx.Fields = append(pq.ctx.Fields, fields...)
	sbuild := &PanierSelect{PanierQuery: pq}
	sbuild.label = panier.Label
	sbuild.flds, sbuild.scan = &pq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PanierSelect configured with the given aggregations.
func (pq *PanierQuery) Aggregate(fns ...AggregateFunc) *PanierSelect {
	return pq.Select().Aggregate(fns...)
}

func (pq *PanierQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range pq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, pq); err != nil {
				return err
			}
		}
	}
	for _, f := range pq.ctx.Fields {
		if !panier.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if pq.path != nil {
		prev, err := pq.path(ctx)
		if err != nil {
			return err
		}
		pq.sql = prev
	}
	return nil
}

func (pq *PanierQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Panier, error) {
	var (
		nodes       = []*Panier{}
		_spec       = pq.querySpec()
		loadedTypes = [5]bool{
			pq.withPanierInstances != nil,
			pq.withPanierBlockStorage != nil,
			pq.withPanierIPAddress != nil,
			pq.withPanierLoadBalancer != nil,
			pq.withPanierObjectStorage != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Panier).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Panier{config: pq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, pq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := pq.withPanierInstances; query != nil {
		if err := pq.loadPanierInstances(ctx, query, nodes,
			func(n *Panier) { n.Edges.PanierInstances = []*PanierInstances{} },
			func(n *Panier, e *PanierInstances) { n.Edges.PanierInstances = append(n.Edges.PanierInstances, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withPanierBlockStorage; query != nil {
		if err := pq.loadPanierBlockStorage(ctx, query, nodes,
			func(n *Panier) { n.Edges.PanierBlockStorage = []*PanierBlockStorage{} },
			func(n *Panier, e *PanierBlockStorage) {
				n.Edges.PanierBlockStorage = append(n.Edges.PanierBlockStorage, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := pq.withPanierIPAddress; query != nil {
		if err := pq.loadPanierIPAddress(ctx, query, nodes,
			func(n *Panier) { n.Edges.PanierIPAddress = []*PanierIPAddress{} },
			func(n *Panier, e *PanierIPAddress) { n.Edges.PanierIPAddress = append(n.Edges.PanierIPAddress, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withPanierLoadBalancer; query != nil {
		if err := pq.loadPanierLoadBalancer(ctx, query, nodes,
			func(n *Panier) { n.Edges.PanierLoadBalancer = []*PanierLoadBalancer{} },
			func(n *Panier, e *PanierLoadBalancer) {
				n.Edges.PanierLoadBalancer = append(n.Edges.PanierLoadBalancer, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := pq.withPanierObjectStorage; query != nil {
		if err := pq.loadPanierObjectStorage(ctx, query, nodes,
			func(n *Panier) { n.Edges.PanierObjectStorage = []*PanierObjectStorage{} },
			func(n *Panier, e *PanierObjectStorage) {
				n.Edges.PanierObjectStorage = append(n.Edges.PanierObjectStorage, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (pq *PanierQuery) loadPanierInstances(ctx context.Context, query *PanierInstancesQuery, nodes []*Panier, init func(*Panier), assign func(*Panier, *PanierInstances)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Panier)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.PanierInstances(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(panier.PanierInstancesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.panier_panier_instances
		if fk == nil {
			return fmt.Errorf(`foreign-key "panier_panier_instances" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "panier_panier_instances" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *PanierQuery) loadPanierBlockStorage(ctx context.Context, query *PanierBlockStorageQuery, nodes []*Panier, init func(*Panier), assign func(*Panier, *PanierBlockStorage)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Panier)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.PanierBlockStorage(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(panier.PanierBlockStorageColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.panier_panier_block_storage
		if fk == nil {
			return fmt.Errorf(`foreign-key "panier_panier_block_storage" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "panier_panier_block_storage" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *PanierQuery) loadPanierIPAddress(ctx context.Context, query *PanierIPAddressQuery, nodes []*Panier, init func(*Panier), assign func(*Panier, *PanierIPAddress)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Panier)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.PanierIPAddress(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(panier.PanierIPAddressColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.panier_panier_ip_address
		if fk == nil {
			return fmt.Errorf(`foreign-key "panier_panier_ip_address" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "panier_panier_ip_address" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *PanierQuery) loadPanierLoadBalancer(ctx context.Context, query *PanierLoadBalancerQuery, nodes []*Panier, init func(*Panier), assign func(*Panier, *PanierLoadBalancer)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Panier)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.PanierLoadBalancer(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(panier.PanierLoadBalancerColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.panier_panier_load_balancer
		if fk == nil {
			return fmt.Errorf(`foreign-key "panier_panier_load_balancer" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "panier_panier_load_balancer" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *PanierQuery) loadPanierObjectStorage(ctx context.Context, query *PanierObjectStorageQuery, nodes []*Panier, init func(*Panier), assign func(*Panier, *PanierObjectStorage)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Panier)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.PanierObjectStorage(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(panier.PanierObjectStorageColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.panier_panier_object_storage
		if fk == nil {
			return fmt.Errorf(`foreign-key "panier_panier_object_storage" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "panier_panier_object_storage" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (pq *PanierQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pq.querySpec()
	_spec.Node.Columns = pq.ctx.Fields
	if len(pq.ctx.Fields) > 0 {
		_spec.Unique = pq.ctx.Unique != nil && *pq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, pq.driver, _spec)
}

func (pq *PanierQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(panier.Table, panier.Columns, sqlgraph.NewFieldSpec(panier.FieldID, field.TypeInt))
	_spec.From = pq.sql
	if unique := pq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if pq.path != nil {
		_spec.Unique = true
	}
	if fields := pq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, panier.FieldID)
		for i := range fields {
			if fields[i] != panier.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := pq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pq *PanierQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pq.driver.Dialect())
	t1 := builder.Table(panier.Table)
	columns := pq.ctx.Fields
	if len(columns) == 0 {
		columns = panier.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pq.sql != nil {
		selector = pq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if pq.ctx.Unique != nil && *pq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range pq.predicates {
		p(selector)
	}
	for _, p := range pq.order {
		p(selector)
	}
	if offset := pq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// PanierGroupBy is the group-by builder for Panier entities.
type PanierGroupBy struct {
	selector
	build *PanierQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pgb *PanierGroupBy) Aggregate(fns ...AggregateFunc) *PanierGroupBy {
	pgb.fns = append(pgb.fns, fns...)
	return pgb
}

// Scan applies the selector query and scans the result into the given value.
func (pgb *PanierGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pgb.build.ctx, "GroupBy")
	if err := pgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PanierQuery, *PanierGroupBy](ctx, pgb.build, pgb, pgb.build.inters, v)
}

func (pgb *PanierGroupBy) sqlScan(ctx context.Context, root *PanierQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(pgb.fns))
	for _, fn := range pgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*pgb.flds)+len(pgb.fns))
		for _, f := range *pgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*pgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PanierSelect is the builder for selecting fields of Panier entities.
type PanierSelect struct {
	*PanierQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ps *PanierSelect) Aggregate(fns ...AggregateFunc) *PanierSelect {
	ps.fns = append(ps.fns, fns...)
	return ps
}

// Scan applies the selector query and scans the result into the given value.
func (ps *PanierSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ps.ctx, "Select")
	if err := ps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PanierQuery, *PanierSelect](ctx, ps.PanierQuery, ps, ps.inters, v)
}

func (ps *PanierSelect) sqlScan(ctx context.Context, root *PanierQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ps.fns))
	for _, fn := range ps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
