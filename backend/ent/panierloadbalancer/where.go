// Code generated by ent, DO NOT EDIT.

package panierloadbalancer

import (
	"backend/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PanierLoadBalancer {
	return predicate.PanierLoadBalancer(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PanierLoadBalancer {
	return predicate.PanierLoadBalancer(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PanierLoadBalancer {
	return predicate.PanierLoadBalancer(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PanierLoadBalancer {
	return predicate.PanierLoadBalancer(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PanierLoadBalancer {
	return predicate.PanierLoadBalancer(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PanierLoadBalancer {
	return predicate.PanierLoadBalancer(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PanierLoadBalancer {
	return predicate.PanierLoadBalancer(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PanierLoadBalancer {
	return predicate.PanierLoadBalancer(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PanierLoadBalancer {
	return predicate.PanierLoadBalancer(sql.FieldLTE(FieldID, id))
}

// Quantity applies equality check predicate on the "quantity" field. It's identical to QuantityEQ.
func Quantity(v int) predicate.PanierLoadBalancer {
	return predicate.PanierLoadBalancer(sql.FieldEQ(FieldQuantity, v))
}

// QuantityEQ applies the EQ predicate on the "quantity" field.
func QuantityEQ(v int) predicate.PanierLoadBalancer {
	return predicate.PanierLoadBalancer(sql.FieldEQ(FieldQuantity, v))
}

// QuantityNEQ applies the NEQ predicate on the "quantity" field.
func QuantityNEQ(v int) predicate.PanierLoadBalancer {
	return predicate.PanierLoadBalancer(sql.FieldNEQ(FieldQuantity, v))
}

// QuantityIn applies the In predicate on the "quantity" field.
func QuantityIn(vs ...int) predicate.PanierLoadBalancer {
	return predicate.PanierLoadBalancer(sql.FieldIn(FieldQuantity, vs...))
}

// QuantityNotIn applies the NotIn predicate on the "quantity" field.
func QuantityNotIn(vs ...int) predicate.PanierLoadBalancer {
	return predicate.PanierLoadBalancer(sql.FieldNotIn(FieldQuantity, vs...))
}

// QuantityGT applies the GT predicate on the "quantity" field.
func QuantityGT(v int) predicate.PanierLoadBalancer {
	return predicate.PanierLoadBalancer(sql.FieldGT(FieldQuantity, v))
}

// QuantityGTE applies the GTE predicate on the "quantity" field.
func QuantityGTE(v int) predicate.PanierLoadBalancer {
	return predicate.PanierLoadBalancer(sql.FieldGTE(FieldQuantity, v))
}

// QuantityLT applies the LT predicate on the "quantity" field.
func QuantityLT(v int) predicate.PanierLoadBalancer {
	return predicate.PanierLoadBalancer(sql.FieldLT(FieldQuantity, v))
}

// QuantityLTE applies the LTE predicate on the "quantity" field.
func QuantityLTE(v int) predicate.PanierLoadBalancer {
	return predicate.PanierLoadBalancer(sql.FieldLTE(FieldQuantity, v))
}

// HasPanier applies the HasEdge predicate on the "panier" edge.
func HasPanier() predicate.PanierLoadBalancer {
	return predicate.PanierLoadBalancer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PanierTable, PanierColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPanierWith applies the HasEdge predicate on the "panier" edge with a given conditions (other predicates).
func HasPanierWith(preds ...predicate.Panier) predicate.PanierLoadBalancer {
	return predicate.PanierLoadBalancer(func(s *sql.Selector) {
		step := newPanierStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLoadBalancer applies the HasEdge predicate on the "loadBalancer" edge.
func HasLoadBalancer() predicate.PanierLoadBalancer {
	return predicate.PanierLoadBalancer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, LoadBalancerTable, LoadBalancerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLoadBalancerWith applies the HasEdge predicate on the "loadBalancer" edge with a given conditions (other predicates).
func HasLoadBalancerWith(preds ...predicate.LoadBalancer) predicate.PanierLoadBalancer {
	return predicate.PanierLoadBalancer(func(s *sql.Selector) {
		step := newLoadBalancerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PanierLoadBalancer) predicate.PanierLoadBalancer {
	return predicate.PanierLoadBalancer(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PanierLoadBalancer) predicate.PanierLoadBalancer {
	return predicate.PanierLoadBalancer(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PanierLoadBalancer) predicate.PanierLoadBalancer {
	return predicate.PanierLoadBalancer(func(s *sql.Selector) {
		p(s.Not())
	})
}
