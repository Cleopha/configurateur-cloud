// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/panier"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Panier is the model entity for the Panier schema.
type Panier struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UID holds the value of the "uid" field.
	UID uuid.UUID `json:"uid,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PanierQuery when eager-loading is set.
	Edges        PanierEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PanierEdges holds the relations/edges for other nodes in the graph.
type PanierEdges struct {
	// PanierInstances holds the value of the panierInstances edge.
	PanierInstances []*PanierInstances `json:"panierInstances,omitempty"`
	// PanierBlockStorage holds the value of the panierBlockStorage edge.
	PanierBlockStorage []*PanierBlockStorage `json:"panierBlockStorage,omitempty"`
	// PanierIPAddress holds the value of the panierIPAddress edge.
	PanierIPAddress []*PanierIPAddress `json:"panierIPAddress,omitempty"`
	// PanierLoadBalancer holds the value of the panierLoadBalancer edge.
	PanierLoadBalancer []*PanierLoadBalancer `json:"panierLoadBalancer,omitempty"`
	// PanierObjectStorage holds the value of the panierObjectStorage edge.
	PanierObjectStorage []*PanierObjectStorage `json:"panierObjectStorage,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// PanierInstancesOrErr returns the PanierInstances value or an error if the edge
// was not loaded in eager-loading.
func (e PanierEdges) PanierInstancesOrErr() ([]*PanierInstances, error) {
	if e.loadedTypes[0] {
		return e.PanierInstances, nil
	}
	return nil, &NotLoadedError{edge: "panierInstances"}
}

// PanierBlockStorageOrErr returns the PanierBlockStorage value or an error if the edge
// was not loaded in eager-loading.
func (e PanierEdges) PanierBlockStorageOrErr() ([]*PanierBlockStorage, error) {
	if e.loadedTypes[1] {
		return e.PanierBlockStorage, nil
	}
	return nil, &NotLoadedError{edge: "panierBlockStorage"}
}

// PanierIPAddressOrErr returns the PanierIPAddress value or an error if the edge
// was not loaded in eager-loading.
func (e PanierEdges) PanierIPAddressOrErr() ([]*PanierIPAddress, error) {
	if e.loadedTypes[2] {
		return e.PanierIPAddress, nil
	}
	return nil, &NotLoadedError{edge: "panierIPAddress"}
}

// PanierLoadBalancerOrErr returns the PanierLoadBalancer value or an error if the edge
// was not loaded in eager-loading.
func (e PanierEdges) PanierLoadBalancerOrErr() ([]*PanierLoadBalancer, error) {
	if e.loadedTypes[3] {
		return e.PanierLoadBalancer, nil
	}
	return nil, &NotLoadedError{edge: "panierLoadBalancer"}
}

// PanierObjectStorageOrErr returns the PanierObjectStorage value or an error if the edge
// was not loaded in eager-loading.
func (e PanierEdges) PanierObjectStorageOrErr() ([]*PanierObjectStorage, error) {
	if e.loadedTypes[4] {
		return e.PanierObjectStorage, nil
	}
	return nil, &NotLoadedError{edge: "panierObjectStorage"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Panier) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case panier.FieldID:
			values[i] = new(sql.NullInt64)
		case panier.FieldUID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Panier fields.
func (pa *Panier) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case panier.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pa.ID = int(value.Int64)
		case panier.FieldUID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field uid", values[i])
			} else if value != nil {
				pa.UID = *value
			}
		default:
			pa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Panier.
// This includes values selected through modifiers, order, etc.
func (pa *Panier) Value(name string) (ent.Value, error) {
	return pa.selectValues.Get(name)
}

// QueryPanierInstances queries the "panierInstances" edge of the Panier entity.
func (pa *Panier) QueryPanierInstances() *PanierInstancesQuery {
	return NewPanierClient(pa.config).QueryPanierInstances(pa)
}

// QueryPanierBlockStorage queries the "panierBlockStorage" edge of the Panier entity.
func (pa *Panier) QueryPanierBlockStorage() *PanierBlockStorageQuery {
	return NewPanierClient(pa.config).QueryPanierBlockStorage(pa)
}

// QueryPanierIPAddress queries the "panierIPAddress" edge of the Panier entity.
func (pa *Panier) QueryPanierIPAddress() *PanierIPAddressQuery {
	return NewPanierClient(pa.config).QueryPanierIPAddress(pa)
}

// QueryPanierLoadBalancer queries the "panierLoadBalancer" edge of the Panier entity.
func (pa *Panier) QueryPanierLoadBalancer() *PanierLoadBalancerQuery {
	return NewPanierClient(pa.config).QueryPanierLoadBalancer(pa)
}

// QueryPanierObjectStorage queries the "panierObjectStorage" edge of the Panier entity.
func (pa *Panier) QueryPanierObjectStorage() *PanierObjectStorageQuery {
	return NewPanierClient(pa.config).QueryPanierObjectStorage(pa)
}

// Update returns a builder for updating this Panier.
// Note that you need to call Panier.Unwrap() before calling this method if this Panier
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *Panier) Update() *PanierUpdateOne {
	return NewPanierClient(pa.config).UpdateOne(pa)
}

// Unwrap unwraps the Panier entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pa *Panier) Unwrap() *Panier {
	_tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: Panier is not a transactional entity")
	}
	pa.config.driver = _tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *Panier) String() string {
	var builder strings.Builder
	builder.WriteString("Panier(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pa.ID))
	builder.WriteString("uid=")
	builder.WriteString(fmt.Sprintf("%v", pa.UID))
	builder.WriteByte(')')
	return builder.String()
}

// Paniers is a parsable slice of Panier.
type Paniers []*Panier
