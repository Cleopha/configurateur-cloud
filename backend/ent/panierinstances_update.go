// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/instances"
	"backend/ent/panier"
	"backend/ent/panierinstances"
	"backend/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PanierInstancesUpdate is the builder for updating PanierInstances entities.
type PanierInstancesUpdate struct {
	config
	hooks    []Hook
	mutation *PanierInstancesMutation
}

// Where appends a list predicates to the PanierInstancesUpdate builder.
func (piu *PanierInstancesUpdate) Where(ps ...predicate.PanierInstances) *PanierInstancesUpdate {
	piu.mutation.Where(ps...)
	return piu
}

// SetQuantity sets the "quantity" field.
func (piu *PanierInstancesUpdate) SetQuantity(i int) *PanierInstancesUpdate {
	piu.mutation.ResetQuantity()
	piu.mutation.SetQuantity(i)
	return piu
}

// AddQuantity adds i to the "quantity" field.
func (piu *PanierInstancesUpdate) AddQuantity(i int) *PanierInstancesUpdate {
	piu.mutation.AddQuantity(i)
	return piu
}

// SetPanierID sets the "panier" edge to the Panier entity by ID.
func (piu *PanierInstancesUpdate) SetPanierID(id int) *PanierInstancesUpdate {
	piu.mutation.SetPanierID(id)
	return piu
}

// SetPanier sets the "panier" edge to the Panier entity.
func (piu *PanierInstancesUpdate) SetPanier(p *Panier) *PanierInstancesUpdate {
	return piu.SetPanierID(p.ID)
}

// SetInstanceID sets the "instance" edge to the Instances entity by ID.
func (piu *PanierInstancesUpdate) SetInstanceID(id int) *PanierInstancesUpdate {
	piu.mutation.SetInstanceID(id)
	return piu
}

// SetInstance sets the "instance" edge to the Instances entity.
func (piu *PanierInstancesUpdate) SetInstance(i *Instances) *PanierInstancesUpdate {
	return piu.SetInstanceID(i.ID)
}

// Mutation returns the PanierInstancesMutation object of the builder.
func (piu *PanierInstancesUpdate) Mutation() *PanierInstancesMutation {
	return piu.mutation
}

// ClearPanier clears the "panier" edge to the Panier entity.
func (piu *PanierInstancesUpdate) ClearPanier() *PanierInstancesUpdate {
	piu.mutation.ClearPanier()
	return piu
}

// ClearInstance clears the "instance" edge to the Instances entity.
func (piu *PanierInstancesUpdate) ClearInstance() *PanierInstancesUpdate {
	piu.mutation.ClearInstance()
	return piu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (piu *PanierInstancesUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, piu.sqlSave, piu.mutation, piu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piu *PanierInstancesUpdate) SaveX(ctx context.Context) int {
	affected, err := piu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (piu *PanierInstancesUpdate) Exec(ctx context.Context) error {
	_, err := piu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piu *PanierInstancesUpdate) ExecX(ctx context.Context) {
	if err := piu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (piu *PanierInstancesUpdate) check() error {
	if _, ok := piu.mutation.PanierID(); piu.mutation.PanierCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PanierInstances.panier"`)
	}
	if _, ok := piu.mutation.InstanceID(); piu.mutation.InstanceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PanierInstances.instance"`)
	}
	return nil
}

func (piu *PanierInstancesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := piu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(panierinstances.Table, panierinstances.Columns, sqlgraph.NewFieldSpec(panierinstances.FieldID, field.TypeInt))
	if ps := piu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piu.mutation.Quantity(); ok {
		_spec.SetField(panierinstances.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := piu.mutation.AddedQuantity(); ok {
		_spec.AddField(panierinstances.FieldQuantity, field.TypeInt, value)
	}
	if piu.mutation.PanierCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   panierinstances.PanierTable,
			Columns: []string{panierinstances.PanierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panier.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.PanierIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   panierinstances.PanierTable,
			Columns: []string{panierinstances.PanierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panier.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if piu.mutation.InstanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   panierinstances.InstanceTable,
			Columns: []string{panierinstances.InstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instances.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.InstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   panierinstances.InstanceTable,
			Columns: []string{panierinstances.InstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instances.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, piu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{panierinstances.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	piu.mutation.done = true
	return n, nil
}

// PanierInstancesUpdateOne is the builder for updating a single PanierInstances entity.
type PanierInstancesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PanierInstancesMutation
}

// SetQuantity sets the "quantity" field.
func (piuo *PanierInstancesUpdateOne) SetQuantity(i int) *PanierInstancesUpdateOne {
	piuo.mutation.ResetQuantity()
	piuo.mutation.SetQuantity(i)
	return piuo
}

// AddQuantity adds i to the "quantity" field.
func (piuo *PanierInstancesUpdateOne) AddQuantity(i int) *PanierInstancesUpdateOne {
	piuo.mutation.AddQuantity(i)
	return piuo
}

// SetPanierID sets the "panier" edge to the Panier entity by ID.
func (piuo *PanierInstancesUpdateOne) SetPanierID(id int) *PanierInstancesUpdateOne {
	piuo.mutation.SetPanierID(id)
	return piuo
}

// SetPanier sets the "panier" edge to the Panier entity.
func (piuo *PanierInstancesUpdateOne) SetPanier(p *Panier) *PanierInstancesUpdateOne {
	return piuo.SetPanierID(p.ID)
}

// SetInstanceID sets the "instance" edge to the Instances entity by ID.
func (piuo *PanierInstancesUpdateOne) SetInstanceID(id int) *PanierInstancesUpdateOne {
	piuo.mutation.SetInstanceID(id)
	return piuo
}

// SetInstance sets the "instance" edge to the Instances entity.
func (piuo *PanierInstancesUpdateOne) SetInstance(i *Instances) *PanierInstancesUpdateOne {
	return piuo.SetInstanceID(i.ID)
}

// Mutation returns the PanierInstancesMutation object of the builder.
func (piuo *PanierInstancesUpdateOne) Mutation() *PanierInstancesMutation {
	return piuo.mutation
}

// ClearPanier clears the "panier" edge to the Panier entity.
func (piuo *PanierInstancesUpdateOne) ClearPanier() *PanierInstancesUpdateOne {
	piuo.mutation.ClearPanier()
	return piuo
}

// ClearInstance clears the "instance" edge to the Instances entity.
func (piuo *PanierInstancesUpdateOne) ClearInstance() *PanierInstancesUpdateOne {
	piuo.mutation.ClearInstance()
	return piuo
}

// Where appends a list predicates to the PanierInstancesUpdate builder.
func (piuo *PanierInstancesUpdateOne) Where(ps ...predicate.PanierInstances) *PanierInstancesUpdateOne {
	piuo.mutation.Where(ps...)
	return piuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (piuo *PanierInstancesUpdateOne) Select(field string, fields ...string) *PanierInstancesUpdateOne {
	piuo.fields = append([]string{field}, fields...)
	return piuo
}

// Save executes the query and returns the updated PanierInstances entity.
func (piuo *PanierInstancesUpdateOne) Save(ctx context.Context) (*PanierInstances, error) {
	return withHooks(ctx, piuo.sqlSave, piuo.mutation, piuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piuo *PanierInstancesUpdateOne) SaveX(ctx context.Context) *PanierInstances {
	node, err := piuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (piuo *PanierInstancesUpdateOne) Exec(ctx context.Context) error {
	_, err := piuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piuo *PanierInstancesUpdateOne) ExecX(ctx context.Context) {
	if err := piuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (piuo *PanierInstancesUpdateOne) check() error {
	if _, ok := piuo.mutation.PanierID(); piuo.mutation.PanierCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PanierInstances.panier"`)
	}
	if _, ok := piuo.mutation.InstanceID(); piuo.mutation.InstanceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PanierInstances.instance"`)
	}
	return nil
}

func (piuo *PanierInstancesUpdateOne) sqlSave(ctx context.Context) (_node *PanierInstances, err error) {
	if err := piuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(panierinstances.Table, panierinstances.Columns, sqlgraph.NewFieldSpec(panierinstances.FieldID, field.TypeInt))
	id, ok := piuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PanierInstances.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := piuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, panierinstances.FieldID)
		for _, f := range fields {
			if !panierinstances.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != panierinstances.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := piuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piuo.mutation.Quantity(); ok {
		_spec.SetField(panierinstances.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := piuo.mutation.AddedQuantity(); ok {
		_spec.AddField(panierinstances.FieldQuantity, field.TypeInt, value)
	}
	if piuo.mutation.PanierCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   panierinstances.PanierTable,
			Columns: []string{panierinstances.PanierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panier.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.PanierIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   panierinstances.PanierTable,
			Columns: []string{panierinstances.PanierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(panier.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if piuo.mutation.InstanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   panierinstances.InstanceTable,
			Columns: []string{panierinstances.InstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instances.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.InstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   panierinstances.InstanceTable,
			Columns: []string{panierinstances.InstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instances.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PanierInstances{config: piuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, piuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{panierinstances.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	piuo.mutation.done = true
	return _node, nil
}
